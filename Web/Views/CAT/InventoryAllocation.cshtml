@model  App.Data.Domain.InventoryAllocation
@{
    var mode = ViewBag.crudMode;
    var title = mode == "I" ? "Add" : (mode == "U" ? "Update" : "Delete");
    var orischedule = Model.OriginalSchedule == DateTime.MinValue ? "" : Model.OriginalSchedule.ToString("MM/dd/yyyy");
}
<script src="~/Scripts.app/cat/InventoryDetail.cshtml.js"></script>
<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
    <h4 class="modal-title" id="myModalLabel">@title Inventory Allocation</h4>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    if (ViewBag.crudMode == "I")
    {
        <input type="hidden" name="Cycle" id="Cycle" value="@ViewBag.Cycle" />
    }
    else
    {
        <input type="hidden" name="Cycle" id="Cycle" value="@Model.Cycle" />
    }

    <input type="hidden" name="KAL" id="KAL" value="@ViewBag.KAL" />
    <div class="modal-body">
        <div class="col-lg-12">
            <!-- Default input -->
            <div class="col-lg-12">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label col-md-5 col-xs-12">Original Schedule</label>
                        <div class="input-group col-md-7 col-xs-12">
                            @Html.TextBoxFor(m => m.OriginalSchedule, new { @class = "form-control date required", id = "OriginalScheduleAllocation", name = "OriginalScheduleAllocation", @Value = orischedule, @readonly = "readonly", style = "background:#ffffff" })
                            <div class="input-group-addon cal2original" style="background:#00C0EF;border-color:#00ACD6;">
                                <i class="fa fa-calendar" style="color:#FFFFFF;"></i>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-5 col-xs-12">Unit No.</label>
                        <div class="input-group col-md-7 col-xs-12">
                            @Html.TextBoxFor(m => m.UnitNo, new { @class = "form-control required", placeholder = "Unit No." })
                            <div>@Html.ValidationMessageFor(m => m.UnitNo)</div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-5 col-xs-12">Serial No.</label>
                        <div class="input-group col-md-7 col-xs-12">
                            @Html.TextBoxFor(m => m.SerialNo, new { @class = "form-control required", placeholder = "Serial No." })
                            <div>@Html.ValidationMessageFor(m => m.SerialNo)</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label col-md-5 col-xs-12">PO No.</label>
                        <div class="input-group col-md-7 col-xs-12">
                            @Html.TextBoxFor(m => m.PONumber, new { @class = "form-control required", placeholder = "PO No." })
                            <div>@Html.ValidationMessageFor(m => m.PONumber)</div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-5 col-xs-12">Store</label>
                        <div class="input-group col-md-7 col-xs-12">
                            @Html.DropDownListFor(m => m.StoreID, new SelectList(ViewBag.store_list, "ID", "Name"), new { @class = "js-states form-control", @style = "display:none" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-5 col-xs-12">Customer</label>
                        <div class="input-group col-md-7 col-xs-12">
                            @*@Html.TextBoxFor(m => m.Customer, new { @class = "form-control required", placeholder = "Customer" })
                                <div>@Html.ValidationMessageFor(m => m.UnitNo)</div>*@
                            <select class="js-states form-control" id="CUSTOMER_ID" name="CUSTOMER_ID" style="width: 95%;">
                                <option value="@Model.CUSTOMER_ID">@Model.CUSTOMER_ID ~ @Model.Customer</option>
                            </select>
                            <div>@Html.ValidationMessageFor(m => m.CUSTOMER_ID)</div>
                        </div>
                    </div>

                    @if (!Model.IsUsed && mode == "U")
                    {
                        <div class="form-group">
                            <label class="control-label col-md-5 col-xs-12">Is Active</label>
                            <div class="input-group col-md-7 col-xs-12">
                                <select class="js-states form-control" id="IsActive" name="IsActive" style="width: 99%;">
                                    <option @(Model.IsActive && !Model.IsUsed ? "selected='selected" : "") value="true">Active</option>
                                    <option @(!Model.IsActive || (Model.IsActive && Model.IsUsed) ? "selected='selected" : "") value="false">Inactive</option>
                                </select>
                                <div>@Html.ValidationMessageFor(m => m.IsActive)</div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
        <div class="nav-tabs-custom nav-justified tabs-style-underline">
            <ul class="nav nav-justified nav-tabs "></ul>
            <!-- /.tab-content -->
        </div>

    </div>


    <div class="modal-footer">
        <span id="progress" class="text-center" style="display: none;">
            <img src="@Url.Content("~/Content/images/wait.gif")" alt="wait" />
            Wait..
        </span>
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        @if (mode == "I")
        {
            <button type="submit" class="btn btn-success"><i class="fa fa-save"></i> Save</button>
        }
        else if (mode == "U")
        {
            <button type="submit" class="btn btn-success"><i class="fa fa-save"></i> Update</button>
        }
        else
        {
            <button type="submit" class="btn btn-danger"><i class="fa fa-save"></i> Delete</button>
        }

    </div>

    @Html.HiddenFor(a => a.ID)
    @*@Html.HiddenFor(a => a.KAL)*@
    @*@Html.HiddenFor(a => a.IsActive, new { @Value = false })*@
    @Html.HiddenFor(a => a.IsUsed, new { @Value = false })
    @Html.HiddenFor(a => a.CreatedDate)
    @Html.HiddenFor(a => a.CreatedBy)
    @Html.HiddenFor(a => a.UpdatedBy)
    @Html.HiddenFor(a => a.UpdatedDate)
}

<script>
    var mode = '@mode';
    if (mode != 'I') $("#ID").attr('readonly', 'readonly');

    $(document).ready(function () {
        initSelect();
        selectAll = function (obj, fld) {
            $("[name=" + fld + "]").prop('checked', $('#' + obj.id).prop("checked"));
        };
        $("form").removeData("validator");
        $("form").removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse("form");
    });

    function initSelect() {
        $(".js-states").select2({ width: 'resolve', dropdownAutoWidth: 'false' });

        var width = $(".select2-container--default").width() - 5;
        $(".select2-container--default").css('width', width + 'px');

        $('.cal1').click(function () {
            $('#AllocationDate').focus().datepicker({
                format: " mm/dd/yyyy",
                minDate: new Date()
            });
        });

        $('#OriginalScheduleAllocation').focus().datepicker({
            format: " mm/dd/yyyy",
            //minDate: '0'
            startDate: "today"
        });

        //$('.cal2original').click(function () {
            
        //});

        var customer = new mySelect2({
            id: 'CUSTOMER_ID',
            url: '/Picker/SelectToCustomer'
        }).load();

        $.ajax({
            url: '/cat/getLists/',
            async: false,
            type: "GET",
            dataType: 'json',
            error: function () {
                alert(" An error occurred.");
            },
            success: function (data) {
                //$("[name=SOSIDs]").append('<option value="" disabled selected>' + "-- Select SOS --" + '</option>');
                //$.each(data.sos_list, function (i, data) {
                //    $('<option>', { value: data.ID }).html(data.SOS).appendTo($("[name=SOSIDs]"));
                //});
                $("#SOSIDs").append('<option value="" disabled selected>' + "-- Select SOS --" + '</option>');
                $.each(data.sos_list, function (i, data) {
                    $('<option>', { value: data.ID }).html(data.SOS).appendTo($("#SOSIDs"));
                });

                $("[name=StoreIDs]").append('<option value="" disabled selected>' + "-- Select Store --" + '</option>');
                $.each(data.store_list, function (i, data) {
                    $('<option>', { value: data.ID }).html(data.Name).appendTo($("[name=StoreIDs]"));
                });

                $("[name=CustomerIDs]").append('<option value="" disabled selected>' + "-- Select Customer --" + '</option>');
                $.each(data.customer_list, function (i, data) {
                    $('<option>', { value: data.ID }).html(data.SOS).appendTo($("[name=CustomerIDs]"));
                });
            }
        });
    }
</script>

