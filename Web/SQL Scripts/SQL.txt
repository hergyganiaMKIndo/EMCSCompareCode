-------------------------------------------------------------12-01-2021------------------------------

USE [EMCS]
GO
/****** Object:  Table [dbo].[Type]    Script Date: 12-01-2022 17:45:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Type](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [varchar](10) NULL,
 CONSTRAINT [PK_Type] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

SET IDENTITY_INSERT [dbo].[Type] ON 
GO

INSERT [dbo].[Type] ([Id], [Name]) VALUES (1, N'PLB')
GO

INSERT [dbo].[Type] ([Id], [Name]) VALUES (2, N'Non PLB')
GO

SET IDENTITY_INSERT [dbo].[Type] OFF
GO

ALTER TABLE [dbo].[CiplForwader]
ADD Type NVARCHAR(10) null
GO

/****** Object:  StoredProcedure [dbo].[SP_CiplInsert]    Script Date: 12-01-2022 16:17:10 ******/
ALTER PROCEDURE [dbo].[SP_CiplInsert]
(
  @Category NVARCHAR(100),
  @CategoryItem NVARCHAR(50),
  @ExportType NVARCHAR(100),
  @ExportTypeItem NVARCHAR(100),
  @SoldConsignee NVARCHAR(30),
  @SoldToName NVARCHAR(200),
  @SoldToAddress NVARCHAR(MAX),
  @SoldToCountry NVARCHAR(100),
  @SoldToTelephone NVARCHAR(100),
  @SoldToFax NVARCHAR(100),
  @SoldToPic NVARCHAR(200),
  @SoldToEmail NVARCHAR(200),
  @ShipDelivery NVARCHAR(30),
  @ConsigneeName NVARCHAR(200),
  @ConsigneeAddress NVARCHAR(MAX),
  @ConsigneeCountry NVARCHAR(100),
  @ConsigneeTelephone NVARCHAR(100),
  @ConsigneeFax NVARCHAR(100),
  @ConsigneePic NVARCHAR(200),
  @ConsigneeEmail NVARCHAR(200),
  @NotifyName NVARCHAR(200),
  @NotifyAddress NVARCHAR(MAX),
  @NotifyCountry NVARCHAR(100),
  @NotifyTelephone NVARCHAR(100),
  @NotifyFax NVARCHAR(100),
  @NotifyPic NVARCHAR(200),
  @NotifyEmail NVARCHAR(200),
  @ConsigneeSameSoldTo BIGINT,
  @NotifyPartySameConsignee BIGINT,
  @Area NVARCHAR(100),
  @Branch NVARCHAR(100),
  @Currency NVARCHAR(20),
  @Rate DECIMAL(18,2),
  @PaymentTerms NVARCHAR(50),
  @ShippingMethod NVARCHAR(30),
  @CountryOfOrigin NVARCHAR(200),
  @LcNoDate NVARCHAR(200),
  @IncoTerm NVARCHAR(50),
  @FreightPayment NVARCHAR(30),
  @ShippingMarks NVARCHAR(MAX),
  @Remarks NVARCHAR(200),
  @SpecialInstruction NVARCHAR(MAX),
  @CreateBy NVARCHAR(50),
  @CreateDate datetime,
  @UpdateBy NVARCHAR(50),
  @UpdateDate datetime,
  @Status NVARCHAR(10),
  @IsDelete BIT,
  @LoadingPort NVARCHAR(200),
  @DestinationPort NVARCHAR(200),
  @PickUpPic NVARCHAR(200),
  @PickUpArea NVARCHAR(200),
  @CategoryReference NVARCHAR(50),
  @ReferenceNo NVARCHAR(50),
  @Consolidate NVARCHAR(10),
  @Forwader NVARCHAR(200),
  @BranchForwarder NVARCHAR(200),
  @Attention NVARCHAR(200),
  @Company NVARCHAR(200),
  @SubconCompany NVARCHAR(200),
  @Address NVARCHAR(MAX),
  @AreaForwarder NVARCHAR(100),
  @City NVARCHAR(100),
  @PostalCode NVARCHAR(100),
  @Contact NVARCHAR(200),
  @FaxNumber NVARCHAR(200),
  @Forwading NVARCHAR(200),
  @Email NVARCHAR(200),
  @Type NVARCHAR(10)
  --@LASTCIPLID bigint output
)
AS
BEGIN
  DECLARE @LASTID bigint
  INSERT INTO [dbo].[Cipl]
           ([Category]
           ,[CategoriItem]
           ,[ExportType]
           ,[ExportTypeItem]
		   ,[SoldConsignee]
           ,[SoldToName]
           ,[SoldToAddress]
           ,[SoldToCountry]
           ,[SoldToTelephone]
           ,[SoldToFax]
           ,[SoldToPic]
           ,[SoldToEmail]
           ,[ShipDelivery]
           ,[ConsigneeName]
           ,[ConsigneeAddress]
           ,[ConsigneeCountry]
           ,[ConsigneeTelephone]
           ,[ConsigneeFax]
           ,[ConsigneePic]
           ,[ConsigneeEmail]
           ,[NotifyName]
           ,[NotifyAddress]
           ,[NotifyCountry]
           ,[NotifyTelephone]
           ,[NotifyFax]
           ,[NotifyPic]
           ,[NotifyEmail]
           ,[ConsigneeSameSoldTo]
           ,[NotifyPartySameConsignee]
       ,[Area]
       ,[Branch]
	   ,[Currency]
	   ,[Rate]
           ,[PaymentTerms]
           ,[ShippingMethod]
           ,[CountryOfOrigin]
           ,[LcNoDate]
           ,[IncoTerm]
           ,[FreightPayment]
           ,[ShippingMarks]
           ,[Remarks]
           ,[SpecialInstruction]
           ,[CreateBy]
           ,[CreateDate]
           ,[UpdateBy]
           ,[UpdateDate]
           ,[IsDelete]
		   ,[LoadingPort]
		   ,[DestinationPort]
		   ,[PickUpPic]
       ,[PickUpArea]
	   ,[CategoryReference]
	   ,[ReferenceNo]
	   ,[Consolidate]
           )
     VALUES
           (@Category
           ,@CategoryItem
           ,@ExportType
           ,@ExportTypeItem
       ,@SoldConsignee
           ,@SoldToName
           ,@SoldToAddress
           ,@SoldToCountry
           ,@SoldToTelephone
           ,@SoldToFax
           ,@SoldToPic
           ,@SoldToEmail
       ,@ShipDelivery
           ,@ConsigneeName
           ,@ConsigneeAddress
           ,@ConsigneeCountry
           ,@ConsigneeTelephone
           ,@ConsigneeFax
           ,@ConsigneePic
           ,@ConsigneeEmail
           ,@NotifyName
           ,@NotifyAddress
           ,@NotifyCountry
           ,@NotifyTelephone
           ,@NotifyFax
           ,@NotifyPic
           ,@NotifyEmail
           ,@ConsigneeSameSoldTo
           ,@NotifyPartySameConsignee
       ,@Area
       ,@Branch
	   ,@Currency
	   ,@Rate
           ,@PaymentTerms
           ,@ShippingMethod
           ,@CountryOfOrigin
           ,@LcNoDate
           ,@IncoTerm
           ,@FreightPayment
           ,@ShippingMarks
           ,@Remarks
           ,@SpecialInstruction
           ,@CreateBy
           ,@CreateDate
           ,@UpdateBy
           ,@UpdateDate
           ,@IsDelete
		   ,@LoadingPort
		   ,@DestinationPort
		   ,@PickUpPic
       ,@PickUpArea
	   ,@CategoryReference
	   ,@ReferenceNo
	   ,@Consolidate)

  SET @LASTID = CAST(SCOPE_IDENTITY() as bigint)
  --SET @LASTCIPLID =@LASTID
  INSERT INTO [dbo].[CiplForwader]
           ([IdCipl]
       ,[Forwader]
	   ,[Branch]
	   ,[Attention]
       ,[Company]
	   ,[SubconCompany]
       ,[Address]
	   ,[Area]
	   ,[City]
	   ,[PostalCode]
       ,[Contact]
	   ,[FaxNumber]
	   ,[Forwading]
       ,[Email]
           ,[CreateBy]
           ,[CreateDate]
           ,[UpdateBy]
           ,[UpdateDate]
           ,[IsDelete]
		   ,[Type]
           )
     VALUES
           (@LASTID
       ,@Forwader
	   ,@BranchForwarder
	   ,@Attention
       ,@Company
	   ,@SubconCompany
       ,@Address
	   ,@AreaForwarder
	   ,@City
	   ,@PostalCode	
       
       ,@Contact
	   ,@FaxNumber
	   ,@Forwading
       ,@Email
        ,@CreateBy
        ,@CreateDate
        ,@UpdateBy
        ,@UpdateDate
        ,@IsDelete
        ,@Type)

  EXEC dbo.GenerateCiplNumber @LASTID, @CreateBy;

  DECLARE @CIPLNO nvarchar(20), @GETCATEGORY nvarchar(2)
  
  SELECT @GETCATEGORY = 
    CASE
      WHEN C.Category = 'CATERPILLAR NEW EQUIPMENT' THEN 'PP'
      WHEN C.Category = 'CATERPILLAR SPAREPARTS' THEN 'SP'
      WHEN C.Category = 'CATERPILLAR USED EQUIPMENT' THEN 'UE'
	  WHEN C.Category = 'MISCELLANEOUS' THEN 'MC'
    ELSE Null
    END 
    FROM Cipl C WHERE C.id = @LASTID
    
  EXEC dbo.sp_insert_request_data @LASTID, 'CIPL', @GETCATEGORY, @Status, 'CREATE';

END
GO

/****** Object:  StoredProcedure [dbo].[SP_CiplUpdate]    Script Date: 12-01-2022 16:13:03 ******/
ALTER PROCEDURE [dbo].[SP_CiplUpdate]
(
	@id bigint,
	@Category NVARCHAR(100),
	@CategoryItem NVARCHAR(50),
	@ExportType NVARCHAR(100),
	@ExportTypeItem NVARCHAR(50),
	@SoldConsignee NVARCHAR(30),
	@SoldToName NVARCHAR(200),
	@SoldToAddress NVARCHAR(MAX),
	@SoldToCountry NVARCHAR(100),
	@SoldToTelephone NVARCHAR(100),
	@SoldToFax NVARCHAR(100),
	@SoldToPic NVARCHAR(200),
	@SoldToEmail NVARCHAR(200),
	@ShipDelivery NVARCHAR(30),
	@ConsigneeName NVARCHAR(200),
	@ConsigneeAddress NVARCHAR(MAX),
	@ConsigneeCountry NVARCHAR(100),
	@ConsigneeTelephone NVARCHAR(100),
	@ConsigneeFax NVARCHAR(100),
	@ConsigneePic NVARCHAR(200),
	@ConsigneeEmail NVARCHAR(200),
	@NotifyName NVARCHAR(200),
	@NotifyAddress NVARCHAR(MAX),
	@NotifyCountry NVARCHAR(100),
	@NotifyTelephone NVARCHAR(100),
	@NotifyFax NVARCHAR(100),
	@NotifyPic NVARCHAR(200),
	@NotifyEmail NVARCHAR(200),
	@ConsigneeSameSoldTo BIGINT,
	@NotifyPartySameConsignee BIGINT,
	@Area NVARCHAR(100),
	@Branch NVARCHAR(100),
	@Currency NVARCHAR(20),
	@Rate DECIMAL(18,2),
	@PaymentTerms NVARCHAR(50),
	@ShippingMethod NVARCHAR(30),
	@CountryOfOrigin NVARCHAR(30),
	@LcNoDate NVARCHAR(30),
	@IncoTerm NVARCHAR(50),
	@FreightPayment NVARCHAR(30),
	@ShippingMarks NVARCHAR(MAX),
	@Remarks NVARCHAR(200),
	@SpecialInstruction NVARCHAR(MAX),
	@CreateBy NVARCHAR(50),
	@CreateDate datetime,
	@UpdateBy NVARCHAR(50),
	@UpdateDate datetime,
	@Status NVARCHAR(10),
	@IsDelete BIT,
	@LoadingPort NVARCHAR(200),
    @DestinationPort NVARCHAR(200),
	@PickUpPic NVARCHAR(200),
	@PickUpArea NVARCHAR(200),
	@CategoryReference NVARCHAR(50),
	@ReferenceNo NVARCHAR(50),
	@Consolidate NVARCHAR(20),
	@Forwader NVARCHAR(200),
	@BranchForwarder NVARCHAR(200),
	@Attention NVARCHAR(200),
	@Company NVARCHAR(200),
	@SubconCompany NVARCHAR(200),
	@Address NVARCHAR(MAX),
	@AreaForwarder NVARCHAR(100),
	@City NVARCHAR(100),
	@PostalCode NVARCHAR(100),
	@Contact NVARCHAR(200),
	@FaxNumber NVARCHAR(200),
	@Forwading NVARCHAR(200),
	@Email NVARCHAR(200),
	@Type VARCHAR(10)
)
AS
BEGIN
	UPDATE dbo.Cipl 
		SET Category = @Category 
           ,CategoriItem = @CategoryItem
           ,ExportType = @ExportType
           ,ExportTypeItem = @ExportTypeItem
		   ,SoldConsignee = @SoldConsignee
           ,SoldToName = @SoldToName
           ,SoldToAddress = @SoldToAddress
           ,SoldToCountry = @SoldToCountry
           ,SoldToTelephone = @SoldToTelephone
           ,SoldToFax = @SoldToFax
           ,SoldToPic = @SoldToPic
           ,SoldToEmail = @SoldToEmail
		   ,ShipDelivery = @ShipDelivery
           ,ConsigneeName = @ConsigneeName
           ,ConsigneeAddress = @ConsigneeAddress
           ,ConsigneeCountry = @ConsigneeCountry
           ,ConsigneeTelephone = @ConsigneeTelephone
           ,ConsigneeFax = @ConsigneeFax
           ,ConsigneePic = @ConsigneePic
           ,ConsigneeEmail = @ConsigneeEmail
           ,NotifyName = @NotifyName
           ,NotifyAddress = @NotifyAddress
           ,NotifyCountry = @NotifyCountry
           ,NotifyTelephone = @NotifyTelephone
           ,NotifyFax = @NotifyFax
           ,NotifyPic = @NotifyPic
           ,NotifyEmail = @NotifyEmail
           ,ConsigneeSameSoldTo = @ConsigneeSameSoldTo
           ,NotifyPartySameConsignee = @NotifyPartySameConsignee
		   ,Area = @Area
		   ,Branch = @Branch
		   ,Currency = @Currency
           ,PaymentTerms = @PaymentTerms
           ,ShippingMethod = @ShippingMethod
           ,CountryOfOrigin = @CountryOfOrigin
           ,LcNoDate = @LcNoDate
           ,IncoTerm = @IncoTerm
           ,FreightPayment = @FreightPayment
           ,ShippingMarks = @ShippingMarks
           ,Remarks = @Remarks
           ,SpecialInstruction = @SpecialInstruction
           ,UpdateBy = @UpdateBy
           ,UpdateDate = @UpdateDate
           ,IsDelete = @IsDelete
		   ,LoadingPort = @LoadingPort
		   ,DestinationPort = @DestinationPort
		   ,PickUpPic = @PickUpPic
		   ,PickUpArea = @PickUpArea
		   ,CategoryReference = @CategoryReference
		   ,ReferenceNo = @ReferenceNo
		   ,Consolidate = @Consolidate
	WHERE id = @id;

	UPDATE dbo.CiplForwader
	SET Forwader = @Forwader
		,Branch = @BranchForwarder
		,Attention = @Attention
		,Company = @Company
		,SubconCompany = @SubconCompany
		,Address = @Address
		,Area = @AreaForwarder
		,City = @City
		,PostalCode = @PostalCode
		,Contact = @Contact
		,FaxNumber = @FaxNumber
		,Forwading = @Forwading
		,Email = @Email
		,UpdateBy = @UpdateBy
		,UpdateDate = @UpdateDate
        ,IsDelete = @IsDelete
		,[Type]=@Type
	WHERE IdCipl = @id;

	DECLARE @GETCATEGORY nvarchar(2)
	
	SELECT @GETCATEGORY = 
		CASE
			WHEN C.Category = 'CATERPILLAR NEW EQUIPMENT' THEN 'PP'
			WHEN C.Category = 'CATERPILLAR SPAREPARTS' THEN 'SP'
			WHEN C.Category = 'CATERPILLAR USED EQUIPMENT' THEN 'UE'
			WHEN C.Category = 'MISCELLANEOUS' THEN 'MC'
		ELSE Null
		END 
		FROM Cipl C WHERE C.id = @id
	EXEC [dbo].[sp_update_request_cipl] @id, @UpdateBy, @Status, ''

END
GO
-------------------------------------------------------------------------------------------------------


----------------------------11-01--2021 ------------------------------------------------------------------
ALTER TABLE [dbo].[ShippingInstruction]
ADD ExportType NVARCHAR(10) 
GO

ALTER PROCEDURE [dbo].[SP_SIInsert]
(
	@ID BIGINT,
	@IdCL BIGINT,
	@Description NVARCHAR(MAX),
	@SpecialInstruction NVARCHAR(MAX),
	@DocumentRequired NVARCHAR(MAX),
	@PicBlAwb NVARCHAR(10),
	@CreateBy NVARCHAR(50),
	@CreateDate datetime,
	@UpdateBy NVARCHAR(50),
	@UpdateDate datetime,
	@IsDelete BIT,
	@ExportType NVARCHAR(10)
)
AS
BEGIN
	DECLARE @LASTID bigint
	INSERT INTO [dbo].[ShippingInstruction]
           ([Description]
		   ,[IdCL]
           ,[SpecialInstruction]
		   ,[PicBlAwb]
		   ,[CreateBy]
           ,[CreateDate]
           ,[UpdateBy]
           ,[UpdateDate]
           ,[IsDelete]
		   ,[ExportType]
           )
     VALUES
           (@Description
		   ,@IdCL
           ,@SpecialInstruction
		   ,@PicBlAwb
           ,@CreateBy
           ,@CreateDate
           ,@UpdateBy
           ,@UpdateDate
           ,@IsDelete
		   ,@ExportType)

	SELECT @LASTID = CAST(SCOPE_IDENTITY() as bigint)
	EXEC dbo.GenerateShippingInstructionNumber @LASTID, @CreateBy;

	DECLARE @CIPLNO nvarchar(20)
	SELECT C.id as ID, C.SlNo as [NO], C.CreateDate as CREATEDATE FROM ShippingInstruction C WHERE C.id = @LASTID
	
	--EXEC [sp_update_request_cl] @ID, @CreateBy, 'SUBMIT', ''
END
GO

ALTER PROCEDURE [dbo].[sp_update_request_cl] -- exec sp_update_request_cl 1, 'CKB1', 'Submit', 'Testing Notes'
(
	@IdCl bigint,
	@Username nvarchar(100),
	@NewStatus nvarchar(100),
	@Notes nvarchar(100) = ''	
)
AS
BEGIN
	DECLARE @NewStepId bigint;
	DECLARE @IdFlow bigint;
	DECLARE @FlowName nvarchar(100);
	DECLARE @NextStepName nvarchar(100);
	DECLARE @Now datetime;
	DECLARE @GroupId nvarchar(100);
	DECLARE @UserType nvarchar(100);
	DECLARE @NextStepIdSystem bigint;

	DECLARE @CurrentStepId bigint;
	DECLARE @CurrentStatus nvarchar(100);
		
	SET @Now = GETDATE();
	select @UserType = [Group] From dbo.fn_get_employee_internal_ckb() WHERE AD_User = @Username

	IF @UserType <> 'internal' AND @UserType = 'CKB'
	BEGIN
		SET @GroupId = 'CKB';
	END
	ELSE 
	BEGIN
		SELECT @GroupId = hce.Organization_Name 
		FROM employee hce 
		WHERE hce.AD_User = @Username;
	END

	--select @IdFlow = IdFlow, @FlowName = upper(FlowName), @NewStepId = IdNextStep, @NextStepName = NextStepName from fn_get_cl_request_list(@Username, @GroupId) t0 where t0.IdCl = @IdCl;
	--select * from dbo.fn_get_cl_request_list_all() where IdCl = 3;

	Select @CurrentStepId = IdStep, @CurrentStatus = [Status] From [dbo].[RequestCl] WHERE IdCl = @IdCl

	IF @CurrentStepId = 30069
		BEGIN
			IF @NewStatus = 'Approve'
			BEGIN
				SET @NewStepId = 30070
				SET @NextStepName = 'Waiting NPE Document'
				SET @FlowName = 'CL'
			END
			ELSE IF @NewStatus = 'Revise'
			BEGIN
				SET @NewStepId = 30070
				SET @NextStepName = 'Need revision review by imex'
				SET @FlowName = 'CL'
				SET @NewStatus = 'Revise'
			END		
			ELSE IF @NewStatus = 'Reject'
			BEGIN
				SET @NewStepId = 30070
				SET @NextStepName = 'Reject by imex'
				SET @FlowName = 'CL'
				SET @NewStatus = 'Reject'
			END		

			UPDATE [dbo].[RequestCl]
			SET [IdStep] = @NewStepId
				,[Status] = @NewStatus
				--,[Pic] = @Username
				,[UpdateBy] = @Username
				,[UpdateDate] = GETDATE()
			WHERE IdCl = @IdCl
		END
	ELSE IF @CurrentStepId = 30071
		BEGIN
			IF @NewStatus = 'Approve'
			BEGIN
				SET @NewStepId = 10020
				SET @NextStepName = 'Waiting for BL or AWB'
				SET @FlowName = 'CL'
			END
			ELSE IF @NewStatus = 'Revise'
			BEGIN
				SET @NewStepId = 30072
				SET @NextStepName = 'Need revision review by imex'
				SET @FlowName = 'CL'
				SET @NewStatus = 'Revise'
			END
			ELSE IF @NewStatus = 'Reject'
			BEGIN
				SET @NewStepId = 30072
				SET @NextStepName = 'Need revision review by imex'
				SET @FlowName = 'CL'
				SET @NewStatus = 'Reject'
			END

			UPDATE [dbo].[RequestCl]
			SET [IdStep] = @NewStepId
				,[Status] = @NewStatus
				--,[Pic] = @Username
				,[UpdateBy] = @Username
				,[UpdateDate] = GETDATE()
			WHERE IdCl = @IdCl
		END
	ELSE
		BEGIN
            select @IdFlow = IdFlow, @FlowName = upper(FlowName), @NewStepId = IdNextStep, @NextStepName = NextStepName from fn_get_cl_request_list_all() t0 where t0.IdCl = @IdCl;
            --PRINT 'NewStepId ' + CAST(@NewStepId AS VARCHAR(10));
            --		PRINT 'NewStatus ' + CAST(@NewStatus AS VARCHAR(10));
            --		PRINT 'CurrentStepId ' + CAST(@CurrentStepId AS VARCHAR(10));
            --		PRINT 'NextStepName ' + CAST(@NextStepName AS VARCHAR(10));
                    IF @CurrentStepId = 12 
                    BEGIN
                    IF @NewStepId = 10017 AND @NewStatus = 'Submit'
                    BEGIN
                    declare @exportType nvarchar(10)=''
                    SET @exportType = (select top 1 exporttype from dbo.ShippingInstruction where IdCL =@IdCl)
                    IF (@exportType ='PJT')
                    BEGIN
                    SET @NewStepId =10020
                    SET @NextStepName = 'Waiting for BL or AWB'
                    SET @FlowName = 'CL'
                    SET @NewStatus = 'Approve'
                    --PRINT 'exporttype ' + CAST(@exporttype AS VARCHAR(10));
                    END
                    --PRINT 'exporttype ' + CAST(@exporttype AS VARCHAR(10));
                    END 
                    END 
            UPDATE [dbo].[RequestCl]
                SET [IdStep] = @NewStepId
                    ,[Status] = @NewStatus
                    ,[Pic] = @Username
                    ,[UpdateBy] = @Username
                    ,[UpdateDate] = GETDATE()
            WHERE IdCl = @IdCl
		END
	
	-- Hasni Procedure Cancel PEB
	IF  @NewStatus = 'Request Cancel'
	BEGIN
		SET @NewStepId = 30041

		UPDATE [dbo].[RequestCl]
		SET [IdStep] = @NewStepId
	     ,[Status] = @NewStatus
	     ,[Pic] = @Username
		 ,[UpdateBy] = @Username
		 ,[UpdateDate] = GETDATE()
	WHERE IdCl = @IdCl
	END

	IF  @NewStatus = 'Draft NPE'
	BEGIN
		SET @NewStepId = 30069
		SET @NewStatus = 'Submit'
		SET @NextStepName = 'Waiting approve draft NPE'
		SET @FlowName = 'CL'

		UPDATE [dbo].[RequestCl]
		SET [IdStep] = @NewStepId
	     ,[Status] = @NewStatus
	     ,[Pic] = @Username
		 ,[UpdateBy] = @Username
		 ,[UpdateDate] = GETDATE()
		WHERE IdCl = @IdCl
	END

	IF  @NewStatus = 'Create NPE'
	BEGIN
		SET @NewStepId = 30071
		SET @NewStatus = 'Submit'
		SET @NextStepName = 'Waiting approval NPE'
		SET @FlowName = 'CL'

		UPDATE [dbo].[RequestCl]
		SET [IdStep] = @NewStepId
	     ,[Status] = @NewStatus
	     ,[Pic] = @Username
		 ,[UpdateBy] = @Username
		 ,[UpdateDate] = GETDATE()
		WHERE IdCl = @IdCl
	END

	IF @NewStepId = 30042 AND @NewStatus = 'Approve'
	BEGIN
		UPDATE dbo.NpePeb SET IsDelete = 1 WHERE IdCl = @IdCl;
	END 

	--======================================================
	--- Kondisi jika cl akan melanjutkan proses ke system
	--======================================================
	IF @NewStepId = 11 AND @NewStatus = 'Submit'
	BEGIN
		select @NextStepIdSystem = x.IdNextStep from dbo.fn_get_cl_request_list_all() x where x.IdCl = @IdCl;

		UPDATE [dbo].[RequestCl]
		SET [IdStep] = @NextStepIdSystem
	     ,[Status] = @NewStatus
	     ,[Pic] = @Username
		 ,[UpdateBy] = @Username
		 ,[UpdateDate] = GETDATE()
		WHERE IdCl = @IdCl

		exec sp_set_ss_number @IdCl = @IdCl
		exec sp_update_cipl_to_revise @IdCl
	END

	IF @NewStepId = 20033 AND @NewStatus = 'Approve'
	BEGIN
		select @NextStepIdSystem = x.IdNextStep from dbo.fn_get_cl_request_list_all() x where x.IdCl = @IdCl;

		UPDATE [dbo].[RequestCl]
		SET [IdStep] = @NewStepId
	     ,[Status] = @NewStatus
	     ,[Pic] = @Username
		 ,[UpdateBy] = @Username
		 ,[UpdateDate] = GETDATE()
		WHERE IdCl = @IdCl

		exec sp_update_cipl_to_revise @IdCl
	END
	--======================================================

	exec [dbo].[sp_insert_cl_history]@id=@IdCl, @Flow=@FlowName, @Step=@NextStepName, @Status=@NewStatus, @Notes=@Notes, @CreateBy=@Username, @CreateDate=@Now;

	--IF((select Status from RequestCl where IdCl = @IdCl) <> 'DRAFT')
	--BEGIN
	--	--EXEC [sp_send_email_notification] @IdCl, 'Cargo'
	--	EXEC [sp_proccess_email] @IdCl, 'CL'
	--END
END
GO
------------------------------------------------------------------------------End------------------------------------------------------

------------------------------------------------------------ Changes By Developer ------------------------------------------------------

CREATE PROCEDURE [dbo].[sp_get_cargo_item_data_by_cargoId]   
(    
 @Id nvarchar(100) = ''    
)    
AS    
BEGIN    
 SET NOCOUNT ON;    
 DECLARE @sql nvarchar(max);      
    
 SET @sql = 'SELECT ';    
 BEGIN    
  SET @sql += 'DISTINCT t0.Id ID        
     ,t1.Id IdCargoItem    
     ,t2.Id IdCargo    
     ,t0.IdCipl          
     ,t0.IdCiplItem               
     ,t3.CiplNo                     
     ,t2.Incoterms IncoTerm                     
     ,t2.Incoterms IncoTermNumber                     
     ,t1.CaseNumber                     
     ,t3.EdoNo                     
     ,t4.DaNo InboundDa                     
     ,ISNULL(t0.NewLength, t0.Length) Length                    
     ,ISNULL(t0.NewWidth,t0.Width) Width                     
     ,ISNULL(t0.NewHeight,t0.Height) Height                    
     ,ISNULL(t0.NewNet,t0.Net) NetWeight                     
     ,t1.Sn            
     ,t1.PartNumber            
     ,t1.Ccr            
     ,t1.Quantity            
     ,t1.Name ItemName            
     ,t1.JCode            
     ,t1.ReferenceNo                  
     ,ISNULL(t0.NewGross,t0.Gross) GrossWeight                     
     ,CAST(1 as bit) state            
     ,t2.Category CargoDescription            
     ,t0.ContainerNumber    
     ,t5.Description ContainerType    
     ,t0.ContainerSealNumber'    
  END    
   SET @sql +='    
     FROM dbo.CargoItem t0    
     JOIN dbo.CiplItem t1 on t1.Id = t0.IdCiplItem    
     JOIN dbo.Cargo t2 on t2.Id = t0.IdCargo    
     JOIN dbo.Cipl t3 on t3.id = t1.IdCipl    
     LEFT JOIN dbo.GoodsReceiveItem t4 on t4.DoNo = t3.EdoNo    
     LEFT JOIN dbo.MasterParameter t5 on t5.Value = t0.ContainerType AND t5.[Group] = ''ContainerType''    
     WHERE 1=1 AND t0.IdCargo='+@Id+' ';    
 print @sql;    
 EXECUTE(@sql);    
END
GO


/* INSERT QUERY NO: 1 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', '%', 'Percentage', 0, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 2 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', '%O', 'Per mille', 1, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 3 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'ONE', 'One', 2, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 4 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'D', 'Days', 3, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 5 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', '22S', 'Square millimeter/second', 4, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 6 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'CMS', 'Centimeter/second', 5, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 7 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', '000', 'Meter/Minute', 6, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 8 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'µL', 'Microliter', 7, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 9 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'µF', 'Microfarad', 8, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 10 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'IB', 'Pikofarad', 9, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 11 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'A', 'Ampere', 10, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 12 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GOH', 'Gigaohm', 11, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 13 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GM3', 'Gram/Cubic meter', 12, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 14 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'ACR', 'Acre', 13, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 15 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'AH', 'Ampere Hour', 14, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 16 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'AM', 'Ampoule', 15, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 17 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KD3', 'Kilogram/cubic decimeter', 16, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 18 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'QML', 'Kilomol', 17, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 19 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'NI', 'Kilonewton', 18, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 20 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MN', 'Meganewton', 19, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 21 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MGO', 'Megohm', 20, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 22 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MHV', 'Megavolt', 21, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 23 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'µA', 'Microampere', 22, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 24 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'BAG', 'Bag', 23, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 25 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'BAR', 'bar', 24, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 26 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'BF', 'Board Foot', 25, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 27 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'BT', 'Bottle', 26, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 28 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'BOX', 'Box', 27, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 29 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'BQK', 'Becquerel/kilogram', 28, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 30 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'BU', 'Bunch', 29, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 31 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'RF', 'Millifarad', 30, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 32 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'M/M', 'Mol per cubic meter', 31, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 33 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'M/L', 'Mol per liter', 32, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 34 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'NA', 'Nanoampere', 33, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 35 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'C3S', 'Cubic centimeter/second', 34, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 36 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'R-U', 'Nanofarad', 35, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 37 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'NMM', 'Newton/Square millimeter', 36, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 38 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'CCM', 'Cubic centimeter', 37, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 39 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'CD', 'Candela', 38, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 40 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'CD3', 'Cubic decimeter', 39, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 41 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'CFM', 'cubic feet / minute', 40, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 42 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'CM', 'Centimeter', 41, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 43 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'CM2', 'Square centimeter', 42, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 44 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'CMH', 'Centimeter/hour', 43, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 45 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'CV', 'Case', 44, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 46 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'CL', 'Centiliter', 45, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 47 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'CUP', 'cup', 46, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 48 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'S/M', 'Siemens per meter', 47, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 49 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'TOM', 'Ton/Cubic meter', 48, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 50 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'VAM', 'Voltampere', 49, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 51 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'DAM', 'Dekameter', 50, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 52 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'DB', 'decibel', 51, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 53 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'DEG', 'Degree', 52, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 54 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'DM', 'Decimeter', 53, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 55 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'DR', 'Drum', 54, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 56 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'DZ', 'Dozen', 55, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 57 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'EA', 'each', 56, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 58 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'EU', 'Enzyme Units', 57, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 59 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'EML', 'Enzyme Units / Milliliter', 58, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 60 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'F', 'Farad', 59, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 61 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', '°F', 'Fahrenheit', 60, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 62 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'FT', 'Foot', 61, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 63 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'FT2', 'Square foot', 62, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 64 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'FT3', 'Cubic foot', 63, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 65 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'G', 'Gram', 64, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 66 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'G/L', 'gram act.ingrd / liter', 65, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 67 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GAU', 'Gram Gold', 66, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 68 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GB', 'Container', 67, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 69 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', '°C', 'Degrees Celsius', 68, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 70 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GHG', 'Gram/hectogram', 69, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 71 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GJ', 'Gigajoule', 70, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 72 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GKG', 'Gram/kilogram', 71, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 73 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GLI', 'Gram/liter', 72, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 74 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GAL', 'US gallon', 73, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 75 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GPM', 'Gallons per mile (US)', 74, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 76 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GM', 'Gram/Mol', 75, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 77 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GM2', 'Gram/square meter', 76, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 78 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GPH', 'Gallons per hour (US)', 77, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 79 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'µGQ', 'Microgram/cubic meter', 78, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 80 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GRO', 'Gross', 79, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 81 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'GAI', 'Gram act. ingrd.', 80, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 82 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'H', 'Hour', 81, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 83 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'HA', 'Hectare', 82, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 84 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'HL', 'Hectoliter', 83, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 85 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'HPA', 'Hectopascal', 84, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 86 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'HZ', 'Hertz (1/second)', 85, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 87 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', '""""', 'Inch', 86, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 88 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', '"""2"', 'Square inch', 87, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 89 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', '"""3"', 'Cubic inch', 88, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 90 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'J', 'Joule', 89, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 91 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'YR', 'Years', 90, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 92 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'JKG', 'Joule/Kilogram', 91, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 93 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'JKK', 'Spec. Heat Capacity', 92, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 94 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'JMO', 'Joule/Mol', 93, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 95 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'K', 'Kelvin', 94, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 96 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KA', 'Kiloampere', 95, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 97 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'CAN', 'Canister', 96, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 98 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'CAR', 'Carton', 97, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 99 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KBK', 'Kilobecquerel/kilogram', 98, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 100 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KFS', 'kilogramforce/squarecentimeter', 99, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 101 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KG', 'Kilogram', 100, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 102 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KGF', 'Kilogram/Square meter', 101, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 103 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KGK', 'Kilogram/Kilogram', 102, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 104 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KGM', 'Kilogram/Mol', 103, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 105 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KGS', 'Kilogram/second', 104, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 106 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KGV', 'Kilogram/cubic meter', 105, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 107 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KAI', 'Kilogram act. ingrd.', 106, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 108 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KHZ', 'Kilohertz', 107, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 109 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'CRT', 'Crate', 108, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 110 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KIT', 'KIT', 109, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 111 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KJ', 'Kilojoule', 110, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 112 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KJK', 'Kilojoule/kilogram', 111, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 113 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KJM', 'Kilojoule/Mol', 112, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 114 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KL', 'Kiloliter', 113, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 115 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KM', 'Kilometer', 114, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 116 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KM2', 'Square kilometer', 115, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 117 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KMH', 'Kilometer/hour', 116, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 118 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KMK', 'Cubic meter/Cubic meter', 117, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 119 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KML', 'Kilometers per liter', 118, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 120 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KMN', 'Kelvin/Minute', 119, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 121 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KMS', 'Kelvin/Second', 120, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 122 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KOH', 'Kiloohm', 121, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 123 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KPA', 'Kilopascal', 122, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 124 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KT', 'Kilotonne', 123, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 125 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KV', 'Kilovolt', 124, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 126 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KVA', 'Kilovoltampere', 125, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 127 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KW', 'Kilowatt', 126, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 128 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KWH', 'Kilowatt hours', 127, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 129 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'KIK', 'kg act.ingrd. / kg', 128, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 130 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'L', 'Liter', 129, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 131 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'LMI', 'Liter/Minute', 130, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 132 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'LB', 'US pound', 131, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 133 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'AU', 'Activity unit', 132, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 134 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'LHK', 'Liter per 100 km', 133, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 135 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'LK', 'Link', 134, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 136 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'LMS', 'Liter/Molsecond', 135, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 137 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'LPH', 'Liter per hour', 136, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 138 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'LT', 'Lot', 137, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 139 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'M', 'Meter', 138, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 140 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'M%', 'Percent mass', 139, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 141 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'M%O', 'Permille mass', 140, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 142 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'M/S', 'Meter/second', 141, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 143 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'M2', 'Square meter', 142, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 144 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'M-2', '1 / square meter', 143, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 145 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'M2S', 'Square meter/second', 144, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 146 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'M3', 'Cubic meter', 145, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 147 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'M3D', 'Cubic meter/day', 146, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 148 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'M3S', 'Cubic meter/second', 147, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 149 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MA', 'Milliampere', 148, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 150 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MAH', 'Milimeter Ampere Hour', 149, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 151 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MBA', 'Millibar', 150, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 152 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MBZ', 'Meterbar/second', 151, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 153 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MEJ', 'Megajoule', 152, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 154 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MG', 'Milligram', 153, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 155 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MGE', 'Milligram/Square centimeter', 154, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 156 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MGG', 'Milligram/gram', 155, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 157 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MGK', 'Milligram/kilogram', 156, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 158 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MGL', 'Milligram/liter', 157, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 159 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MGQ', 'Milligram/cubic meter', 158, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 160 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MGW', 'Megawatt', 159, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 161 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MHZ', 'Megahertz', 160, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 162 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MI', 'Mile', 161, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 163 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MI2', 'Square mile', 162, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 164 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'µM', 'Micrometer', 163, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 165 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MIN', 'Minute', 164, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 166 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MIS', 'Microsecond', 165, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 167 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MIJ', 'Millijoule', 166, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 168 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'ML', 'Milliliter', 167, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 169 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MLK', 'Milliliter/cubic meter', 168, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 170 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MLI', 'Milliliter act. ingr.', 169, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 171 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MM', 'Millimeter', 170, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 172 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MM2', 'Square millimeter', 171, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 173 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MMA', 'Millimeter/year', 172, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 174 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MMG', 'Millimol/gram', 173, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 175 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MMH', 'Millimeter/hour', 174, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 176 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MMK', 'Millimol/kilogram', 175, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 177 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MMO', 'Millimol', 176, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 178 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MM3', 'Cubic millimeter', 177, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 179 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MMS', 'Millimeter/second', 178, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 180 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MNM', 'Millinewton/meter', 179, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 181 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MOK', 'Mol/kilogram', 180, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 182 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MOL', 'Mol', 181, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 183 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MON', 'Months', 182, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 184 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MPA', 'Megapascal', 183, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 185 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MPB', 'Mass parts per billion', 184, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 186 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MPG', 'Miles per gallon (US)', 185, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 187 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MPM', 'Mass parts per million', 186, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 188 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MPS', 'Millipascal seconds', 187, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 189 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MPT', 'Mass parts per trillion', 188, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 190 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MPZ', 'Meterpascal/second', 189, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 191 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'M3H', 'Cubic meter/Hour', 190, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 192 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MSE', 'Millisecond', 191, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 193 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MS2', 'Meter/second squared', 192, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 194 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MTE', 'Millitesla', 193, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 195 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'M/H', 'Meter/Hour', 194, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 196 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MV', 'Millivolt', 195, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 197 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MVA', 'Megavoltampere', 196, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 198 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MW', 'Milliwatt', 197, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 199 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MWH', 'Megawatt hour', 198, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 200 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'N', 'Newton', 199, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 201 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'NAM', 'Nanometer', 200, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 202 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'NM', 'Newton/meter', 201, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 203 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'NOD', 'Node', 202, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 204 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'NS', 'Nanosecond', 203, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 205 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'OCM', 'Spec. Elec. Resistance', 204, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 206 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'OHM', 'Ohm', 205, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 207 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'OM', 'Spec. Elec. Resistance', 206, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 208 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'OZ', 'Ounce', 207, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 209 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'FOZ', 'Fluid Ounce US', 208, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 210 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'P', 'Points', 209, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 211 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PA', 'Pascal', 210, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 212 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PAA', 'Pair', 211, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 213 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PAD', 'Pad', 212, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 214 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PAG', 'Page', 213, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 215 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PAC', 'Pack', 214, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 216 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PAL', 'Pallet', 215, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 217 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PAS', 'Pascal second', 216, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 218 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PRC', '[Group] proportion', 217, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 219 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PIL', 'Pail', 218, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 220 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PMI', '1/minute', 219, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 221 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PMR', 'Permeation Rate SI', 220, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 222 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PPB', 'Parts per billion', 221, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 223 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PPM', 'Parts per million', 222, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 224 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PPT', 'Parts per trillion', 223, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 225 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PRM', 'Permeation Rate', 224, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 226 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PRS', 'Number of Persons', 225, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 227 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PS', 'Picosecond', 226, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 228 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PSI', 'Pound Square inch', 227, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 229 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PT', '"Pint', 228, 0, 0,  GETUTCDATE()
);

/* INSERT QUERY NO: 230 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'QT', '"Quart', 229, 0, 0,  GETUTCDATE()
);

/* INSERT QUERY NO: 231 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'RHO', 'Gram/cubic centimeter', 230, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 232 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'RLL', 'Roll', 231, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 233 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'RM', 'Ream', 232, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 234 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'ROL', 'Role', 233, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 235 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'S', 'Second', 234, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 236 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'SA', 'Pack', 235, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 237 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'SAC', 'Sack', 236, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 238 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'SCH', 'Sachet', 237, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 239 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'SET', 'Set', 238, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 240 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'SHT', 'Sheets', 239, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 241 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'SPL', 'Spool', 240, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 242 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'PC', 'Piece', 241, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 243 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'HR', 'Hours', 242, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 244 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'T', '"Ton',243, 0,  0, GETUTCDATE()
);

/* INSERT QUERY NO: 245 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'DAY', 'Days', 244, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 246 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'TC3', '1/cubic centimeter', 245, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 247 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'TES', 'Tesla', 246, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 248 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'TS', 'Thousands', 247, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 249 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'TM3', '1/cubic meter', 248, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 250 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'TO', 'Tonne', 249, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 251 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'TON', 'US ton', 250, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 252 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', '001', '', 251, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 253 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'TUB', 'Tube', 252, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 254 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'µGL', 'Microgram/liter', 253, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 255 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'UN', 'Unit', 254, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 256 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'USR', 'User', 255, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 257 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'V', 'Volt', 256, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 258 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'V%', 'Percent volume', 257, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 259 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'V%O', 'Permille volume', 258, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 260 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MSC', 'Microsiemens per centimeter', 259, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 261 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'MPL', 'Millimol per liter', 260, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 262 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'VAL', 'Value-only material', 261, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 263 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'VPB', 'Volume parts per billion', 262, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 264 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'VPM', 'Volume parts per million', 263, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 265 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'VPT', 'Volume parts per trillion', 264, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 266 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'W', 'Watt', 265, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 267 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'WK', 'Weeks', 266, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 268 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'WMK', 'Heat Conductivity', 267, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 269 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'WKY', 'Evaporation Rate', 268, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 270 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'YD', 'Yards', 269, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 271 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'YD2', 'Square Yard', 270, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 272 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'YD3', 'Cubic yard', 271, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 273 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'ZPU', 'Packing Unit', 272, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 274 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'ZUA', 'Unassigned', 273, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 275 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'bbl', 'British Thermal Unit/US Barrel', 274, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 276 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'bft', 'British Thermal Unit/Cubic Ft', 275, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 277 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'bgl', 'British Thermal Unit/US Gallon', 276, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 278 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'btl', 'British Thermal Unit/US Pound', 277, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 279 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'gj3', 'Gigajoule/1000 Cubic Meters', 278, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 280 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'gjm', 'Gigajoule/Cubic Meter', 279, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 281 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'gjt', 'Gigajoule/US Tonne', 280, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 282 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'jm3', 'Joule/Cubic Meter', 281, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 283 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'kgb', 'Kilogram/US Barrel', 282, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 284 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'kgj', 'Kilogram/Joule', 283, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 285 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'kgm', 'Kilogram/Million BTU', 284, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 286 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'kgs', 'Kilogram/Standard Cubic Foot', 285, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 287 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'kgt', 'Kilogram/US Tonne', 286, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 288 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'kml', 'Kilogram/Kilogram Mole', 287, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 289 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'lbb', 'US Pound/British Thermal Unit', 288, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 290 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'lbg', 'US Pound/US Gallon', 289, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 291 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'lbl', 'US Pound/US Pound Mole', 290, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 292 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'lbm', 'US Pound/Million BTU', 291, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 293 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'lbs', 'US Pound/Standard Cubic Foot', 292, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 294 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'lbt', 'US Pound/US Tonne', 293, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 295 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'mbb', 'Million BTU/US Barrel', 294, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 296 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'mbt', 'Million BTU/US Tonne', 295, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 297 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'tbl', 'Tonne/US Barrel', 296, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 298 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'tbt', 'Tonne/British Thermal Unit', 297, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 299 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'tgl', 'US Tonne/US Gallon', 298, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 300 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'tjl', 'Tonne/Joule', 299, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 301 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'tm3', 'Tonne/1000 Cubic Meters', 300, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 302 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'tt', 'Tonne/Tonne', 301, 0, 0, GETUTCDATE()
);

/* INSERT QUERY NO: 303 */
INSERT INTO MasterParameter([Group], Value, [Name], Sort, IsDeleted, CreateBy, CreateDate)
VALUES
(
'UOMType', 'ttj', 'Tonne/Terajoule', 302, 0, 0, GETUTCDATE()
);
GO

ALTER PROCEDURE [dbo].[SP_CiplItemGetById]   
(  
    @id BIGINT  
)  
AS  
BEGIN  
  SELECT distinct CI.Id  
    , CI.IdCipl  
    , CI.IdReference  
    , (SELECT CASE  
        WHEN CI.ReferenceNo = '-' THEN CI.CaseNumber   
        ELSE CI.ReferenceNo  
        END) AS ReferenceNo  
    , CI.IdCustomer  
    , CI.Name  
    ,(SELECT [Name] FROM MasterParameter WHERE [Group] = 'UOMType' AND [Value]= CI.Uom) AS UnitUom  
    , CI.PartNumber  
    , CI.Sn  
    , CI.JCode  
    , CI.Ccr  
    , CI.CaseNumber  
    , CI.Type  
    , CI.IdNo  
    , CI.YearMade  
    , CI.Quantity  
    , CI.UnitPrice  
    , CI.ExtendedValue  
    , CI.Length  
    , CI.Width  
    , CI.Height  
    , CI.Volume  
    , CI.GrossWeight  
    , CI.NetWeight  
    , CI.Currency  
    , CI.CoO  
    , CI.IdParent  
    , CI.WONumber  
    , CI.SIBNumber  
    , CI.CreateBy  
    , CI.CreateDate  
    , CI.UpdateBy  
    , CI.UpdateDate  
    , CI.IsDelete  
    , CI.Claim  
    , CI.ASNNumber  
  FROM dbo.CiplItem CI  
  WHERE CI.IdCipl = @id  
  AND CI.IsDelete = 0  
  ORDER BY IdReference, Id  
END  
GO  
  
------------------------------------------------------------ Changes By Developer END ------------------------------------------------------

INSERT [dbo].[MasterParameter] ( [Group], [Value], [Name], [Description], [Sort], [IsDeleted], [CreateBy], [CreateDate], [UpdateBy], [UpdateDate]) VALUES ( N'ShipDelivery', N'Bill To', N'Bill To', NULL, N'4', 0, N'0', CAST(N'2022-01-04T09:43:00' AS SmallDateTime), N'0', CAST(N'2022-01-04T09:43:00' AS SmallDateTime))
GO

ALTER PROCEDURE [dbo].[sp_update_request_cl] -- exec sp_update_request_cl 1, 'CKB1', 'Submit', 'Testing Notes'
(
	@IdCl bigint,
	@Username nvarchar(100),
	@NewStatus nvarchar(100),
	@Notes nvarchar(100) = ''	
)
AS
BEGIN
	DECLARE @NewStepId bigint;
	DECLARE @IdFlow bigint;
	DECLARE @FlowName nvarchar(100);
	DECLARE @NextStepName nvarchar(100);
	DECLARE @Now datetime;
	DECLARE @GroupId nvarchar(100);
	DECLARE @UserType nvarchar(100);
	DECLARE @NextStepIdSystem bigint;
	DECLARE @LoadingPort nvarchar(100);
	DECLARE @DestinationPort nvarchar(100);
	DECLARE @CurrentStepId bigint;
	DECLARE @CurrentStatus nvarchar(100);
		
	SET @Now = GETDATE();
	select @UserType = [Group] From dbo.fn_get_employee_internal_ckb() WHERE AD_User = @Username

	IF @UserType <> 'internal' AND @UserType = 'CKB'
	BEGIN
		SET @GroupId = 'CKB';
	END
	ELSE 
	BEGIN
		SELECT @GroupId = hce.Organization_Name 
		FROM employee hce 
		WHERE hce.AD_User = @Username;
	END

	--select @IdFlow = IdFlow, @FlowName = upper(FlowName), @NewStepId = IdNextStep, @NextStepName = NextStepName from fn_get_cl_request_list(@Username, @GroupId) t0 where t0.IdCl = @IdCl;
	--select * from dbo.fn_get_cl_request_list_all() where IdCl = 3;

	Select @CurrentStepId = IdStep, @CurrentStatus = [Status] From [dbo].[RequestCl] WHERE IdCl = @IdCl
    
    IF @NewStatus = 'Approve'
    BEGIN
        SELECT @LoadingPort = PortOfLoading , @DestinationPort = PortOfDestination FROM Cargo where Id = @IdCl 
        Update Cipl SET LoadingPort = @LoadingPort ,DestinationPort = @DestinationPort Where id in (Select IdCipl From CargoCipl where IdCargo = @IdCl)
    END


	IF @CurrentStepId = 30069
    BEGIN
        IF @NewStatus = 'Approve'
        BEGIN
            SET @NewStepId = 30070
            SET @NextStepName = 'Waiting NPE Document'
            SET @FlowName = 'CL'
        END
        ELSE IF @NewStatus = 'Revise'
        BEGIN
            SET @NewStepId = 30070
            SET @NextStepName = 'Need revision review by imex'
            SET @FlowName = 'CL'
            SET @NewStatus = 'Revise'
        END		
        ELSE IF @NewStatus = 'Reject'
        BEGIN
            SET @NewStepId = 30070
            SET @NextStepName = 'Reject by imex'
            SET @FlowName = 'CL'
            SET @NewStatus = 'Reject'
        END		

        UPDATE [dbo].[RequestCl]
        SET [IdStep] = @NewStepId
            ,[Status] = @NewStatus
            --,[Pic] = @Username
            ,[UpdateBy] = @Username
            ,[UpdateDate] = GETDATE()
        WHERE IdCl = @IdCl
    END
	ELSE IF @CurrentStepId = 30071
    BEGIN
        IF @NewStatus = 'Approve'
        BEGIN
            SET @NewStepId = 10020
            SET @NextStepName = 'Waiting for BL or AWB'
            SET @FlowName = 'CL'
        END
        ELSE IF @NewStatus = 'Revise'
        BEGIN
            SET @NewStepId = 30072
            SET @NextStepName = 'Need revision review by imex'
            SET @FlowName = 'CL'
            SET @NewStatus = 'Revise'
        END
        ELSE IF @NewStatus = 'Reject'
        BEGIN
            SET @NewStepId = 30072
            SET @NextStepName = 'Need revision review by imex'
            SET @FlowName = 'CL'
            SET @NewStatus = 'Reject'
        END

        UPDATE [dbo].[RequestCl]
        SET [IdStep] = @NewStepId
            ,[Status] = @NewStatus
            --,[Pic] = @Username
            ,[UpdateBy] = @Username
            ,[UpdateDate] = GETDATE()
        WHERE IdCl = @IdCl
    END
	ELSE
    BEGIN
        select @IdFlow = IdFlow, @FlowName = upper(FlowName), @NewStepId = IdNextStep, @NextStepName = NextStepName from fn_get_cl_request_list_all() t0 where t0.IdCl = @IdCl;
        --PRINT 'NewStepId ' + CAST(@NewStepId AS VARCHAR(10));
        --		PRINT 'NewStatus ' + CAST(@NewStatus AS VARCHAR(10));
        --		PRINT 'CurrentStepId ' + CAST(@CurrentStepId AS VARCHAR(10));
        --		PRINT 'NextStepName ' + CAST(@NextStepName AS VARCHAR(10));
                IF @CurrentStepId = 12 
                BEGIN
                IF @NewStepId = 10017 AND @NewStatus = 'Submit'
                BEGIN
                declare @exportType nvarchar(10)=''
                SET @exportType = (select top 1 exporttype from dbo.ShippingInstruction where IdCL =@IdCl)
                IF (@exportType ='PJT')
                BEGIN
                SET @NewStepId =10020
                SET @NextStepName = 'Waiting for BL or AWB'
                SET @FlowName = 'CL'
                SET @NewStatus = 'Approve'
                --PRINT 'exporttype ' + CAST(@exporttype AS VARCHAR(10));
                END
                --PRINT 'exporttype ' + CAST(@exporttype AS VARCHAR(10));
                END 
                END 
        UPDATE [dbo].[RequestCl]
            SET [IdStep] = @NewStepId
                ,[Status] = @NewStatus
                ,[Pic] = @Username
                ,[UpdateBy] = @Username
                ,[UpdateDate] = GETDATE()
        WHERE IdCl = @IdCl
    END
	
	-- Hasni Procedure Cancel PEB
	IF  @NewStatus = 'Request Cancel'
	BEGIN
		SET @NewStepId = 30041

		UPDATE [dbo].[RequestCl]
		SET [IdStep] = @NewStepId
	     ,[Status] = @NewStatus
	     ,[Pic] = @Username
		 ,[UpdateBy] = @Username
		 ,[UpdateDate] = GETDATE()
	WHERE IdCl = @IdCl
	END

	IF  @NewStatus = 'Draft NPE'
	BEGIN
		SET @NewStepId = 30069
		SET @NewStatus = 'Submit'
		SET @NextStepName = 'Waiting approve draft NPE'
		SET @FlowName = 'CL'

		UPDATE [dbo].[RequestCl]
		SET [IdStep] = @NewStepId
	     ,[Status] = @NewStatus
	     ,[Pic] = @Username
		 ,[UpdateBy] = @Username
		 ,[UpdateDate] = GETDATE()
		WHERE IdCl = @IdCl
	END

	IF  @NewStatus = 'Create NPE'
	BEGIN
		SET @NewStepId = 30071
		SET @NewStatus = 'Submit'
		SET @NextStepName = 'Waiting approval NPE'
		SET @FlowName = 'CL'

		UPDATE [dbo].[RequestCl]
		SET [IdStep] = @NewStepId
	     ,[Status] = @NewStatus
	     ,[Pic] = @Username
		 ,[UpdateBy] = @Username
		 ,[UpdateDate] = GETDATE()
		WHERE IdCl = @IdCl
	END

	IF @NewStepId = 30042 AND @NewStatus = 'Approve'
	BEGIN
		UPDATE dbo.NpePeb SET IsDelete = 1 WHERE IdCl = @IdCl;
	END 

	--======================================================
	--- Kondisi jika cl akan melanjutkan proses ke system
	--======================================================
	IF @NewStepId = 11 AND @NewStatus = 'Submit'
	BEGIN
		select @NextStepIdSystem = x.IdNextStep from dbo.fn_get_cl_request_list_all() x where x.IdCl = @IdCl;

		UPDATE [dbo].[RequestCl]
		SET [IdStep] = @NextStepIdSystem
	     ,[Status] = @NewStatus
	     ,[Pic] = @Username
		 ,[UpdateBy] = @Username
		 ,[UpdateDate] = GETDATE()
		WHERE IdCl = @IdCl

		exec sp_set_ss_number @IdCl = @IdCl
		exec sp_update_cipl_to_revise @IdCl
	END

	IF @NewStepId = 20033 AND @NewStatus = 'Approve'
	BEGIN
		select @NextStepIdSystem = x.IdNextStep from dbo.fn_get_cl_request_list_all() x where x.IdCl = @IdCl;

		UPDATE [dbo].[RequestCl]
		SET [IdStep] = @NewStepId
	     ,[Status] = @NewStatus
	     ,[Pic] = @Username
		 ,[UpdateBy] = @Username
		 ,[UpdateDate] = GETDATE()
		WHERE IdCl = @IdCl

		exec sp_update_cipl_to_revise @IdCl
	END
	--======================================================

	exec [dbo].[sp_insert_cl_history]@id=@IdCl, @Flow=@FlowName, @Step=@NextStepName, @Status=@NewStatus, @Notes=@Notes, @CreateBy=@Username, @CreateDate=@Now;

	--IF((select Status from RequestCl where IdCl = @IdCl) <> 'DRAFT')
	--BEGIN
	--	--EXEC [sp_send_email_notification] @IdCl, 'Cargo'
	--	EXEC [sp_proccess_email] @IdCl, 'CL'
	--END
END
GO

-- =============================================
-- Author:                            Ali Mutasal
-- ALTER date: 09 Des 2019
-- Description:    Function untuk melakukan proses email
-- =============================================
ALTER FUNCTION [dbo].[fn_proccess_email_template]
(
                -- Add the parameters for the function here
                @requestType nvarchar(100) = 'CIPL',
                @requestId nvarchar(100) = '',
                @template nvarchar(max) = '',
				@typeDoc nvarchar(max) = '',
				@lastPIC nvarchar(max) = ''
)
RETURNS nvarchar(max)
AS
BEGIN
	------------------------------------------------------------------
    -- 1. Melakukan Declare semua variable yang dibutuhkan
    ------------------------------------------------------------------
    BEGIN  
        -- ini hanya sample silahkan comment jika akan digunakan
        --SET @template = 'Ini adalah email dari [requestor_name], dan ini adalah email untuk [last_pic_name]. selanjutnya akan dikirim ke [next_pic_name]';
        DECLARE @variable_table TABLE (
            key_data VARCHAR(MAX) NULL,
            val_data VARCHAR(MAX) NULL
        );

        DECLARE 
            @key NVARCHAR(MAX), 
            @flow NVARCHAR(MAX), 
            @val NVARCHAR(MAX),
            @requestor_name NVARCHAR(MAX),
            @requestor_id NVARCHAR(MAX),
            @requestor_username NVARCHAR(MAX),
            @last_pic_name NVARCHAR(MAX),
            @last_pic_id NVARCHAR(MAX),
            @last_pic_username NVARCHAR(MAX),
            @next_pic_name NVARCHAR(MAX),
            @next_pic_id NVARCHAR(MAX),
            @next_pic_username NVARCHAR(MAX),
            @si_number NVARCHAR(MAX) = '',
            @ss_number NVARCHAR(MAX) = '',
            @req_number NVARCHAR(MAX) = '',
            @CiplNo NVARCHAR(MAX) = '',
            @CIPLBranchName NVARCHAR(MAX) = '',
            @PICPickupPoints NVARCHAR(MAX) = '',
            @PickupPointsArea NVARCHAR(MAX) = '',
            @npe_number NVARCHAR(MAX) = '',
            @peb_number NVARCHAR(MAX) = '',
            @bl_awb_number NVARCHAR(MAX) = '',
            @req_date NVARCHAR(MAX) = '',
            @superior_req_name nvarchar(max) = '',
            @superior_req_id nvarchar(max) = '',
            @employee_name nvarchar(max) = ''
                        
        IF (@lastPIC <> '')
        BEGIN
            SELECT @employee_name = employee_name 
            FROM dbo.fn_get_employee_internal_ckb() 
            WHERE AD_User = @lastPIC;
        END
    END
                
    ------------------------------------------------------------------
    -- 2. Query untuk mengisi data ke variable variable yang dibutuhkan
    ------------------------------------------------------------------
    BEGIN
        -- Mengambil data dari fn request per flow
        BEGIN
            IF (@requestType = 'CIPL')
            BEGIN
                SET @flow = 'CIPL';
                SELECT 
                    @requestor_id = t1.Employee_ID,
                    @requestor_name = t1.Employee_Name,
                    @superior_req_name = t1.Superior_Name,
                    @superior_req_id = t1.Superior_ID,
                    @requestor_username = t1.AD_User,
                    @last_pic_id = t2.Employee_ID,
                    @last_pic_name = t2.Employee_Name,
                    @last_pic_username = t2.AD_User,
                    @next_pic_id = t3.Employee_ID,
                    @CiplNo = t4.CiplNo,
                    @CIPLBranchName = t4.Branch,
                    @PICPickupPoints = t4.PickUpPic,
                    @PickupPointsArea = t4.PickUpArea,
                    @next_pic_name = 
                        CASE
                            WHEN t0.Status = 'Revise' OR t0.Status = 'Reject' OR (t0.Status = 'Approve' AND t0.NextAssignType IS NULL) THEN t5.Employee_Name
                            WHEN t0.NextAssignType = 'Group' THEN t0.NextAssignTo
                            ELSE t3.Employee_Name
                        END,
                    @next_pic_username = t3.AD_User,
                    @req_number = IIF(@typeDoc = 'CKB', ISNULL(t4.EdoNo,''), t4.CiplNo),
                    @req_date = RIGHT('0' + DATENAME(DAY, t0.CreateDate), 2) + ' ' + DATENAME(MONTH, t0.CreateDate)+ ' ' + DATENAME(YEAR, t0.CreateDate)
                FROM 
                    dbo.fn_get_cipl_request_list_all() t0 
                    INNER JOIN dbo.Cipl t4 on t4.id = t0.IdCipl
                    LEFT JOIN dbo.fn_get_employee_internal_ckb() t1 on t1.AD_User = t0.CreateBy
                    LEFT JOIN dbo.fn_get_employee_internal_ckb() t2 on t2.AD_User = t0.Pic
                    LEFT JOIN dbo.fn_get_employee_internal_ckb() t3 on t3.AD_User = t0.NextAssignTo
                    LEFT JOIN dbo.fn_get_employee_internal_ckb() t5 on t5.AD_User = t0.UpdateBy
                WHERE 
                    t0.IdCipl = @requestId;
            END

            --IF (@requestType IN ('CL', 'BLAWB', 'PEB_NPE'))
            IF (@requestType = 'CL') OR (@requestType = 'BLAWB') OR (@requestType = 'PEB_NPE') 
            BEGIN
                SET @flow = @requestType;
                SELECT 
                    @requestor_id = t5.Employee_ID,
                    @requestor_name = t5.Employee_Name,
                    @superior_req_name = t5.Superior_Name,
                    @superior_req_id = t5.Superior_ID,
                    @requestor_username = t5.AD_User,
                    @last_pic_id = t6.Employee_ID,
                    @last_pic_name = t6.Employee_Name,
                    @last_pic_username = t6.AD_User,
                    @next_pic_id = t7.Employee_ID,
                    @next_pic_name = t7.Employee_Name,
                    @next_pic_username = t7.AD_User,
                    @req_number = t1.ClNo,
                    @ss_number = t1.SsNo,
                    @si_number = t2.SlNo,
                    @npe_number = t3.NpeNumber,
                    @peb_number = t3.PebNumber,
                    @bl_awb_number = t4.Number,
                    @req_date = RIGHT('0' + DATENAME(DAY, t0.CreateDate), 2) + ' ' + DATENAME(MONTH, t0.CreateDate)+ ' ' + DATENAME(YEAR, t0.CreateDate)
                FROM 
                    dbo.fn_get_cl_request_list_all() t0 
                    INNER JOIN dbo.Cargo t1 on t1.id = t0.IdCl
                    INNER JOIN dbo.ShippingInstruction t2 on t2.IdCL = t0.IdCl
                    LEFT JOIN dbo.NpePeb t3 on t3.IdCL = t0.IdCl
                    LEFT JOIN dbo.BlAwb t4 on t4.IdCL = t0.IdCl
                    LEFT JOIN dbo.fn_get_employee_internal_ckb() t5 on t5.AD_User = t0.CreateBy
                    LEFT JOIN dbo.fn_get_employee_internal_ckb() t6 on t6.AD_User = t0.Pic
                    LEFT JOIN dbo.fn_get_employee_internal_ckb() t7 on t7.AD_User = t0.NextAssignTo
                WHERE 
                    t0.IdCl = @requestId;                                                                     
            END

            IF (@requestType = 'RG')
            BEGIN
                SET @flow = 'Receive Goods';
                SELECT 
                    @requestor_id = t1.Employee_ID,
                    @requestor_name = t1.Employee_Name,
                    @superior_req_name = t1.Superior_Name,
                    @superior_req_id = t1.Superior_ID,
                    @requestor_username = t1.AD_User,
                    @last_pic_id = t2.Employee_ID,
                    @last_pic_name = t2.Employee_Name,
                    @last_pic_username = t2.AD_User,
                    @next_pic_id = t3.Employee_ID,
                    @next_pic_name = t3.Employee_Name,
                    @next_pic_username = t3.AD_User,
                    @req_number = t4.GrNo,
                    @req_date = RIGHT('0' + DATENAME(DAY, t0.CreateDate), 2) + ' ' + DATENAME(MONTH, t0.CreateDate)+ ' ' + DATENAME(YEAR, t0.CreateDate)
                FROM 
                    dbo.fn_get_gr_request_list_all() t0 
                    INNER JOIN dbo.GoodsReceive t4 on t4.id = t0.IdGr
                    LEFT JOIN dbo.fn_get_employee_internal_ckb() t1 on t1.AD_User = t0.CreateBy
                    LEFT JOIN dbo.fn_get_employee_internal_ckb() t2 on t2.AD_User = t0.Pic
                    LEFT JOIN dbo.fn_get_employee_internal_ckb() t3 on t3.AD_User = t0.NextAssignTo
                WHERE 
                    t0.IdGr = @requestId;
            END

            IF (@requestType = 'DELEGATION')
            BEGIN
                SET @flow = 'Delegation';
                --SELECT * FROM dbo.fn_get_gr_request_list_all() t0 where t0.Id = @requestId;
            END

            INSERT 
            INTO 
                @variable_table 
            VALUES 
                ('@RequestorName', ISNULL(@requestor_name, '-'))
                ,('@RequestNo', ISNULL(@req_number, '-'))
                ,('@CreatedDate', ISNULL(@req_date, '-'))
                ,('@CiplNo', ISNULL(@CiplNo, '-'))
                ,('@CIPLBranchName', ISNULL(@CIPLBranchName, '-'))
                ,('@PICPickupPoints', ISNULL(@PICPickupPoints, '-'))
                ,('@PickupPointsArea', ISNULL(@PickupPointsArea, '-'))
                ,('@SuperiorEmpID', ISNULL(@superior_req_id, '-'))
                ,('@SuperiorName', ISNULL(@superior_req_name, '-'))
                ,('@MobileLink', 'http://pis.trakindo.co.id')
                ,('@DesktopLink', 'http://pis.trakindo.co.id')
                ,('@ApproverPosition', ISNULL(@flow, '-'))
                ,('@ApproverName', ISNULL(@next_pic_name, ISNULL(@employee_name,'-')))
                ,('@RequestorEmpID', ISNULL(@requestor_id, '-'))
                ,('@flow', ISNULL(@flow, '-'))
                ,('@requestor_name', ISNULL(@requestor_name, '-'))
                ,('@requestor_id', ISNULL(@requestor_id, '-'))
                ,('@last_pic_name', ISNULL(@last_pic_name, '-'))
                ,('@last_pic_id', ISNULL(@last_pic_id, '-'))
                ,('@next_pic_name', ISNULL(@next_pic_name, '-'))
                ,('@next_pic_id', ISNULL(@next_pic_id, '-'))
                ,('@si_number', ISNULL(@si_number, '-'))
                ,('@ss_number', ISNULL(@ss_number, '-'))
                ,('@req_number', ISNULL(@req_number, '-'))
                ,('@npe_number', ISNULL(@npe_number, '-'))
                ,('@peb_number', ISNULL(@peb_number, '-'))
                ,('@bl_awb_number', ISNULL(@bl_awb_number, '-'))
                ,('@req_date', ISNULL(@req_date, '-'))
                ,('@superior_req_name', ISNULL(@superior_req_name, '-'))
                ,('@superior_req_id', ISNULL(@superior_req_id, '-'))
            END
        END
                
    ------------------------------------------------------------------
    -- 3. Melakukan Replace terhadap data yang di petakan di template dgn menggunakan perulangan
    ------------------------------------------------------------------
    BEGIN
        DECLARE cursor_variable CURSOR
        FOR 
        SELECT 
            key_data, 
            val_data 
        FROM 
            @variable_table;
                                                                        
        OPEN cursor_variable; 
        FETCH NEXT FROM cursor_variable INTO @key, @val; 
        WHILE @@FETCH_STATUS = 0
            BEGIN
                -- Melakukan Replace terhadap variable di template dengan value dari hasil pencarian data diata.
                IF ISNULL(@key, '') <> ''
                BEGIN
                    SET @template = REPLACE(@template, @key, @val);
                END

                FETCH NEXT FROM cursor_variable INTO 
                    @key, 
                    @val;
            END;
        
        CLOSE cursor_variable; 
        DEALLOCATE cursor_variable;
    END
                
    ------------------------------------------------------------------
    -- 4. Menampilkan hasil dari proses replace
    ------------------------------------------------------------------
    BEGIN
        RETURN @template;
    END
END
GO

USE EMCS
GO

INSERT INTO [Type]([Name]) VALUES ('FTZ');
INSERT INTO [Type]([Name]) VALUES ('Ordinary');
DELETE FROM [Type] WHERE ID = 2;

--=====================================================================================
--Request for change start
--=====================================================================================

USE [EMCS]
GO
ALTER TABLE [dbo].[RequestForChange] DROP CONSTRAINT [DF_RequestForChange_CreateDate]
GO
ALTER TABLE [dbo].[RequestForChange] DROP CONSTRAINT [DF_RequestForChange_Status]
GO
/****** Object:  Table [dbo].[RFCItem]    Script Date: 09-04-2022 16:42:49 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RFCItem]') AND type in (N'U'))
DROP TABLE [dbo].[RFCItem]
GO
/****** Object:  Table [dbo].[RequestForChange]    Script Date: 09-04-2022 16:42:49 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RequestForChange]') AND type in (N'U'))
DROP TABLE [dbo].[RequestForChange]
GO
/****** Object:  Table [dbo].[RequestForChange]    Script Date: 09-04-2022 16:42:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RequestForChange](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[RFCNumber] [nvarchar](150) NULL,
	[FormType] [nvarchar](150) NULL,
	[FormId] [int] NULL,
	[FormNo] [nvarchar](150) NULL,
	[Status] [int] NOT NULL,
	[Reason] [nvarchar](max) NULL,
	[CreateBy] [nvarchar](150) NULL,
	[CreateDate] [datetime] NOT NULL,
	[UpdateBy] [nvarchar](150) NULL,
	[Approver] [nvarchar](150) NULL,
	[UpdateDate] [datetime] NULL,
	[ReasonIfRejected] [nvarchar](max) NULL,
    CONSTRAINT [PK_RequestForChange] PRIMARY KEY CLUSTERED 
    (
        [ID] ASC
    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RFCItem]    Script Date: 09-04-2022 16:42:49 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RFCItem](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[RFCID] [int] NULL,
	[TableName] [nvarchar](100) NULL,
	[LableName] [nvarchar](100) NULL,
	[FieldName] [nvarchar](100) NULL,
	[BeforeValue] [nvarchar](100) NULL,
	[AfterValue] [nvarchar](100) NULL,
    CONSTRAINT [PK_RFCItem] PRIMARY KEY CLUSTERED 
    (
        [ID] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[RequestForChange] ADD  CONSTRAINT [DF_RequestForChange_Status]  DEFAULT ((0)) FOR [Status]
GO

ALTER TABLE [dbo].[RequestForChange] ADD  CONSTRAINT [DF_RequestForChange_CreateDate]  DEFAULT (getutcdate()) FOR [CreateDate]
GO

CREATE PROC sp_Process_Email_RFC  
    @RFCId INT,  
    @Doctype NVARCHAR(200)  
AS  
BEGIN  
    DECLARE @Email NVARCHAR(200)  
    DECLARE @Subject NVARCHAR(MAX)  
    DECLARE @Template NVARCHAR(MAX)  
    
    DECLARE @ApproverUser NVARCHAR(MAX)    
    DECLARE @RequestorUser NVARCHAR(MAX)  
    
    SELECT @RequestorUser = RFC.CreateBy   
        ,@ApproverUser = RFC.UpdateBy    
    FROM RequestForChange RFC       
    WHERE ID = @RFCId  
  
    IF(@Doctype = 'Approval')  
    BEGIN  
        SELECT @Subject = [Subject] , @Template = [Message] FROM EmailTemplate WHERE [Module] = 'RFC' AND [Status] = 'Approval' AND RecipientType = 'Requestor'  
        
        SET @Subject = dbo.[fn_proccess_email_template_RFC](@RFCId, @Subject)  
        SET @Template = dbo.[fn_proccess_email_template_RFC](@RFCId, @Template)  
        
        exec sp_send_email_for_single @Subject, @RequestorUser, @Template  
        
        
        SELECT @Subject = [Subject] , @Template = [Message] FROM EmailTemplate WHERE [Module] = 'RFC' AND [Status] = 'Approval' AND RecipientType = 'Approver'  
        
        SET @Subject = dbo.[fn_proccess_email_template_RFC](@RFCId, @Subject)  
        SET @Template = dbo.[fn_proccess_email_template_RFC](@RFCId, @Template)  
        
        exec sp_send_email_for_single @Subject, @ApproverUser, @Template      
    END  
    ELSE IF(@Doctype = 'Approved')  
    BEGIN  
        SELECT @Subject = [Subject] , @Template = [Message] FROM EmailTemplate WHERE [Module] = 'RFC' AND [Status] = 'Approved' AND RecipientType = 'Requestor'  
        
        SET @Subject = dbo.[fn_proccess_email_template_RFC](@RFCId, @Subject)  
        SET @Template = dbo.[fn_proccess_email_template_RFC](@RFCId, @Template)  
        
        exec sp_send_email_for_single @Subject, @RequestorUser, @Template  
        
        
        SELECT @Subject = [Subject] , @Template = [Message] FROM EmailTemplate WHERE [Module] = 'RFC' AND [Status] = 'Approved' AND RecipientType = 'Approver'  
        
        SET @Subject = dbo.[fn_proccess_email_template_RFC](@RFCId, @Subject)  
        SET @Template = dbo.[fn_proccess_email_template_RFC](@RFCId, @Template)  
        
        exec sp_send_email_for_single @Subject, @ApproverUser, @Template  
    END  
    ELSE  
    BEGIN  
        SELECT @Subject = [Subject] , @Template = [Message] FROM EmailTemplate WHERE [Module] = 'RFC' AND [Status] = 'Reject' AND RecipientType = 'Requestor'  
        
        SET @Subject = dbo.[fn_proccess_email_template_RFC](@RFCId, @Subject)  
        SET @Template = dbo.[fn_proccess_email_template_RFC](@RFCId, @Template)  
        
        exec sp_send_email_for_single @Subject, @RequestorUser, @Template  
        
        
        SELECT @Subject = [Subject] , @Template = [Message] FROM EmailTemplate WHERE [Module] = 'RFC' AND [Status] = 'Reject' AND RecipientType = 'Approver'  
        
        SET @Subject = dbo.[fn_proccess_email_template_RFC](@RFCId, @Subject)  
        SET @Template = dbo.[fn_proccess_email_template_RFC](@RFCId, @Template)  
        
        exec sp_send_email_for_single @Subject, @ApproverUser, @Template  
    END  
  
END
GO

-- here
CREATE FUNCTION [fn_proccess_email_template_RFC]    
(        
    @RFCId INT = '',        
    @Template nvarchar(max) = ''       
)        
RETURNS NVARCHAR(MAX)    
AS    
BEGIN     
    DECLARE @RequestNo NVARCHAR(MAX)    
    DECLARE @CreatedDate DATETIME    
    DECLARE @DocumentType NVARCHAR(MAX)    
    DECLARE @DocumentNo NVARCHAR(MAX)    
    DECLARE @RequestReason NVARCHAR(MAX)    
    DECLARE @SuperiorName NVARCHAR(MAX)    
    DECLARE @SuperiorEmpID NVARCHAR(MAX)    
    DECLARE @MobileLink NVARCHAR(MAX)    
    DECLARE @DesktopLink NVARCHAR(MAX)    
    DECLARE @RequestorName NVARCHAR(MAX)    
    DECLARE @RequestorEmpID NVARCHAR(MAX)    
    DECLARE @ApproverName NVARCHAR(MAX)    
    DECLARE @ReasonIfRejected NVARCHAR(MAx)    
    DECLARE @UpdatedDate Datetime    
        
        
    SET @MobileLink = 'http://pis.trakindo.co.id'    
    SET @DesktopLink = 'http://pis.trakindo.co.id'    
        
    SELECT @RequestNo = RFC.RFCNumber    
        ,@DocumentType = RFC.FormType    
        ,@DocumentNo = RFC.FormNo    
        ,@RequestReason = RFC.Reason    
        ,@RequestorEmpID = RFC.CreateBy    
        ,@CreatedDate = RFC.CreateDate    
        ,@SuperiorEmpID = RFC.UpdateBy    
        ,@UpdatedDate = RFC.UpdateDate    
        ,@ReasonIfRejected = RFC.ReasonIfRejected    
        ,@ApproverName = t2.Employee_Name    
        ,@RequestorName = t1.Employee_Name    
        ,@SuperiorName = t2.Employee_Name    
    FROM RequestForChange RFC     
    LEFT JOIN dbo.fn_get_employee_internal_ckb() t1 on t1.AD_User = RFC.CreateBy      
    LEFT JOIN dbo.fn_get_employee_internal_ckb() t2 on t2.AD_User =RFC.UpdateBy    
    WHERE ID = @RFCId    
    
    BEGIN    
        DECLARE @variable_table TABLE (        
                key_data VARCHAR(MAX) NULL,        
                val_data VARCHAR(MAX) NULL        
            );        
        DECLARE @key NVARCHAR(MAX),         
                @flow NVARCHAR(MAX),         
                @val NVARCHAR(MAX)    
    INSERT         
    INTO         
    @variable_table         
    VALUES         
        ('@RequestNo', ISNULL(@RequestNo, '-'))        
        ,('@DocumentType', ISNULL(@DocumentType, '-'))     
        ,('@DocumentNo', ISNULL(@DocumentNo, '-'))     
        ,('@RequestReason', ISNULL(@RequestReason, '-'))     
        ,('@RequestorEmpID', ISNULL(@RequestorEmpID, '-'))     
        ,('@CreatedDate', ISNULL(CONVERT(nvarchar(10), @CreatedDate, 103), '-'))     
        ,('@SuperiorEmpID', ISNULL(@SuperiorEmpID, '-'))     
        ,('@UpdatedDate', ISNULL(CONVERT(nvarchar(10), @UpdatedDate, 103), '-'))     
        ,('@ReasonIfRejected', ISNULL(@ReasonIfRejected, '-'))     
        ,('@ApproverName', ISNULL(@ApproverName, '-'))     
        ,('@RequestorName', ISNULL(@RequestorName, '-'))     
        ,('@SuperiorName', ISNULL(@SuperiorName, '-'))     
      
        BEGIN        
            DECLARE cursor_variable CURSOR        
            FOR         
            SELECT         
                key_data,         
                val_data         
            FROM         
                @variable_table;        
                                                                                                        
            OPEN cursor_variable;         
            
            FETCH NEXT FROM cursor_variable INTO @key, @val;         
            
            WHILE @@FETCH_STATUS = 0        
            BEGIN        
                -- Melakukan Replace terhadap variable di template dengan value dari hasil pencarian data diata.        
                IF ISNULL(@key, '') <> ''        
                BEGIN        
                    SET @Template = REPLACE(@Template, @key, @val);        
                END        
                
                FETCH NEXT FROM cursor_variable INTO         
                    @key,         
                    @val;        
            END;        
                                        
            CLOSE cursor_variable;         
            DEALLOCATE cursor_variable;        
        END            
    END    
    Return @Template    
    
END
GO
  
CREATE  FUNCTION [dbo].[fnSplitStringRFC](  
    @RowData varchar(8000),  
    @SplitOn nvarchar(5)  
) RETURNS @RtnValue table (  
    Id int identity(1,1),  
    Data nvarchar(100)  
)   
AS    
BEGIN   
    Declare @Cnt int  
    Set @Cnt = 1  
  
    While (Charindex(@SplitOn,@RowData)>0)  
    Begin  
        Insert Into @RtnValue (data)
        Select   
            Data = ltrim(rtrim(Substring(@RowData,1,Charindex(@SplitOn,@RowData)-1)))  

        Set @RowData = Substring(@RowData,Charindex(@SplitOn,@RowData)+1,len(@RowData))  
        Set @Cnt = @Cnt + 1  
    End  
  
    Insert Into @RtnValue (data)  
    Select Data = ltrim(rtrim(@RowData))  
  
    Return  
END
GO

CREATE PROCEDURE [dbo].[SP_CiplChangeHistoryGetById] -- exec [dbo].[SP_CiplChangeHistoryGetById] '33433','CIPL',0,'CreateDate','asc','0','10'            
(            
    @id NVARCHAR(10),           
    @formtype NVARCHAR(100),           
    @IsTotal bit = 0,            
    @sort nvarchar(100) = 'CreateDate',            
    @order nvarchar(100) = 'DESC',            
    @offset nvarchar(100) = '0',            
    @limit nvarchar(100) = '10'            
)             
AS            
BEGIN            
    DECLARE @sql nvarchar(max);              
                 
    SET @sql = 'SELECT ';            
    SET @sort = 'RF.'+@sort;            
            
    IF (@IsTotal <> 0)            
    BEGIN            
        SET @sql += 'count(*) total'            
    END             
    ELSE            
    BEGIN            
        SET @sql += 'R.FieldName,          
        R.BeforeValue,          
        R.AfterValue,      
        RF.ID,      
        RF.FormNo,        
        RF.CreateBy,          
        RF.CreateDate,          
        RF.Reason'            
    END            
    SET @sql +=' FROM RequestForChange RF          
        INNER JOIN RFCItem R ON R.RFCID = RF.ID            
        WHERE  R.RFCID = '''+@id+ '''';            
    
    IF @isTotal = 0             
    BEGIN            
        SET @sql += ' ORDER BY '+@sort+' '+@order+' OFFSET '+@offset+' ROWS FETCH NEXT '+@limit+' ROWS ONLY';            
    END             
            
    --select @sql;            
    EXECUTE(@sql);            
    --print(@sql);            
END

GO

CREATE PROCEDURE [dbo].[sp_RequestForChangeHistory]              
(
    @IsTotal bit = 0,                
    @sort nvarchar(100) = 'CreateDate',                
    @order nvarchar(100) = 'DESC',                
    @offset nvarchar(100) = '0',                
    @limit nvarchar(100) = '10'                
)                 
AS                
BEGIN                
    DECLARE @sql nvarchar(max);         
                
    SET @sql = 'SELECT ';                
    SET @sort = 'RF.'+@sort;                
                
    IF (@IsTotal <> 0)                
    BEGIN                
        SET @sql += 'count(*) total'                
    END                 
    ELSE                
    BEGIN                
        SET @sql += '         
            RF.ID,       
            RF.FormId,     
            RF.RFCNumber,    
            RF.FormType,    
            RF.FormNo,            
            RF.CreateBy,              
            RF.CreateDate,              
            RF.Reason,  
            RF.[Status]'                
    END                
    SET @sql +=' FROM RequestForChange RF              
            ';                
    IF @isTotal = 0                 
    BEGIN                
        SET @sql += ' ORDER BY '+@sort+' '+@order+' OFFSET '+@offset+' ROWS FETCH NEXT '+@limit+' ROWS ONLY';                
    END                 
                    
    --select @sql;                
    EXECUTE(@sql);                
    --print(@sql);                
END

GO

CREATE PROC SP_ApproveChangeHistory
    @Id INT      
    ,@UpdatedBy NVARCHAR(200)     
AS        
BEGIN        
    UPDATE RequestForChange        
    SET [Status] = 1 ,  UpdateBy = @UpdatedBy       
    WHERE Id = @Id       
     
    EXEC [dbo].[sp_Process_Email_RFC] @Id,'Approved'     
END 

GO

CREATE PROC SP_RejectChangeHistory           
    @Id INT      
    ,@Reason NVARCHAR(MAX)      
    ,@UpdatedBy NVARCHAR(MAX)      
AS          
BEGIN          
    UPDATE RequestForChange          
    SET [Status] = 2 , ReasonIfRejected = @Reason ,  UpdateBy =  @UpdatedBy       
    WHERE Id = @Id   
    EXEC [dbo].[sp_Process_Email_RFC] @Id,'Reject'   
END   

GO

CREATE PROC Sp_RequestForChange_Insert      
    @FormType nvarchar(300)      
    ,@FormNo nvarchar(300)     
    ,@FormId int     
    ,@Reason nvarchar(MAX)      
    ,@CreateBy nvarchar(300)      
AS      
BEGIN
    DECLARE @RFCNumber NVARCHAR(50)       
    SELECT TOP 1 @RFCNumber = RFCNumber FROM RequestForChange ORDER BY ID DESC        
    DECLARE @PrefixCode NVARCHAR(15)      
    DECLARE @Year as NVARCHAR(20)        
    SET @PrefixCode = 'RFC'      
    SET @Year = YEAR(getdate())      

    IF @RFCNumber IS NuLL      
    BEGIN        
        DECLARE @invnumber NVARCHAR(50)      
        SET @invnumber = @PrefixCode + @Year + '000000'       
        SET  @RFCNumber =  @invnumber       
    END      
    ELSE      
    BEGIN       
        DECLARE @ID INT             
        DECLARE @Temp NVARCHAR(20)          
        DECLARE @Temp1 NVARCHAR(20)          
        DECLARE @Temp2 NVARCHAR(20)       
        DECLARE @Temp3 NVARCHAR(20)         
        DECLARE @TmpInvoiceNo TABLE (Id INT IDENTITY(1,1), Col4 VARCHAR(50))         
        
        INSERT INTO @TmpInvoiceNo(Col4) SELECT Data As QuotationNo FROM [fnSplitStringRFC](@RFCNumber,'')          

        DECLARE @No as NVARCHAR(20)          
        DECLARE @TableName NVARCHAR(200)          
        SELECT @Year = Col4 FROM @TmpInvoiceNo WHERE Id = 1          
        SELECT @No = Col4 FROM @TmpInvoiceNo WHERE Id = 2            
            
        SET @Temp =  SUBSTRING(@RFCNumber, 1, 3)      
        SET @Temp1 = SUBSTRING(@RFCNumber, 4, 4)      
        SET @Temp2 = SUBSTRING(@RFCNumber, 8, 9)      
        SET @Temp3 = SUBSTRING(@RFCNumber, 8, 9)      
        SET @Temp2 = right('00000' + cast(@Temp3 as varchar(6))+ 1, 6)      
        SET @Temp3 = right('00000' + cast(@Temp2 as varchar(6)), 6)      

        IF YEAR(getdate()) = @Temp1          
        BEGIN          
            SET @RFCNumber = @Temp +''+ @Temp1 +''+ @Temp3      
        END          
        ELSE          
        BEGIN       
            SET @RFCNumber = @Temp + CAST(YEAR(getdate()) AS NVARCHAR(4))+''+CAST('000001' AS NVARCHAR(6))                  
        END        
    END    
    
    
-------------------------------------------------------------------------------    
    DECLARE @ResultId INT      
    INSERT INTO RequestForChange (FormType, FormNo, RFCNumber, FormId, Reason, CreateBy) VALUES (@FormType,@FormNo,@RFCNumber,@FormId,@Reason,@CreateBy)      
        
    SET @ResultId = SCOPE_IDENTITY()  
    EXEC [dbo].[sp_Process_Email_RFC] @ResultId,'Approval'   
    SELECT @ResultId      
END

GO

CREATE PROC Sp_RFCItem_Insert  
    @RFCID INT  
    ,@TableName NVARCHAR(250) = NULL  
    ,@LableName NVARCHAR(250) = NULL  
    ,@FieldName NVARCHAR(350) = NULL  
    ,@BeforeValue NVARCHAR(MAX) = NULL  
    ,@AfterValue NVARCHAR(MAX) = NULL  
AS  
BEGIN  
    DECLARE @ResultId INT  
  
    INSERT INTO RFCItem (RFCID, TableName, LableName, FieldName, BeforeValue, AfterValue)   
    VALUES (@RFCID, @TableName, @LableName, @FieldName, @BeforeValue,@AfterValue)  
    
    SET @ResultId = SCOPE_IDENTITY()  
    
    SELECT @ResultId  
END

GO
--=====================================================================================
--Request for change end
--=====================================================================================

--======================================================================================
--Replace Emailtemplate Data
--=====================================================================================

USE [EMCS]
GO
TRUNCATE TABLE [dbo].[EmailTemplate]
GO
SET IDENTITY_INSERT [dbo].[EmailTemplate] ON 
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (1, N'Cipl', N'Submit', N'Requestor', N'CIPL @RequestNo SUBMITTED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @RequestorName,</span><br /><br />  <span>Your Export CIPL Form has been submitted to @ApproverPosition for review & approval in 24 hours after received this request.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CIPL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CIPL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Superior Name</td>
         <td>: @SuperiorName</td>
      </tr>
      <tr>
         <td>Superior ID</td>
         <td>: @SuperiorEmpID</td>
      </tr>
 	<tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To check the progress, please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (2, N'Cipl', N'Approval', N'Approver', N'CIPL @RequestNo WAITING APPROVAL', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @ApproverName,</span><br /><br />  <span>You have one Export CIPL form Approval Request for your review & approval in 24 hours after received this request.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CIPL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CIPL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Requestor Name</td>
         <td>: @RequestorName</td>
      </tr>
      <tr>
         <td>Requestor ID</td>
         <td>: @RequestorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>Kindly  please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (3, N'Cipl', N'Revise', N'Requestor', N'CIPL @RequestNo REVISED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @RequestorName,</span><br /><br />  <span>Your Export CIPL Form has been requested for revision by your approver.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CIPL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CIPL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Superior Name</td>
         <td>: @SuperiorName</td>
      </tr>
      <tr>
         <td>Superior ID</td>
         <td>: @SuperiorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>Kindly  please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (4, N'Cipl', N'Revise', N'Approver', N'CIPL @RequestNo REVISED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @ApproverName,</span><br /><br />  <span>You have requested a revision on Export CIPL form with details.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CIPL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CIPL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Requestor Name</td>
         <td>: @RequestorName</td>
      </tr>
      <tr>
         <td>Requestor ID</td>
         <td>: @RequestorEmpID</td>
      </tr>
<tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To check the progress, please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (5, N'Cipl', N'Reject', N'Requestor', N'CIPL @RequestNo REJECTED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @RequestorName,</span><br /><br />  <span>Your Export CIPL Form has been rejected by your approver.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CIPL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CIPL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Superior Name</td>
         <td>: @SuperiorName</td>
      </tr>
      <tr>
         <td>Superior ID</td>
         <td>: @SuperiorEmpID</td>
      </tr>
	<tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To view the detail, please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (6, N'Cipl', N'Reject', N'Approver', N'CIPL @RequestNo REJECTED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @ApproverName,</span><br /><br />  <span>An Export CIPL form has been rejected with details.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CIPL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CIPL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Requestor Name</td>
         <td>: @RequestorName</td>
      </tr>
      <tr>
         <td>Requestor ID</td>
         <td>: @RequestorEmpID</td>
      </tr>
	<tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To view the detail, please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (7, N'Cipl', N'Approved', N'Requestor', N'CIPL @RequestNo APPROVED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @RequestorName,</span><br /><br />  <span>Your Export CIPL Form has been fully approved.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CIPL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CIPL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Superior Name</td>
         <td>: @SuperiorName</td>
      </tr>
      <tr>
         <td>Superior ID</td>
         <td>: @SuperiorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To view the detail, please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (8, N'Cipl', N'Approved', N'Approver', N'CIPL @RequestNo APPROVED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @ApproverName,</span><br /><br />  <span>An Export CIPL form has been fully approved with details.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CIPL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CIPL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Requestor Name</td>
         <td>: @RequestorName</td>
      </tr>
      <tr>
         <td>Requestor ID</td>
         <td>: @RequestorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To view the detail, kindly  please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (9, N'GoodReceive', N'Submit', N'Requestor', N'GR @RequestNo SUBMITTED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
<span>Dear @RequestorName,</span><br /><br />
<span>Your Export GR Form has been submitted to the Export CIPL Requestor for review & approval in 24 hours after received this request.</span><br /><br />
<table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
	<tr>
		<td>ExportGR Number&nbsp;&nbsp;</td>
		<td>: @RequestNo</td>
	</tr>
	<tr>
		<td>Export GR Date</td>
		<td>: @CreatedDate</td>
	</tr>
	<tr>
		<td>Superior Name</td>
		<td>: @SuperiorName</td>
	</tr>
	<tr>
		<td>Superior ID</td>
		<td>: @SuperiorEmpID</td>
	</tr>
</table><br />
<span>To check the progress, please Log to:</span> <br /><br />
<ol type="a">
	<li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action
	<li>By desktop click <a href="@DesktopLink">here</a> for further action
</ol><br />
<span>Best regards,</span><br /><span>EMCS Application</span>
<br /><br />
<span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (10, N'GoodReceive', N'Approval', N'Approver', N'GR @RequestNo WAITING APPROVAL', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
<span>Dear @ApproverName,</span><br /><br />
<span>You have one Export GR form Approval Request for your review & approval in 24 hours after received this request.</span><br /><br />
<table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
	<tr>
		<td>Export GR Number&nbsp;&nbsp;</td>
		<td>: @RequestNo</td>
	</tr>
	<tr>
		<td>Export GR Date</td>
		<td>: @CreatedDate</td>
	</tr>
	<tr>
		<td>Requestor Name</td>
		<td>: @RequestorName</td>
	</tr>
	<tr>
		<td>Requestor ID</td>
		<td>: @RequestorEmpID</td>
	</tr>
</table><br />
<span>Kindly  please Log to:</span> <br /><br />
<ol type="a">
	<li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action
	<li>By desktop click <a href="@DesktopLink">here</a> for further action
</ol><br />
<span>Best regards,</span><br /><span>EMCS Application</span>
<br /><br />
<span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (11, N'GoodReceive', N'Revise', N'Requestor', N'GR @RequestNo REVISED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
<span>Dear @RequestorName,</span><br /><br />
<span>Your Export GR Form has been requested for revision by your approver.</span><br /><br />
<table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
	<tr>
		<td>Export GR Number&nbsp;&nbsp;</td>
		<td>: @RequestNo</td>
	</tr>
	<tr>
		<td>Export GR Date</td>
		<td>: @CreatedDate</td>
	</tr>
	<tr>
		<td>Superior Name</td>
		<td>: @SuperiorName</td>
	</tr>
	<tr>
		<td>Superior ID</td>
		<td>: @SuperiorEmpID</td>
	</tr>
</table><br />
<span>Kindly  please Log to:</span> <br /><br />
<ol type="a">
	<li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action
	<li>By desktop click <a href="@DesktopLink">here</a> for further action
</ol><br />
<span>Best regards,</span><br /><span>EMCS Application</span>
<br /><br />
<span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (12, N'GoodReceive', N'Revise', N'Approver', N'GR @RequestNo REVISED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @ApproverName,</span><br /><br />  <span>You have requested a revision on Export GR form with details.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export GR Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export GR Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Requestor Name</td>
         <td>: @RequestorName</td>
      </tr>
      <tr>
         <td>Requestor ID</td>
         <td>: @RequestorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To check the progress, please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (13, N'GoodReceive', N'Reject', N'Requestor', N'GR @RequestNo REJECTED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @RequestorName,</span><br /><br />  <span>Your Export GR Form has been rejected by your approver.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export GR Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export GR Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Superior Name</td>
         <td>: @SuperiorName</td>
      </tr>
      <tr>
         <td>Superior ID</td>
         <td>: @SuperiorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To view the detail, please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (14, N'GoodReceive', N'Reject', N'Approver', N'GR @RequestNo REJECTED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @ApproverName,</span><br /><br />  <span>An Export GR form has been rejected with details.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export GR Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export GR Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Requestor Name</td>
         <td>: @RequestorName</td>
      </tr>
      <tr>
         <td>Requestor ID</td>
         <td>: @RequestorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To view the detail, kindly  please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (15, N'GoodReceive', N'Approved', N'Requestor', N'GR @RequestNo APPROVED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @RequestorName,</span><br /><br />  <span>Your Export GR Form has been fully approved.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export GR Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export GR Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Superior Name</td>
         <td>: @SuperiorName</td>
      </tr>
      <tr>
         <td>Superior ID</td>
         <td>: @SuperiorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To view the detail, please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (16, N'GoodReceive', N'Approved', N'Approver', N'GR @RequestNo APPROVED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @ApproverName,</span><br /><br />  <span>An Export GR form has been fully approved with details.</span><br /><br />       
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export GR Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export GR Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Requestor Name</td>
         <td>: @RequestorName</td>
      </tr>
      <tr>
         <td>Requestor ID</td>
         <td>: @RequestorEmpID</td>
      </tr>
      <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
      <tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
      <tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
      <tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
      <tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To view the detail, kindly  please Log to:</span> <br /><br />       
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action           
      <li>By desktop click <a href="@DesktopLink">here</a> for further action       
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>    
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (17, N'Cargo', N'Submit', N'Requestor', N'CL @RequestNo SUBMITTED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @RequestorName,</span><br /><br />  <span>Your Export CL Form has been submitted to @ApproverPosition for review & approval in 24 hours after received this request.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Superior Name</td>
         <td>: @SuperiorName</td>
      </tr>
      <tr>
         <td>Superior ID</td>
         <td>: @SuperiorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To check the progress, please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (18, N'Cargo', N'Approval', N'Approver', N'CL @RequestNo WAITING APPROVAL', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @ApproverName,</span><br /><br />  <span>You have one Export CL form Approval Request for your review & approval in 24 hours after received this request.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Requestor Name</td>
         <td>: @RequestorName</td>
      </tr>
      <tr>
         <td>Requestor ID</td>
         <td>: @RequestorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>Kindly  please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (19, N'Cargo', N'Revise', N'Requestor', N'CL @RequestNo REVISED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @RequestorName,</span><br /><br />  <span>Your Export CL Form has been requested for revision by your approver.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Superior Name</td>
         <td>: @SuperiorName</td>
      </tr>
      <tr>
         <td>Superior ID</td>
         <td>: @SuperiorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>Kindly  please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (20, N'Cargo', N'Revise', N'Approver', N'CL @RequestNo REVISED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @ApproverName,</span><br /><br />  <span>You have requested a revision on Export CL form with details.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Requestor Name</td>
         <td>: @RequestorName</td>
      </tr>
      <tr>
         <td>Requestor ID</td>
         <td>: @RequestorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To check the progress, please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (21, N'Cargo', N'Reject', N'Requestor', N'CL @RequestNo REJECTED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @RequestorName,</span><br /><br />  <span>Your Export CL Form has been rejected by your approver.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Superior Name</td>
         <td>: @SuperiorName</td>
      </tr>
      <tr>
         <td>Superior ID</td>
         <td>: @SuperiorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To view the detail, please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (22, N'Cargo', N'Reject', N'Approver', N'CL @RequestNo REJECTED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
<span>Dear @ApproverName,</span><br /><br />
<span>An Export CL form has been rejected with details.</span><br /><br />
<table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
	<tr>
		<td>Export CL Number&nbsp;&nbsp;</td>
		<td>: @RequestNo</td>
	</tr>
	<tr>
		<td>Export CL Date</td>
		<td>: @CreatedDate</td>
	</tr>
	<tr>
		<td>Requestor Name</td>
		<td>: @RequestorName</td>
	</tr>
	<tr>
		<td>Requestor ID</td>
		<td>: @RequestorEmpID</td>
	</tr>
</table><br />
<span>To view the detail, kindly  please Log to:</span> <br /><br />
<ol type="a">
	<li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action
	<li>By desktop click <a href="@DesktopLink">here</a> for further action
</ol><br />
<span>Best regards,</span><br /><span>EMCS Application</span>
<br /><br />
<span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (23, N'Cargo', N'Approved', N'Requestor', N'CL @RequestNo APPROVED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @RequestorName,</span><br /><br />  <span>Your Export CL Form has been fully approved.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Superior Name</td>
         <td>: @SuperiorName</td>
      </tr>
      <tr>
         <td>Superior ID</td>
         <td>: @SuperiorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To view the detail, please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (24, N'Cargo', N'Approved', N'Approver', N'CL @RequestNo APPROVED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
   <span>Dear @ApproverName,</span><br /><br />  <span>An Export CL form has been fully approved with details.</span><br /><br />  
   <table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
      <tr>
         <td>Export CL Number&nbsp;&nbsp;</td>
         <td>: @RequestNo</td>
      </tr>
      <tr>
         <td>Export CL Date</td>
         <td>: @CreatedDate</td>
      </tr>
      <tr>
         <td>Requestor Name</td>
         <td>: @RequestorName</td>
      </tr>
      <tr>
         <td>Requestor ID</td>
         <td>: @RequestorEmpID</td>
      </tr>
	  <tr>
         <td>No Do</td>
         <td>: @DO</td>
      </tr>
	<tr>
         <td>No CIPL</td>
         <td>: @CiplNo</td>
      </tr>
	<tr>
         <td>No DA</td>
         <td>: @DA</td>
      </tr>
	<tr>
         <td>No Reference</td>
         <td>: @NoReference</td>
      </tr>
	<tr>
         <td>Branch</td>
         <td>: @CIPLBranchName</td>
      </tr>
   </table>
   <br />  <span>To view the detail, kindly  please Log to:</span> <br /><br />  
   <ol type="a">
      <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action   
      <li>By desktop click <a href="@DesktopLink">here</a> for further action  
   </ol>
   <br />  <span>Best regards,</span><br /><span>EMCS Application</span>  <br /><br />  <span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>  
</body>', N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime), N'0', CAST(N'2019-02-10T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (25, N'Cipl', N'InfoCKB', N'CKB', N'CIPL @RequestNo Complete', N'<!DOCTYPE html>
<html>

<head>
    <title></title>
</head>

<body style="font-family: verdana, helvetica, sans-serif; font-size: 10pt;">
    <p><span>Dear CKB,</span></p>
    <p><br></p>
    <p><span>You have <span style="color: rgb(0, 0, 0); font-family: verdana, helvetica, sans-serif; font-size: 13.3333px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">one of&nbsp;</span>Export Delivery Instruction (EDI) request with details. </span></p>
    
    <p><span>"Please follow up to create RG before pickup goods"</span></p>
    <p><br></p>
    <table border="0" style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
        <tbody>
            <tr>
                <td>Export <span style="color: rgb(0, 0, 0); font-family: verdana, helvetica, sans-serif; font-size: 13.3333px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">EDI&nbsp;</span>Number &nbsp;</td>
                <td>: @RequestNo</td>
            </tr>
            <tr>
                <td>Export <span style="color: rgb(0, 0, 0); font-family: verdana, helvetica, sans-serif; font-size: 13.3333px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">EDI&nbsp;</span>Date</td>
                <td>: @CreatedDate</td>
            </tr>
            <tr>
                <td>Requestor Name</td>
                <td>: @RequestorName</td>
            </tr>
            <tr>
                <td>Requestor ID</td>
                <td>: @RequestorEmpID</td>
            </tr>
		<tr>
                <td>CIPL Number &nbsp;</td>
                <td>: @CIPLNo</td>
            </tr>
		<tr>
                <td>Branch Number &nbsp;</td>
                <td>: @CIPLBranchName</td>
            </tr>
		<tr>
                <td>PIC Pickup Points &nbsp;</td>
                <td>: @PICPickupPoints</td>
            </tr>
		<tr>
                <td>Pickup Points Area &nbsp;</td>
                <td>: @PickupPointsArea</td>
            </tr>
        </tbody>
    </table>
    <p><br></p>
    <p><span>To view the detail, kindly please Log to:</span></p>
    <p><br></p>
    <ol type="a">
        <li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action</li>
        <li>By desktop click <a href="@DesktopLink">here</a> for further action</li>
    </ol>
    <p><br></p>
    <p><span>Best regards,</span></p>
    <p><span>EMCS Application</span></p>
    <p><br></p>
    <p><span style="font-size: 9pt;"><em>Do not reply this email, this email is automatically generated by system</em></span></p>
</body>

</html>', N'IT', CAST(N'2020-07-03T00:00:00' AS SmallDateTime), N'IT', CAST(N'2020-07-03T00:00:00' AS SmallDateTime))
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (26, N'RFC', N'Approval', N'Requestor', N'RFC @RequestNo WAITING APPROVAL', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
<span>Dear @RequestorName,</span><br /><br />
<span>Your Request for Changes (RFC) form has been submitted to IMEX Superior for review & approval in 24 hours after received this request.</span><br /><br />
<table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
	<tr>
		<td>Request Number&nbsp;&nbsp;</td>
		<td>: @RequestNo</td>
	</tr>
	<tr>
		<td>Request Date</td>
		<td>: @CreatedDate</td>
	</tr>
	
	<tr>
		<td>Document Type</td>
		<td>: @DocumentType</td>
	</tr>
	
	<tr>
		<td>Document No</td>
		<td>: @DocumentNo</td>
	</tr>
	<tr>
		<td>Request Reason</td>
		<td>: @RequestReason</td>
	</tr>
	<tr>
		<td>Superior Name</td>
		<td>: @SuperiorName</td>
	</tr>
	<tr>
		<td>Superior ID</td>
		<td>: @SuperiorEmpID</td>
	</tr>
</table><br />

<span>To check the progress, please Log to:</span> <br /><br />
<ol type="a">
	<li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action
	<li>By desktop click <a href="@DesktopLink">here</a> for further action
</ol><br />
<span>Best regards,</span><br /><span>EMCS Application</span>
<br /><br />
<span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>
</body>', NULL, NULL, NULL, NULL)
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (27, N'RFC', N'Approval', N'Approver', N'RFC @RequestNo WAITING APPROVAL', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
<span>Dear @ApproverName,</span><br /><br />
<span>You have one Request for Changes Approval for your review & approval in 24 hours after received this request.</span><br /><br />
<table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
	<tr>
		<td>Request No&nbsp;&nbsp;</td>
		<td>: @RequestNo</td>
	</tr>
	<tr>
		<td>Export CIPL Date</td>
		<td>: @CreatedDate</td>
	</tr>
	<tr>
		<td>Requestor Name</td>
		<td>: @RequestorName</td>
	</tr>
	<tr>
		<td>Requestor ID</td>
		<td>: @RequestorEmpID</td>
	</tr>
</table><br />
<span>Kindly  please Log to:</span> <br /><br />
<ol type="a">
	<li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action
	<li>By desktop click <a href="@DesktopLink">here</a> for further action
</ol><br />
<span>Best regards,</span><br /><span>EMCS Application</span>
<br /><br />
<span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>
</body>', NULL, NULL, NULL, NULL)
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (28, N'RFC', N'Approved', N'Requestor', N'RFC @RequestNo APPROVED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
<span>Dear @RequestorName,</span><br /><br />
<span>Your Request for Changes (RFC) has been fully approved.</span><br /><br />
<table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
	<tr>
		<td>Request Number&nbsp;&nbsp;</td>
		<td>: @RequestNo</td>
	</tr>
	<tr>
		<td>Request Date</td>
		<td>: @CreatedDate</td>
	</tr>
	
	<tr>
		<td>Document Type</td>
		<td>: @DocumentType</td>
	</tr>
	
	<tr>
		<td>Document No</td>
		<td>: @DocumentNo</td>
	</tr>
	<tr>
		<td>Request Reason</td>
		<td>: @RequestReason</td>
	</tr>
	<tr>
		<td>Superior Name</td>
		<td>: @SuperiorName</td>
	</tr>
	<tr>
		<td>Superior ID</td>
		<td>: @SuperiorEmpID</td>
	</tr>
</table><br />
<span>To view the detail, please Log to:</span> <br /><br />
<ol type="a">
	<li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action
	<li>By desktop click <a href="@DesktopLink">here</a> for further action
</ol><br />
<span>Best regards,</span><br /><span>EMCS Application</span>
<br /><br />
<span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>
</body>', NULL, NULL, NULL, NULL)
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (29, N'RFC', N'Approved', N'Approver', N'RFC @RequestNo APPROVED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
<span>Dear @ApproverName,</span><br /><br />
<span>Thank you for your approval this Request for Changes (RFC) below.</span><br /><br />
<table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
	<tr>
		<td>Request Number&nbsp;&nbsp;</td>
		<td>: @RequestNo</td>
	</tr>
	<tr>
		<td>Request Date</td>
		<td>: @CreatedDate</td>
	</tr>
	<tr>
		<td>Document Type</td>
		<td>: @DocumentType</td>
	</tr>

	<tr>
		<td>Document No</td>
		<td>: @DocumentNo</td>
	</tr>
	<tr>
		<td>Request Reason</td>
		<td>: @RequestReason</td>
	</tr>
	<tr>
		<td>Requestor Name</td>
		<td>: @RequestorName</td>
	</tr>
	<tr>
		<td>Requestor ID</td>
		<td>: @RequestorEmpID</td>
	</tr>
</table><br />
<span>To check the progress, please Log to:</span> <br /><br />
<ol type="a">
	<li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action
	<li>By desktop click <a href="@DesktopLink">here</a> for further action
</ol><br />
<span>Best regards,</span><br /><span>EMCS Application</span>
<br /><br />
<span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>
</body>', NULL, NULL, NULL, NULL)
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (30, N'RFC', N'Reject', N'Requestor', N'RFC @RequestNo REJECTED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
<span>Dear @RequestorName,</span><br /><br />
<span>Your Request for Changes (RFC) has been rejected by your approver.</span><br /><br />
<table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
	<tr>
		<td>Request Number&nbsp;&nbsp;</td>
		<td>: @RequestNo</td>
	</tr>
	<tr>
		<td>Request Date</td>
		<td>: @CreatedDate</td>
	</tr>
	<tr>
		<td>Document Type</td>
		<td>: @DocumentType</td>
	</tr>
	
	<tr>
		<td>Document No</td>
		<td>: @DocumentNo</td>
	</tr>
	<tr>
		<td>Reject Reason</td>
		<td>: @ReasonIfRejected</td>
	</tr>
	<tr>
		<td>Superior Name</td>
		<td>: @SuperiorName</td>
	</tr>
	<tr>
		<td>Superior ID</td>
		<td>: @SuperiorEmpID</td>
	</tr>
</table><br />
<span>To view the detail, please Log to:</span> <br /><br />
<ol type="a">
	<li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action
	<li>By desktop click <a href="@DesktopLink">here</a> for further action
</ol><br />
<span>Best regards,</span><br /><span>EMCS Application</span>
<br /><br />
<span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>
</body>', NULL, NULL, NULL, NULL)
GO

INSERT [dbo].[EmailTemplate] ([ID], [Module], [Status], [RecipientType], [Subject], [Message], [CreatedBy], [CreatedDate], [ModifiedBy], [ModifiedDate]) VALUES (31, N'RFC', N'Reject', N'Approver', N'RFC @RequestNo REJECTED', N'<body style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
<span>Dear @ApproverName,</span><br /><br />
<span>A Request for Changes (RFC) has been rejected with details.</span><br /><br />
<table border = ''0'' style="font-family: verdana, helvetica, sans-serif;font-size: 10pt;">
	<tr>
		<td>Request Number&nbsp;&nbsp;</td>
		<td>: @RequestNo</td>
	</tr>
	<tr>
		<td>Request Date</td>
		<td>: @CreatedDate</td>
	</tr>
	
	<tr>
		<td>Document Type</td>
		<td>: @DocumentType</td>
	</tr>
	
	<tr>
		<td>Document No</td>
		<td>: @DocumentNo</td>
	</tr>
	<tr>
		<td>Reject Reason</td>
		<td>: @ReasonIfRejected</td>
	</tr>
	<tr>
		<td>Superior Name</td>
		<td>: @SuperiorName</td>
	</tr>
	<tr>
		<td>Superior ID</td>
		<td>: @SuperiorEmpID</td>
	</tr>
</table><br />
<span>To view the detail, kindly  please Log to:</span> <br /><br />
<ol type="a">
	<li>By mobile/Smart phone (Internet connection) click <a href="@MobileLink">here</a> for further action
	<li>By desktop click <a href="@DesktopLink">here</a> for further action
</ol><br />
<span>Best regards,</span><br /><span>EMCS Application</span>
<br /><br />
<span style="font-size: 9pt;"><i>Do not reply this email, this email is automatically generated by system</i></span>
</body>', NULL, NULL, NULL, NULL)
GO
SET IDENTITY_INSERT [dbo].[EmailTemplate] OFF
GO

ALTER PROCEDURE [dbo].[sp_RequestForChangeHistory]              
(
    @IsTotal bit = 0,                
    @sort nvarchar(100) = 'CreateDate',                
    @order nvarchar(100) = 'DESC',                
    @offset nvarchar(100) = '0',                
    @limit nvarchar(100) = '10',
    @Approver nvarchar(100) = 'XUPJ21WDN'
)                 
AS                
BEGIN                
    DECLARE @sql nvarchar(max);                  
                
                
    SET @sql = 'SELECT ';                
    SET @sort = 'RF.'+@sort;                
                
    IF (@IsTotal <> 0)                
    BEGIN                
        SET @sql += 'count(*) total'                
    END                 
    ELSE                
    BEGIN                
        SET @sql += '         
            RF.ID,       
            RF.FormId,     
            RF.RFCNumber,    
            RF.FormType,    
            RF.FormNo,            
            RF.CreateBy,              
            RF.CreateDate,              
            RF.Reason,  
            RF.[Status]'                
    END                
    SET @sql +=' FROM RequestForChange RF WHERE RF.Approver =  '+@Approver+'';                
    
    IF @isTotal = 0                 
    BEGIN                
        SET @sql += ' ORDER BY '+@sort+' '+@order+' OFFSET '+@offset+' ROWS FETCH NEXT '+@limit+' ROWS ONLY';                
    END                 
                
    --select @sql;                
    EXECUTE(@sql);                
    --print(@sql);                
END
GO

ALTER PROC Sp_RequestForChange_Insert      
    @FormType nvarchar(300)      
    ,@FormNo nvarchar(300)     
    ,@FormId int     
    ,@Reason nvarchar(MAX)      
    ,@CreateBy nvarchar(300)      
AS      
BEGIN      
    DECLARE @Approver NVARCHAR(150)

    SET @Approver = CASE
        WHEN (@CreateBy ='XUPJ21WDN') THEN 'xupj21dxd' 
        WHEN (@CreateBy ='xupj21dxd') THEN 'xupj21fig'
    END;
    
    DECLARE @RFCNumber NVARCHAR(50)       
    SELECT TOP 1 @RFCNumber = RFCNumber FROM RequestForChange ORDER BY ID DESC        
    DECLARE @PrefixCode NVARCHAR(15)      
    DECLARE @Year as NVARCHAR(20)        
    SET @PrefixCode = 'RFC'      
    SET @Year = YEAR(getdate())      
    
    IF @RFCNumber IS NuLL      
    BEGIN        
        DECLARE @invnumber NVARCHAR(50)      
        SET @invnumber = @PrefixCode + @Year + '000000'       
        SET  @RFCNumber =  @invnumber       
    END      
    ELSE      
    BEGIN       
        DECLARE @ID INT             
        DECLARE @Temp NVARCHAR(20)          
        DECLARE @Temp1 NVARCHAR(20)          
        DECLARE @Temp2 NVARCHAR(20)       
        DECLARE @Temp3 NVARCHAR(20)         
        DECLARE @TmpInvoiceNo TABLE (Id INT IDENTITY(1,1), Col4 VARCHAR(50))         
        INSERT INTO @TmpInvoiceNo(Col4) SELECT Data As QuotationNo FROM [fnSplitStringRFC](@RFCNumber,'')          
                
        DECLARE @No as NVARCHAR(20)          
        DECLARE @TableName NVARCHAR(200)          
        SELECT @Year = Col4 FROM @TmpInvoiceNo WHERE Id = 1          
        SELECT @No = Col4 FROM @TmpInvoiceNo WHERE Id = 2            
        
        
        SET @Temp =  SUBSTRING(@RFCNumber, 1, 3)      
        SET @Temp1 = SUBSTRING(@RFCNumber, 4, 4)      
        SET @Temp2 = SUBSTRING(@RFCNumber, 8, 9)      
        SET @Temp3 = SUBSTRING(@RFCNumber, 8, 9)      
        SET @Temp2 = right('00000' + cast(@Temp3 as varchar(6))+ 1, 6)      
        SET @Temp3 = right('00000' + cast(@Temp2 as varchar(6)), 6)      

        IF YEAR(getdate()) = @Temp1          
        BEGIN          
            SET @RFCNumber = @Temp +''+ @Temp1 +''+ @Temp3      
        END          
        ELSE          
        BEGIN       
            SET @RFCNumber = @Temp + CAST(YEAR(getdate()) AS NVARCHAR(4))+''+CAST('000001' AS NVARCHAR(6))
        END        
    END    
    
-------------------------------------------------------------------------------    
    DECLARE @ResultId INT      
    INSERT INTO RequestForChange (FormType, FormNo, RFCNumber, FormId, Reason, CreateBy,Approver) VALUES (@FormType,@FormNo,@RFCNumber,@FormId,@Reason,@CreateBy,@Approver)      
      
    SET @ResultId = SCOPE_IDENTITY()  
    EXEC [dbo].[sp_Process_Email_RFC] @ResultId,'Approval'   
    SELECT @ResultId      
END
GO

ALTER PROC sp_Process_Email_RFC  
    @RFCId INT,  
    @Doctype NVARCHAR(200)  
AS  
BEGIN  
    DECLARE @Email NVARCHAR(200)  
    DECLARE @Subject NVARCHAR(MAX)  
    DECLARE @Template NVARCHAR(MAX)  
    
    DECLARE @ApproverUser NVARCHAR(MAX)    
    DECLARE @RequestorUser NVARCHAR(MAX)  
        
    SELECT @RequestorUser = RFC.CreateBy   
    ,@ApproverUser = RFC.Approver    
    FROM RequestForChange RFC       
    WHERE ID = @RFCId  
  
    IF(@Doctype = 'Approval')  
    BEGIN  
        SELECT @Subject = [Subject] , @Template = [Message] FROM EmailTemplate WHERE [Module] = 'RFC' AND [Status] = 'Approval' AND RecipientType = 'Requestor'  
        SET @Subject = dbo.[fn_proccess_email_template_RFC](@RFCId, @Subject)  
        SET @Template = dbo.[fn_proccess_email_template_RFC](@RFCId, @Template)  
        
        exec sp_send_email_for_single @Subject, @RequestorUser, @Template  
        
        SELECT @Subject = [Subject] , @Template = [Message] FROM EmailTemplate WHERE [Module] = 'RFC' AND [Status] = 'Approval' AND RecipientType = 'Approver'  
        SET @Subject = dbo.[fn_proccess_email_template_RFC](@RFCId, @Subject)  
        SET @Template = dbo.[fn_proccess_email_template_RFC](@RFCId, @Template)  
        
        exec sp_send_email_for_single @Subject, @ApproverUser, @Template  
    END  
    ELSE IF(@Doctype = 'Approved')  
    BEGIN  
        SELECT @Subject = [Subject] , @Template = [Message] FROM EmailTemplate WHERE [Module] = 'RFC' AND [Status] = 'Approved' AND RecipientType = 'Requestor'  
        SET @Subject = dbo.[fn_proccess_email_template_RFC](@RFCId, @Subject)  
        SET @Template = dbo.[fn_proccess_email_template_RFC](@RFCId, @Template)  
        
        exec sp_send_email_for_single @Subject, @RequestorUser, @Template  
        
        SELECT @Subject = [Subject] , @Template = [Message] FROM EmailTemplate WHERE [Module] = 'RFC' AND [Status] = 'Approved' AND RecipientType = 'Approver'  
        SET @Subject = dbo.[fn_proccess_email_template_RFC](@RFCId, @Subject)  
        SET @Template = dbo.[fn_proccess_email_template_RFC](@RFCId, @Template)  
        
        exec sp_send_email_for_single @Subject, @ApproverUser, @Template  
    END  
    ELSE  
    BEGIN  
        SELECT @Subject = [Subject] , @Template = [Message] FROM EmailTemplate WHERE [Module] = 'RFC' AND [Status] = 'Reject' AND RecipientType = 'Requestor'  
        SET @Subject = dbo.[fn_proccess_email_template_RFC](@RFCId, @Subject)  
        SET @Template = dbo.[fn_proccess_email_template_RFC](@RFCId, @Template)  

        exec sp_send_email_for_single @Subject, @RequestorUser, @Template  
        
        SELECT @Subject = [Subject] , @Template = [Message] FROM EmailTemplate WHERE [Module] = 'RFC' AND [Status] = 'Reject' AND RecipientType = 'Approver'  
        SET @Subject = dbo.[fn_proccess_email_template_RFC](@RFCId, @Subject)  
        SET @Template = dbo.[fn_proccess_email_template_RFC](@RFCId, @Template)  
  
        exec sp_send_email_for_single @Subject, @ApproverUser, @Template  
    END  
END
GO

ALTER FUNCTION [fn_proccess_email_template_RFC]    
(        
    @RFCId INT = '',        
    @Template nvarchar(max) = ''       
)        
RETURNS NVARCHAR(MAX)    
AS    
BEGIN    
    
    DECLARE @RequestNo NVARCHAR(MAX)    
    DECLARE @CreatedDate DATETIME    
    DECLARE @DocumentType NVARCHAR(MAX)    
    DECLARE @DocumentNo NVARCHAR(MAX)    
    DECLARE @RequestReason NVARCHAR(MAX)    
    DECLARE @SuperiorName NVARCHAR(MAX)    
    DECLARE @SuperiorEmpID NVARCHAR(MAX)    
    DECLARE @MobileLink NVARCHAR(MAX)    
    DECLARE @DesktopLink NVARCHAR(MAX)    
    DECLARE @RequestorName NVARCHAR(MAX)    
    DECLARE @RequestorEmpID NVARCHAR(MAX)    
    DECLARE @ApproverName NVARCHAR(MAX)    
    DECLARE @ReasonIfRejected NVARCHAR(MAx)    
    DECLARE @UpdatedDate Datetime    
    
    SET @MobileLink = 'http://pis.trakindo.co.id'    
    SET @DesktopLink = 'http://pis.trakindo.co.id'    
    
    SELECT @RequestNo = RFC.RFCNumber    
        ,@DocumentType = RFC.FormType    
        ,@DocumentNo = RFC.FormNo    
        ,@RequestReason = RFC.Reason    
        ,@RequestorEmpID = RFC.CreateBy    
        ,@CreatedDate = RFC.CreateDate    
        ,@SuperiorEmpID = RFC.Approver    
        ,@UpdatedDate = RFC.UpdateDate    
        ,@ReasonIfRejected = RFC.ReasonIfRejected    
        ,@ApproverName = t2.Employee_Name    
        ,@RequestorName = t1.Employee_Name    
        ,@SuperiorName = t2.Employee_Name    
    FROM RequestForChange RFC     
    LEFT JOIN dbo.fn_get_employee_internal_ckb() t1 on t1.AD_User = RFC.CreateBy      
    LEFT JOIN dbo.fn_get_employee_internal_ckb() t2 on t2.AD_User =RFC.Approver    
    WHERE ID = @RFCId    
    
    BEGIN    
        DECLARE @variable_table TABLE (key_data VARCHAR(MAX) NULL, val_data VARCHAR(MAX) NULL);        
        DECLARE @key NVARCHAR(MAX),         
                @flow NVARCHAR(MAX),         
                @val NVARCHAR(MAX)    

        INSERT         
        INTO         
            @variable_table         
            VALUES         
            ('@RequestNo', ISNULL(@RequestNo, '-'))        
            ,('@DocumentType', ISNULL(@DocumentType, '-'))     
        ,('@DocumentNo', ISNULL(@DocumentNo, '-'))     
        ,('@RequestReason', ISNULL(@RequestReason, '-'))     
        ,('@RequestorEmpID', ISNULL(@RequestorEmpID, '-'))     
        ,('@CreatedDate', ISNULL(CONVERT(nvarchar(10), @CreatedDate, 103), '-'))     
        ,('@SuperiorEmpID', ISNULL(@SuperiorEmpID, '-'))     
        ,('@UpdatedDate', ISNULL(CONVERT(nvarchar(10), @UpdatedDate, 103), '-'))     
        ,('@ReasonIfRejected', ISNULL(@ReasonIfRejected, '-'))     
        ,('@ApproverName', ISNULL(@ApproverName, '-'))     
        ,('@RequestorName', ISNULL(@RequestorName, '-'))     
        ,('@SuperiorName', ISNULL(@SuperiorName, '-'))     
      
        BEGIN        
            DECLARE cursor_variable CURSOR        
            FOR SELECT key_data, val_data FROM @variable_table;        
                                                                                                    
            OPEN cursor_variable;         
            FETCH NEXT FROM cursor_variable INTO @key, @val;         
            WHILE @@FETCH_STATUS = 0        
            BEGIN        
                -- Melakukan Replace terhadap variable di template dengan value dari hasil pencarian data diata.        
                IF ISNULL(@key, '') <> ''        
                BEGIN        
                    SET @Template = REPLACE(@Template, @key, @val);        
                END        
        
                FETCH NEXT FROM cursor_variable INTO @key, @val;        
            END;        
            CLOSE cursor_variable;         
            DEALLOCATE cursor_variable;        
        END        
    END    
    Return @Template    
END
GO

create table CargoDocument
(
Id bigint primary key not null IDENTITY,
IdCargo bigint not null,
DocumentDate datetime not null,
DocumentName nvarchar(max) not null,
Filename nvarchar(max) null,
CreateBy nvarchar(500) not null,
CreateDate datetime not null,
UpdateBy nvarchar(max) null,
UpdateDate datetime null,
IsDelete Bit null
)

Go


Create	PROCEDURE [dbo].[SP_CargoDocumentAdd]
(
	@Id BIGINT,
	@IdCargo BIGINT,
	@DocumentDate datetime,
	@DocumentName NVARCHAR(MAX) = '',
	@Filename NVARCHAR(MAX) = '',
	@CreateBy NVARCHAR(50),
	@CreateDate datetime,
	@UpdateBy NVARCHAR(50),
	@UpdateDate datetime,
	@IsDelete BIT
)
AS
BEGIN
	IF @Id <= 0
	BEGIN
	INSERT INTO [dbo].[CargoDocument]
           ([IdCargo]
		   ,[DocumentDate]
		   ,[DocumentName]
		   ,[Filename]
           ,[CreateBy]
           ,[CreateDate]
           ,[UpdateBy]
           ,[UpdateDate]
           ,[IsDelete]
           )
     VALUES
           (@IdCargo
			,@DocumentDate
			,@DocumentName
			,@Filename
			,@CreateBy
			,@CreateDate
			,@UpdateBy
			,@UpdateDate
			,@IsDelete
		   )

	END
	ELSE 
	BEGIN
	UPDATE dbo.CargoDocument
	SET [DocumentDate] = @DocumentDate
		   ,[DocumentName] = @DocumentName
	WHERE Id = @Id;
	END

END

Go


Create PROCEDURE [dbo].[SP_CargoDocumentDelete] (
	@id BIGINT
	,@UpdateBy NVARCHAR(50)
	,@UpdateDate DATETIME
	,@IsDelete BIT
	)
AS
BEGIN
	UPDATE dbo.CargoDocument
		SET UpdateBy = @UpdateBy
			,UpdateDate = @UpdateDate
			,IsDelete = @IsDelete
		WHERE Id = @id;	
END

Go

create PROCEDURE [dbo].[SP_CargoDocumentUpdateFile]
(
	@Id BIGINT,
	@Filename NVARCHAR(MAX) = '',
	@UpdateBy NVARCHAR(MAX) = ''
)
AS
BEGIN
 
	UPDATE dbo.CargoDocument
	SET [Filename] = @Filename,
	[UpdateBy] = @Updateby,
	[UpdateDate] = GETDATE()
	WHERE Id = @Id;

END

Go


CREATE PROCEDURE [dbo].[sp_get_cargo_document_list] 
(
	@IdCargo NVARCHAR(10),
	@IsTotal bit = 0,
	@sort nvarchar(100) = 'Id',
	@order nvarchar(100) = 'ASC',
	@offset nvarchar(100) = '0',
	@limit nvarchar(100) = '10'
)	
AS
BEGIN
	DECLARE @sql nvarchar(max);  
	SET @sql = 'SELECT ';
	SET @sort = 't0.'+@sort;

	IF (@IsTotal <> 0)
	BEGIN
		SET @sql += 'count(*) total'
	END 
	ELSE
	BEGIN
		SET @sql += 't0.Id
					 , t0.IdCargo
					 , t0.DocumentDate
					 , t0.DocumentName
					 , t0.[Filename]
					 , t0.CreateBy
					 , t0.CreateDate
					 , t0.UpdateBy
					 , t0.UpdateDate
					 , t0.IsDelete
					 , t2.Employee_Name as PIC '
	END
	SET @sql +=' FROM CargoDocument t0 
	JOIN employee t2 on t2.AD_User = t0.CreateBy   
	WHERE  IsDelete = 0 AND t0.IdCargo = '+@IdCargo;
	EXECUTE(@sql);
	--select @sql;
END

Go

create  PROCEDURE [dbo].[sp_get_cargo_document_list_byid] 
(
	@Id NVARCHAR(10),
	@IsTotal bit = 0,
	@sort nvarchar(100) = 'Id',
	@order nvarchar(100) = 'ASC',
	@offset nvarchar(100) = '0',
	@limit nvarchar(100) = '10'
)	
AS
BEGIN
	DECLARE @sql nvarchar(max);  
	SET @sql = 'SELECT ';
	SET @sort = 't0.'+@sort;

	IF (@IsTotal <> 0)
	BEGIN
		SET @sql += 'count(*) total'
	END 
	ELSE
	BEGIN
		SET @sql += 't0.Id
					 , t0.IdCargo
					 , t0.DocumentDate
					 , t0.DocumentName
					 , t0.[Filename]
					 , t2.Employee_Name AS CreateBy
					 , t0.CreateDate
					 , t0.UpdateBy
					 , t0.UpdateDate
					 , t0.IsDelete '
	END
	SET @sql +=' FROM CargoDocument t0 
	JOIN employee t2 on t2.AD_User = t0.CreateBy   
	WHERE  IsDelete = 0 AND t0.Id = '+@Id;
	EXECUTE(@sql);
	
END

GO

ALTER PROCEDURE [dbo].[sp_get_cargo_list] -- [dbo].[sp_get_cargo_list] '', 0
(
	@Username nvarchar(100),
	@Search nvarchar(100),
	@isTotal bit = 0,
	@sort nvarchar(100) = 'Id',
	@order nvarchar(100) = 'ASC',
	@offset nvarchar(100) = '0',
	@limit nvarchar(100) = '10'
)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @sql nvarchar(max);  
	DECLARE @WhereSql nvarchar(max) = '';
	DECLARE @GroupId nvarchar(100);
	DECLARE @RoleID bigint;
	DECLARE @area NVARCHAR(max);
	DECLARE @role NVARCHAR(max) = '';
	SET @sort = 't0.'+@sort;

	select @GroupId = Organization_Name from employee where Employee_Status = 'Active' AND AD_User = @Username;


	SELECT @area = U.Business_Area
		,@role = U.[Role]
	FROM dbo.fn_get_employee_internal_ckb() U
	WHERE U.AD_User = @Username;

	if @role !=''
	BEGIN


	IF (@role !='EMCS IMEX' and @Username !='ict.bpm')
	BEGIN
		SET @WhereSql = ' AND t0.CreateBy='''+@Username+''' ';
	END

	SET @sql = 'SELECT ';
	IF (@isTotal <> 0)
	BEGIN
		SET @sql += 'count(*) total '
	END 
	ELSE
	BEGIN
		SET @sql += 't0.id
						, t0.ClNo
						, t0.Consignee Consignee
						, t0.NotifyParty NotifyParty
						, t0.ExportType ExportType
						, t0.Category
						, t0.IncoTerms
						, t0.StuffingDateStarted
						, t0.StuffingDateFinished
						, t0.VesselFlight
						, t0.ConnectingVesselFlight
						, t0.VoyageVesselFlight
						, t0.VoyageConnectingVessel
						, t0.PortOfLoading
						, t0.PortOfDestination
						, t0.SailingSchedule
						, t0.ArrivalDestination
						, t0.BookingNumber
						, t0.BookingDate
						, t0.Liner
						, t0.ETA
						, t0.ETD 
						, t0.Referrence
						, t0.CreateDate
						, t0.CreateBy
						, t0.UpdateDate
						, t0.UpdateBy
						, CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Employee_Name ELSE t3.FullName END PreparedBy
						, CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Email ELSE t3.Email END Email 
						, t4.Step
						, t5.[Status]
						, t9.StatusViewByUser [StatusViewByUser]        
						, STUFF((SELECT '', ''+ISNULL(tx1.EdoNo, ''-'')
							FROM dbo.CargoItem tx0
							JOIN dbo.Cipl tx1 on tx1.id = tx0.IdCipl
							WHERE tx0.IdCargo = tx0.Id
							GROUP BY tx1.EdoNo
							FOR XML PATH(''''),type).value(''.'',''nvarchar(max)''),1,1,'''') [RefEdo]
						, t8.SlNo SiNo
						, t8.[Description] SiDescription
						, t8.DocumentRequired SiDocumentRequired
						, t8.SpecialInstruction SiSpecialInstruction '
	END
	SET @sql +='FROM Cargo t0
				JOIN dbo.RequestCl as t1 on t1.IdCl = t0.Id
				JOIN PartsInformationSystem.dbo.[UserAccess] t3 on t3.UserID = t0.CreateBy
				LEFT JOIN employee t2 on t2.AD_User = t0.CreateBy
				LEFT JOIN dbo.FlowStep t4 on t4.Id = t1.IdStep
				LEFT JOIN dbo.FlowStatus t5 on t5.[Status] = t1.[Status] AND  t5.IdStep = t1.IdStep
				LEFT JOIN dbo.ShippingInstruction t8 on t8.IdCL = t0.Id
				LEFT JOIN dbo.fn_get_cl_request_list_all() t9 on t9.IdCl = t0.Id
				WHERE 1=1 AND t0.IsDelete = 0 '+@WhereSql+' AND (t0.ClNo like ''%'+@Search+'%'' OR t0.Consignee like ''%'+@Search+'%'')';

	IF @isTotal = 0 
	BEGIN
		SET @sql += ' ORDER BY '+@sort+' '+@order+' OFFSET '+@offset+' ROWS FETCH NEXT '+@limit+' ROWS ONLY';
	END 

	--select @sql;
	EXECUTE(@sql);
	END
END
Go

create procedure [dbo].[sp_getcontainertype]
(
	@ContainerType nvarchar(50),
	@Value  nvarchar(50)
	
)	
as 
begin
select * from MasterParameter
where   Value = @Value  and [Group] = @ContainerType
end

Go

create procedure [dbo].[sp_searchContainerNumber]
(
	@IdCargo bigint,
	@ContainerNumber  nvarchaR(100)
	
)	
as 
begin
select * from CargoItem
where IdCargo = @IdCargo and ContainerNumber = @ContainerNumber
end

Go

ALTER PROCEDURE [dbo].[sp_get_cargo_item_data_by_cargoId]   
(    
 @Id nvarchar(100) = ''    
)    
AS    
BEGIN    
 SET NOCOUNT ON;    
 DECLARE @sql nvarchar(max);      
    
 SET @sql = 'SELECT ';    
 BEGIN    
  SET @sql += 'DISTINCT t0.Id ID        
     ,t1.Id IdCargoItem    
     ,t2.Id IdCargo    
     ,t0.IdCipl          
     ,t0.IdCiplItem               
     ,t3.CiplNo                     
     ,t2.Incoterms IncoTerm                     
     ,t2.Incoterms IncoTermNumber                     
     ,t1.CaseNumber                     
     ,t3.EdoNo                     
     ,t4.DaNo InboundDa                     
     ,ISNULL(t0.NewLength, t0.Length) Length                    
     ,ISNULL(t0.NewWidth,t0.Width) Width                     
     ,ISNULL(t0.NewHeight,t0.Height) Height                    
     ,ISNULL(t0.NewNet,t0.Net) NetWeight                     
     ,t1.Sn            
     ,t1.PartNumber            
     ,t1.Ccr            
     ,t1.Quantity            
     ,t1.Name ItemName            
     ,t1.JCode            
     ,t1.ReferenceNo                  
     ,ISNULL(t0.NewGross,t0.Gross) GrossWeight                     
     ,CAST(1 as bit) state            
     ,t2.Category CargoDescription            
     ,t0.ContainerNumber    
     ,t5.Description ContainerType    
     ,t0.ContainerSealNumber'    
  END    
   SET @sql +='    
     FROM dbo.CargoItem t0    
     JOIN dbo.CiplItem t1 on t1.Id = t0.IdCiplItem    
     JOIN dbo.Cargo t2 on t2.Id = t0.IdCargo    
     JOIN dbo.Cipl t3 on t3.id = t1.IdCipl    
     LEFT JOIN dbo.GoodsReceiveItem t4 on t4.DoNo = t3.EdoNo    
     LEFT JOIN dbo.MasterParameter t5 on t5.Value = t0.ContainerType AND t5.[Group] = ''ContainerType''    
     WHERE 1=1 AND t0.Id in ('+@Id+')';    
 print @sql;    
 EXECUTE(@sql);    
END 

Go

INSERT INTO Type(Name)
VALUES ('FTZ');
INSERT INTO Type(Name)
VALUES ('Ordinary');
delete from Type
where Id= 2

Go

CREATE TABLE [dbo].[GoodsReceiveDocument](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[IdGr] [bigint] NOT NULL,
	[DocumentDate] [datetime] NOT NULL,
	[DocumentName] [nvarchar](max) NOT NULL,
	[Filename] [nvarchar](max) NULL,
	[CreateBy] [nvarchar](50) NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[UpdateBy] [nvarchar](max) NULL,
	[UpdateDate] [datetime] NULL,
	[IsDelete] [bit] NULL
) 

Go

Create PROCEDURE [dbo].[sp_get_gr_document_list] 
(
	@IdGr NVARCHAR(10),
	@IsTotal bit = 0,
	@sort nvarchar(100) = 'Id',
	@order nvarchar(100) = 'ASC',
	@offset nvarchar(100) = '0',
	@limit nvarchar(100) = '10'
)	
AS
BEGIN
	DECLARE @sql nvarchar(max);  
	SET @sql = 'SELECT ';
	SET @sort = 't0.'+@sort;

	IF (@IsTotal <> 0)
	BEGIN
		SET @sql += 'count(*) total'
	END 
	ELSE
	BEGIN
		SET @sql += 't0.Id
					 , t0.IdGr
					 , t0.DocumentDate
					 , t0.DocumentName
					 , t0.[Filename]
					 , t0.CreateBy
					 , t0.CreateDate
					 , t0.UpdateBy
					 , t0.UpdateDate
					 , t0.IsDelete
					 , t2.Employee_Name as PIC '
	END
	SET @sql +=' FROM GoodsReceiveDocument t0 
	JOIN employee t2 on t2.AD_User = t0.CreateBy   
	WHERE  IsDelete = 0 AND t0.IdGr = '+@IdGr;
	EXECUTE(@sql);
	--select @sql;
END
Go

Create PROCEDURE [dbo].[sp_get_gr_document_list_byid] 
(
	@Id NVARCHAR(10),
	@IsTotal bit = 0,
	@sort nvarchar(100) = 'Id',
	@order nvarchar(100) = 'ASC',
	@offset nvarchar(100) = '0',
	@limit nvarchar(100) = '10'
)	
AS
BEGIN
	DECLARE @sql nvarchar(max);  
	SET @sql = 'SELECT ';
	SET @sort = 't0.'+@sort;

	IF (@IsTotal <> 0)
	BEGIN
		SET @sql += 'count(*) total'
	END 
	ELSE
	BEGIN
		SET @sql += 't0.Id
					 , t0.IdGr
					 , t0.DocumentDate
					 , t0.DocumentName
					 , t0.[Filename]
					 , t2.Employee_Name AS CreateBy
					 , t0.CreateDate
					 , t0.UpdateBy
					 , t0.UpdateDate
					 , t0.IsDelete '
	END
	SET @sql +=' FROM GoodsReceiveDocument t0 
	JOIN employee t2 on t2.AD_User = t0.CreateBy   
	WHERE  IsDelete = 0 AND t0.Id = '+@Id;
	EXECUTE(@sql);
	
END
Go

Create PROCEDURE [dbo].[SP_GRDocumentAdd]
(
	@Id BIGINT,
	@IdGr BIGINT,
	@DocumentDate datetime,
	@DocumentName NVARCHAR(MAX) = '',
	@Filename NVARCHAR(MAX) = '',
	@CreateBy NVARCHAR(50),
	@CreateDate datetime,
	@UpdateBy NVARCHAR(50),
	@UpdateDate datetime,
	@IsDelete BIT
)
AS
BEGIN
	IF @Id <= 0
	BEGIN
	INSERT INTO [dbo].[GoodsReceiveDocument]
           ([IdGr]
		   ,[DocumentDate]
		   ,[DocumentName]
		   ,[Filename]
           ,[CreateBy]
           ,[CreateDate]
           ,[UpdateBy]
           ,[UpdateDate]
           ,[IsDelete]
           )
     VALUES
           (@IdGr
			,@DocumentDate
			,@DocumentName
			,@Filename
			,@CreateBy
			,@CreateDate
			,@UpdateBy
			,@UpdateDate
			,@IsDelete
		   )

	END
	ELSE 
	BEGIN
	UPDATE dbo.GoodsReceiveDocument
	SET [DocumentDate] = @DocumentDate
		   ,[DocumentName] = @DocumentName
	WHERE Id = @Id;
	END

END

Go

Create PROCEDURE [dbo].[SP_GrDocumentDelete] (
	@id BIGINT
	,@UpdateBy NVARCHAR(50)
	,@UpdateDate DATETIME
	,@IsDelete BIT
	)
AS
BEGIN
	UPDATE dbo.GoodsReceiveDocument
		SET UpdateBy = @UpdateBy
			,UpdateDate = @UpdateDate
			,IsDelete = @IsDelete
		WHERE Id = @id;	
END

Go

Create PROCEDURE [dbo].[SP_GrDocumentUpdateFile]
(
	@Id BIGINT,
	@Filename NVARCHAR(MAX) = '',
	@UpdateBy NVARCHAR(MAX) = ''
)
AS
BEGIN
 
	UPDATE dbo.GoodsReceiveDocument
	SET [Filename] = @Filename,
	[UpdateBy] = @Updateby,
	[UpdateDate] = GETDATE()
	WHERE Id = @Id;

END
Go
  
CREATE PROCEDURE [dbo].[sp_get_shippinginstruction_list] 
(
	@Username nvarchar(100),
	@Search nvarchar(100),
	@isTotal bit = 0,
	@sort nvarchar(100) = 'Id',
	@order nvarchar(100) = 'ASC',
	@offset nvarchar(100) = '0',
	@limit nvarchar(100) = '10'
)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @sql nvarchar(max);  
	DECLARE @WhereSql nvarchar(max) = '';
	DECLARE @GroupId nvarchar(100);
	DECLARE @RoleID bigint;
	DECLARE @area NVARCHAR(max);
	DECLARE @role NVARCHAR(max) = ''; 
	SET @sort = 't0.'+@sort;

	select @GroupId = Organization_Name from employee where Employee_Status = 'Active' AND AD_User = @Username;


	SELECT @area = U.Business_Area
		,@role = U.[Role]
	FROM dbo.fn_get_employee_internal_ckb() U
	WHERE U.AD_User = @Username;

	if @role !=''
	BEGIN


	IF (@role !='EMCS IMEX' and @Username !='ict.bpm')
	BEGIN
		SET @WhereSql = ' AND t0.CreateBy='''+@Username+''' ';
	END

	SET @sql = 'SELECT ';
	IF (@isTotal <> 0)
	BEGIN
		SET @sql += 'count(*) total '
	END 
	ELSE
	BEGIN
	
		SET @sql += ' t0.id
						, t0.SlNo
						, t0.IdCL
						, t0.CreateDate
						, t0.CreateBy
						, t8.Referrence
						, t8.BookingNumber
						, t8.BookingDate
						, t8.ETD
						, t8.ETA
						, t8.Status
						, t0.Description	
						, t0.DocumentRequired	
						, t0.SpecialInstruction
						, t0.CreateDate
						, t0.CreateBy	
						, t0.UpdateDate	
						, t0.UpdateBy	
						, t0.IsDelete	
						, t0.PicBlAwb	
						, t0.ExportType

						, CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Employee_Name ELSE t3.FullName END PreparedBy
						, CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Email ELSE t3.Email END Email       
						, STUFF((SELECT '', ''+ISNULL(tx1.EdoNo, ''-'')
							FROM dbo.CargoItem tx0
							JOIN dbo.Cipl tx1 on tx1.id = tx0.IdCipl
							WHERE tx0.IdCargo = tx0.Id
							GROUP BY tx1.EdoNo
							FOR XML PATH(''''),type).value(''.'',''nvarchar(max)''),1,1,'''') [RefEdo]
						, t8.ClNo
						, t8.CargoType '
	END
	SET @sql +=' FROM ShippingInstruction t0
				 JOIN dbo.Cargo t8 on t8.Id = t0.IdCl
				JOIN PartsInformationSystem.dbo.[UserAccess] t3 on t3.UserID = t0.CreateBy
				LEFT JOIN employee t2 on t2.AD_User = t0.CreateBy
				WHERE 1=1 AND t0.IsDelete = 0  AND t8.CargoType != ''''' + @WhereSql+ ' AND (t0.SlNo like ''%'+@Search+'%'' OR t0.IdCl like ''%'+@Search+'%'')';

	IF @isTotal = 0 
	BEGIN
		SET @sql += ' ORDER BY '+@sort+' '+@order+' OFFSET '+@offset+' ROWS FETCH NEXT '+@limit+' ROWS ONLY';
	END 

	print (@sql);
	EXECUTE(@sql);
	END
END

Go



Go

ALTER PROCEDURE [dbo].[sp_get_shippingsummary_list] 
(
	@Username nvarchar(100),
	@Search nvarchar(100),
	@isTotal bit = 0,
	@sort nvarchar(100) = 'Id',
	@order nvarchar(100) = 'ASC',
	@offset nvarchar(100) = '0',
	@limit nvarchar(100) = '10'
)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @sql nvarchar(max);  
	DECLARE @WhereSql nvarchar(max) = '';
	DECLARE @GroupId nvarchar(100);
	DECLARE @RoleID bigint;
	DECLARE @area NVARCHAR(max);
	DECLARE @role NVARCHAR(max) = ''; 
	SET @sort = 'c.'+@sort;

	select @GroupId = Organization_Name from employee where Employee_Status = 'Active' AND AD_User = @Username;


	SELECT @area = U.Business_Area
		,@role = U.[Role]
	FROM dbo.fn_get_employee_internal_ckb() U
	WHERE U.AD_User = @Username;

	if @role !=''
	BEGIN


	IF (@role !='EMCS IMEX' and @Username !='ict.bpm')
	BEGIN
		SET @WhereSql = ' AND c.CreateBy='''+@Username+''' ';
	END

	SET @sql = 'SELECT ';
	IF (@isTotal <> 0)
	BEGIN
		SET @sql += 'count(*) total '
	END 
	ELSE
	BEGIN

		SET @sql += ' c.Id
						, c.SsNo	
						, c.CreateDate
						, c.CreateBy		
						, c.Referrence		
						,cp.ConsigneeName
						, cp.ConsigneeAddress
						,cp.SoldToName
						,cp.SoldToAddress
						, fn.TotalPackage
						, fn.TotalVolume
						, c.ShippingMethod		
						, c.CargoType		
						, c.ClNo		
						, c.SsNo		
						, c.IsDelete		
						, c.ExportType
						, ci.IdCargo
						, COUNT(ci.IdCipl) totalId
						, ci.ContainerNumber	
						, ci.ContainerType	
						, ci.ContainerSealNumber	
						, CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Employee_Name ELSE t3.FullName END PreparedBy
						, CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Email ELSE t3.Email END Email  
						, ci.IdCipl
						, cp.Category  '
	END


	SET @sql +=' from Cargo c
            left join CargoItem ci on c.Id = ci.IdCargo
			left join CiplItem cpi on ci.IdCiplItem = cpi.Id
			left join Cipl cp on cpi.IdCipl = cp.id
			left join fn_get_total_cipl_all()  fn on fn.IdCipl = cpi.IdCipl
			JOIN PartsInformationSystem.dbo.[UserAccess] t3 on t3.UserID = c.CreateBy
			LEFT JOIN employee t2 on t2.AD_User = c.CreateBy
			WHERE 1=1 AND c.IsDelete = 0  ' + @WhereSql+ ' AND  (ci.IdCargo like ''%'+@Search+'%'' OR ci.IdCipl like ''%'+@Search+'%'')
			GROUP BY 
				c.Id
				, c.SsNo	
				, c.CreateDate
				, c.CreateBy		
				, c.Referrence		
				, cp.ConsigneeName
				, cp.ConsigneeAddress
				, cp.SoldToName
				, cp.SoldToAddress
				, fn.TotalPackage
				, fn.TotalVolume
				, c.ShippingMethod	
				, c.CargoType		
				, c.ClNo		
				, c.SsNo		
				, c.IsDelete		
				, c.ExportType
				--, ci.Id
				, ci.IdCargo
				, ci.ContainerNumber	
				, ci.ContainerType	
				, ci.ContainerSealNumber	
				, CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Employee_Name ELSE t3.FullName END 
				, CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Email ELSE t3.Email END 
				, ci.IdCipl
				, cp.Category
				

				HAVING COUNT(ci.IdCipl) > 1
				';

	IF @isTotal = 0 
	BEGIN
		SET @sql += ' ORDER BY '+@sort+' '+@order+' OFFSET '+@offset+' ROWS FETCH NEXT '+@limit+' ROWS ONLY';
	END 

	--PRINT(@sql);

	EXECUTE(@sql);

	END
	
END




Go

update Cargo 
set CargoType = ''
where Id= 1 or Id = 2 or Id = 3 or Id = 4 or Id = 5 or Id = 6 or Id = 7 or Id = 11 or Id = 13 or Id = 16 or Id = 17 or Id = 18 or Id = 23 or Id = 24


Go

ALTER PROCEDURE [dbo].[sp_get_npepeb_list] 
(
	@Username nvarchar(100),
	@Search nvarchar(100),
	@isTotal bit = 0,
	@sort nvarchar(100) = 'Id',
	@order nvarchar(100) = 'ASC',
	@offset nvarchar(100) = '0',
	@limit nvarchar(100) = '10'
)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @sql nvarchar(max);  
	DECLARE @WhereSql nvarchar(max) = '';
	DECLARE @GroupId nvarchar(100);
	DECLARE @RoleID bigint;
	DECLARE @area NVARCHAR(max);
	DECLARE @role NVARCHAR(max) = ''; 
	SET @sort = 't0.'+@sort;

	select @GroupId = Organization_Name from employee where Employee_Status = 'Active' AND AD_User = @Username;


	SELECT @area = U.Business_Area
		,@role = U.[Role]
	FROM dbo.fn_get_employee_internal_ckb() U
	WHERE U.AD_User = @Username;

	if @role !=''
	BEGIN


	IF (@role !='EMCS IMEX' and @Username !='ict.bpm')
	BEGIN
		SET @WhereSql = ' AND t0.CreateBy='''+@Username+''' ';
	END

	SET @sql = 'SELECT ';
	IF (@isTotal <> 0)
	BEGIN
		SET @sql += 'count(*) total '
	END 
	ELSE
	BEGIN
	
		SET @sql += ' t0.Id
						, t0.IdCl
						, t0.AjuNumber
						, t0.AjuDate
						, t0.PebNumber
						, t0.NpeNumber	
						, t0.NpeDate
						, t0.PassPabeanOffice
						, t0.Valuta	
						, CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Employee_Name ELSE t3.FullName END PreparedBy
						, CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Email ELSE t3.Email END Email       
						, STUFF((SELECT '', ''+ISNULL(tx1.EdoNo, ''-'')
							FROM dbo.CargoItem tx0
							JOIN dbo.Cipl tx1 on tx1.id = tx0.IdCipl
							WHERE tx0.IdCargo = tx0.Id
							GROUP BY tx1.EdoNo
							FOR XML PATH(''''),type).value(''.'',''nvarchar(max)''),1,1,'''') [RefEdo]
						, t8.ClNo
						, t8.CargoType '
	END
	SET @sql +='  FROM NpePeb t0
				 JOIN dbo.Cargo t8 on t8.Id = t0.IdCl
				JOIN PartsInformationSystem.dbo.[UserAccess] t3 on t3.UserID = t0.CreateBy
				LEFT JOIN employee t2 on t2.AD_User = t0.CreateBy
				WHERE 1=1 AND t0.IsDelete = 0  AND t8.CargoType != ''''' + @WhereSql+ ' AND (t0.IdCl like ''%'+@Search+'%'' OR t8.ClNo like ''%'+@Search+'%'')';

	IF @isTotal = 0 
	BEGIN
		SET @sql += ' ORDER BY '+@sort+' '+@order+' OFFSET '+@offset+' ROWS FETCH NEXT '+@limit+' ROWS ONLY';
	END 

	Print(@sql);
	EXECUTE(@sql);
	END
END


Go

USE [EMCS]
GO
/****** Object:  StoredProcedure [dbo].[sp_get_blawb_list]    Script Date: 08-04-2022 20:29:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[sp_get_blawb_list] 
(
	@Username nvarchar(100),
	@Search nvarchar(100),
	@isTotal bit = 0,
	@sort nvarchar(100) = 'Id',
	@order nvarchar(100) = 'ASC',
	@offset nvarchar(100) = '0',
	@limit nvarchar(100) = '10'
)
AS
BEGIN
    SET NOCOUNT ON;
    DECLARE @sql nvarchar(max);  
	DECLARE @WhereSql nvarchar(max) = '';
	DECLARE @GroupId nvarchar(100);
	DECLARE @RoleID bigint;
	DECLARE @area NVARCHAR(max);
	DECLARE @role NVARCHAR(max) = ''; 
	SET @sort = 't0.'+@sort;

	select @GroupId = Organization_Name from employee where Employee_Status = 'Active' AND AD_User = @Username;


	SELECT @area = U.Business_Area
		,@role = U.[Role]
	FROM dbo.fn_get_employee_internal_ckb() U
	WHERE U.AD_User = @Username;

	if @role !=''
	BEGIN


	IF (@role !='EMCS IMEX' and @Username !='ict.bpm')
	BEGIN
		SET @WhereSql = ' AND t0.CreateBy='''+@Username+''' ';
	END

	SET @sql = 'SELECT ';
	IF (@isTotal <> 0)
	BEGIN
		SET @sql += 'count(*) total '
	END 
	ELSE
	BEGIN
	
		SET @sql += ' t0.Id
                , t0.IdCl
                , t0.Number
                , t0.MasterBlDate
                , t0.HouseBlNumber
                , t0.HouseBlDate	
                , t0.Publisher
                , CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Employee_Name ELSE t3.FullName END PreparedBy
                , CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Email ELSE t3.Email END Email       
                , STUFF((SELECT '', ''+ISNULL(tx1.EdoNo, ''-'')
                    FROM dbo.CargoItem tx0
                    JOIN dbo.Cipl tx1 on tx1.id = tx0.IdCipl
                    WHERE tx0.IdCargo = tx0.Id
                    GROUP BY tx1.EdoNo
                    FOR XML PATH(''''),type).value(''.'',''nvarchar(max)''),1,1,'''') [RefEdo]
                , t8.ClNo
                , t8.CargoType '
	END
	SET @sql +='  FROM BlAwb t0
				 JOIN dbo.Cargo t8 on t8.Id = t0.IdCl
				JOIN PartsInformationSystem.dbo.[UserAccess] t3 on t3.UserID = t0.CreateBy
				LEFT JOIN employee t2 on t2.AD_User = t0.CreateBy
				WHERE 1=1 AND t0.IsDelete = 0  AND t8.CargoType != ''''' + @WhereSql+ ' AND (t0.Number like ''%'+@Search+'%'' OR t0.HouseBlNumber like ''%'+@Search+'%'')';

	IF @isTotal = 0 
	BEGIN
		SET @sql += ' ORDER BY '+@sort+' '+@order+' OFFSET '+@offset+' ROWS FETCH NEXT '+@limit+' ROWS ONLY';
	END 

	--select @sql;
	EXECUTE(@sql);
	END
END

Go



Go

Alter Table CiplForwader
Add  ExportShipmentType Nvarchar(max) null
Go

ALTER PROCEDURE [dbo].[SP_CiplUpdate]
(
	@id bigint,
	@Category NVARCHAR(100),
	@CategoryItem NVARCHAR(50),
	@ExportType NVARCHAR(100),
	@ExportTypeItem NVARCHAR(50),
	@SoldConsignee NVARCHAR(30),
	@SoldToName NVARCHAR(200),
	@SoldToAddress NVARCHAR(MAX),
	@SoldToCountry NVARCHAR(100),
	@SoldToTelephone NVARCHAR(100),
	@SoldToFax NVARCHAR(100),
	@SoldToPic NVARCHAR(200),
	@SoldToEmail NVARCHAR(200),
	@ShipDelivery NVARCHAR(30),
	@ConsigneeName NVARCHAR(200),
	@ConsigneeAddress NVARCHAR(MAX),
	@ConsigneeCountry NVARCHAR(100),
	@ConsigneeTelephone NVARCHAR(100),
	@ConsigneeFax NVARCHAR(100),
	@ConsigneePic NVARCHAR(200),
	@ConsigneeEmail NVARCHAR(200),
	@NotifyName NVARCHAR(200),
	@NotifyAddress NVARCHAR(MAX),
	@NotifyCountry NVARCHAR(100),
	@NotifyTelephone NVARCHAR(100),
	@NotifyFax NVARCHAR(100),
	@NotifyPic NVARCHAR(200),
	@NotifyEmail NVARCHAR(200),
	@ConsigneeSameSoldTo BIGINT,
	@NotifyPartySameConsignee BIGINT,
	@Area NVARCHAR(100),
	@Branch NVARCHAR(100),
	@Currency NVARCHAR(20),
	@Rate DECIMAL(18,2),
	@PaymentTerms NVARCHAR(50),
	@ShippingMethod NVARCHAR(30),
	@CountryOfOrigin NVARCHAR(30),
	@LcNoDate NVARCHAR(30),
	@IncoTerm NVARCHAR(50),
	@FreightPayment NVARCHAR(30),
	@ShippingMarks NVARCHAR(MAX),
	@Remarks NVARCHAR(200),
	@SpecialInstruction NVARCHAR(MAX),
	@CreateBy NVARCHAR(50),
	@CreateDate datetime,
	@UpdateBy NVARCHAR(50),
	@UpdateDate datetime,
	@Status NVARCHAR(10),
	@IsDelete BIT,
	@LoadingPort NVARCHAR(200),
    @DestinationPort NVARCHAR(200),
	@PickUpPic NVARCHAR(200),
	@PickUpArea NVARCHAR(200),
	@CategoryReference NVARCHAR(50),
	@ReferenceNo NVARCHAR(50),
	@Consolidate NVARCHAR(20),
	@Forwader NVARCHAR(200),
	@BranchForwarder NVARCHAR(200),
	@Attention NVARCHAR(200),
	@Company NVARCHAR(200),
	@SubconCompany NVARCHAR(200),
	@Address NVARCHAR(MAX),
	@AreaForwarder NVARCHAR(100),
	@City NVARCHAR(100),
	@PostalCode NVARCHAR(100),
	@Contact NVARCHAR(200),
	@FaxNumber NVARCHAR(200),
	@Forwading NVARCHAR(200),
	@Email NVARCHAR(200),
	@Type VARCHAR(10),
	@ExportShipmentType NVARCHAR(Max)
)
AS
BEGIN
	UPDATE dbo.Cipl 
    SET Category = @Category 
        ,CategoriItem = @CategoryItem
        ,ExportType = @ExportType
        ,ExportTypeItem = @ExportTypeItem
        ,SoldConsignee = @SoldConsignee
        ,SoldToName = @SoldToName
        ,SoldToAddress = @SoldToAddress
        ,SoldToCountry = @SoldToCountry
        ,SoldToTelephone = @SoldToTelephone
        ,SoldToFax = @SoldToFax
        ,SoldToPic = @SoldToPic
        ,SoldToEmail = @SoldToEmail
        ,ShipDelivery = @ShipDelivery
        ,ConsigneeName = @ConsigneeName
        ,ConsigneeAddress = @ConsigneeAddress
        ,ConsigneeCountry = @ConsigneeCountry
        ,ConsigneeTelephone = @ConsigneeTelephone
        ,ConsigneeFax = @ConsigneeFax
        ,ConsigneePic = @ConsigneePic
        ,ConsigneeEmail = @ConsigneeEmail
        ,NotifyName = @NotifyName
        ,NotifyAddress = @NotifyAddress
        ,NotifyCountry = @NotifyCountry
        ,NotifyTelephone = @NotifyTelephone
        ,NotifyFax = @NotifyFax
        ,NotifyPic = @NotifyPic
        ,NotifyEmail = @NotifyEmail
        ,ConsigneeSameSoldTo = @ConsigneeSameSoldTo
        ,NotifyPartySameConsignee = @NotifyPartySameConsignee
        ,Area = @Area
        ,Branch = @Branch
        ,Currency = @Currency
        ,PaymentTerms = @PaymentTerms
        ,ShippingMethod = @ShippingMethod
        ,CountryOfOrigin = @CountryOfOrigin
        ,LcNoDate = @LcNoDate
        ,IncoTerm = @IncoTerm
        ,FreightPayment = @FreightPayment
        ,ShippingMarks = @ShippingMarks
        ,Remarks = @Remarks
        ,SpecialInstruction = @SpecialInstruction
        ,UpdateBy = @UpdateBy
        ,UpdateDate = @UpdateDate
        ,IsDelete = @IsDelete
        ,LoadingPort = @LoadingPort
        ,DestinationPort = @DestinationPort
        ,PickUpPic = @PickUpPic
        ,PickUpArea = @PickUpArea
        ,CategoryReference = @CategoryReference
        ,ReferenceNo = @ReferenceNo
        ,Consolidate = @Consolidate
	WHERE id = @id;

	UPDATE dbo.CiplForwader
	SET Forwader = @Forwader
		,Branch = @BranchForwarder
		,Attention = @Attention
		,Company = @Company
		,SubconCompany = @SubconCompany
		,Address = @Address
		,Area = @AreaForwarder
		,City = @City
		,PostalCode = @PostalCode
		,Contact = @Contact
		,FaxNumber = @FaxNumber
		,Forwading = @Forwading
		,Email = @Email
		,UpdateBy = @UpdateBy
		,UpdateDate = @UpdateDate
        ,IsDelete = @IsDelete
		,[Type]=@Type
		,ExportShipmentType=@ExportShipmentType 
	WHERE IdCipl = @id;

	DECLARE @GETCATEGORY nvarchar(2)
	
	SELECT @GETCATEGORY = 
		CASE
			WHEN C.Category = 'CATERPILLAR NEW EQUIPMENT' THEN 'PP'
			WHEN C.Category = 'CATERPILLAR SPAREPARTS' THEN 'SP'
			WHEN C.Category = 'CATERPILLAR USED EQUIPMENT' THEN 'UE'
			WHEN C.Category = 'MISCELLANEOUS' THEN 'MC'
		ELSE Null
		END 
		FROM Cipl C WHERE C.id = @id
	EXEC [dbo].[sp_update_request_cipl] @id, @UpdateBy, @Status, ''

END
Go

ALTER PROCEDURE [dbo].[SP_CiplInsert]
(
  @Category NVARCHAR(100),
  @CategoryItem NVARCHAR(50),
  @ExportType NVARCHAR(100),
  @ExportTypeItem NVARCHAR(100),
  @SoldConsignee NVARCHAR(30),
  @SoldToName NVARCHAR(200),
  @SoldToAddress NVARCHAR(MAX),
  @SoldToCountry NVARCHAR(100),
  @SoldToTelephone NVARCHAR(100),
  @SoldToFax NVARCHAR(100),
  @SoldToPic NVARCHAR(200),
  @SoldToEmail NVARCHAR(200),
  @ShipDelivery NVARCHAR(30),
  @ConsigneeName NVARCHAR(200),
  @ConsigneeAddress NVARCHAR(MAX),
  @ConsigneeCountry NVARCHAR(100),
  @ConsigneeTelephone NVARCHAR(100),
  @ConsigneeFax NVARCHAR(100),
  @ConsigneePic NVARCHAR(200),
  @ConsigneeEmail NVARCHAR(200),
  @NotifyName NVARCHAR(200),
  @NotifyAddress NVARCHAR(MAX),
  @NotifyCountry NVARCHAR(100),
  @NotifyTelephone NVARCHAR(100),
  @NotifyFax NVARCHAR(100),
  @NotifyPic NVARCHAR(200),
  @NotifyEmail NVARCHAR(200),
  @ConsigneeSameSoldTo BIGINT,
  @NotifyPartySameConsignee BIGINT,
  @Area NVARCHAR(100),
  @Branch NVARCHAR(100),
  @Currency NVARCHAR(20),
  @Rate DECIMAL(18,2),
  @PaymentTerms NVARCHAR(50),
  @ShippingMethod NVARCHAR(30),
  @CountryOfOrigin NVARCHAR(200),
  @LcNoDate NVARCHAR(200),
  @IncoTerm NVARCHAR(50),
  @FreightPayment NVARCHAR(30),
  @ShippingMarks NVARCHAR(MAX),
  @Remarks NVARCHAR(200),
  @SpecialInstruction NVARCHAR(MAX),
  @CreateBy NVARCHAR(50),
  @CreateDate datetime,
  @UpdateBy NVARCHAR(50),
  @UpdateDate datetime,
  @Status NVARCHAR(10),
  @IsDelete BIT,
  @LoadingPort NVARCHAR(200),
  @DestinationPort NVARCHAR(200),
  @PickUpPic NVARCHAR(200),
  @PickUpArea NVARCHAR(200),
  @CategoryReference NVARCHAR(50),
  @ReferenceNo NVARCHAR(50),
  @Consolidate NVARCHAR(10),
  @Forwader NVARCHAR(200),
  @BranchForwarder NVARCHAR(200),
  @Attention NVARCHAR(200),
  @Company NVARCHAR(200),
  @SubconCompany NVARCHAR(200),
  @Address NVARCHAR(MAX),
  @AreaForwarder NVARCHAR(100),
  @City NVARCHAR(100),
  @PostalCode NVARCHAR(100),
  @Contact NVARCHAR(200),
  @FaxNumber NVARCHAR(200),
  @Forwading NVARCHAR(200),
  @Email NVARCHAR(200),
  @Type NVARCHAR(10),
  @ExportShipmentType NVARCHAR(Max)
  --@LASTCIPLID bigint output
)
AS
BEGIN
  DECLARE @LASTID bigint
  INSERT INTO [dbo].[Cipl]
        ([Category]
        ,[CategoriItem]
        ,[ExportType]
        ,[ExportTypeItem]
        ,[SoldConsignee]
        ,[SoldToName]
        ,[SoldToAddress]
        ,[SoldToCountry]
        ,[SoldToTelephone]
        ,[SoldToFax]
        ,[SoldToPic]
        ,[SoldToEmail]
        ,[ShipDelivery]
        ,[ConsigneeName]
        ,[ConsigneeAddress]
        ,[ConsigneeCountry]
        ,[ConsigneeTelephone]
        ,[ConsigneeFax]
        ,[ConsigneePic]
        ,[ConsigneeEmail]
        ,[NotifyName]
        ,[NotifyAddress]
        ,[NotifyCountry]
        ,[NotifyTelephone]
        ,[NotifyFax]
        ,[NotifyPic]
        ,[NotifyEmail]
        ,[ConsigneeSameSoldTo]
        ,[NotifyPartySameConsignee]
        ,[Area]
        ,[Branch]
        ,[Currency]
        ,[Rate]
        ,[PaymentTerms]
        ,[ShippingMethod]
        ,[CountryOfOrigin]
        ,[LcNoDate]
        ,[IncoTerm]
        ,[FreightPayment]
        ,[ShippingMarks]
        ,[Remarks]
        ,[SpecialInstruction]
        ,[CreateBy]
        ,[CreateDate]
        ,[UpdateBy]
        ,[UpdateDate]
        ,[IsDelete]
        ,[LoadingPort]
        ,[DestinationPort]
        ,[PickUpPic]
        ,[PickUpArea]
        ,[CategoryReference]
        ,[ReferenceNo]
        ,[Consolidate]
    )
     VALUES
        (@Category
        ,@CategoryItem
        ,@ExportType
        ,@ExportTypeItem
        ,@SoldConsignee
        ,@SoldToName
        ,@SoldToAddress
        ,@SoldToCountry
        ,@SoldToTelephone
        ,@SoldToFax
        ,@SoldToPic
        ,@SoldToEmail
        ,@ShipDelivery
        ,@ConsigneeName
        ,@ConsigneeAddress
        ,@ConsigneeCountry
        ,@ConsigneeTelephone
        ,@ConsigneeFax
        ,@ConsigneePic
        ,@ConsigneeEmail
        ,@NotifyName
        ,@NotifyAddress
        ,@NotifyCountry
        ,@NotifyTelephone
        ,@NotifyFax
        ,@NotifyPic
        ,@NotifyEmail
        ,@ConsigneeSameSoldTo
        ,@NotifyPartySameConsignee
        ,@Area
        ,@Branch
        ,@Currency
        ,@Rate
        ,@PaymentTerms
        ,@ShippingMethod
        ,@CountryOfOrigin
        ,@LcNoDate
        ,@IncoTerm
        ,@FreightPayment
        ,@ShippingMarks
        ,@Remarks
        ,@SpecialInstruction
        ,@CreateBy
        ,@CreateDate
        ,@UpdateBy
        ,@UpdateDate
        ,@IsDelete
        ,@LoadingPort
        ,@DestinationPort
        ,@PickUpPic
        ,@PickUpArea
        ,@CategoryReference
        ,@ReferenceNo
        ,@Consolidate)

  SET @LASTID = CAST(SCOPE_IDENTITY() as bigint)
  --SET @LASTCIPLID =@LASTID
  INSERT INTO [dbo].[CiplForwader](
        [IdCipl]
        ,[Forwader]
        ,[Branch]
        ,[Attention]
        ,[Company]
        ,[SubconCompany]
        ,[Address]
        ,[Area]
        ,[City]
        ,[PostalCode]
        ,[Contact]
        ,[FaxNumber]
        ,[Forwading]
        ,[Email]
        ,[CreateBy]
        ,[CreateDate]
        ,[UpdateBy]
        ,[UpdateDate]
        ,[IsDelete]
        ,[Type]
        ,[ExportShipmentType]
    )
     VALUES (
        @LASTID
        ,@Forwader
        ,@BranchForwarder
        ,@Attention
        ,@Company
        ,@SubconCompany
        ,@Address
        ,@AreaForwarder
        ,@City
        ,@PostalCode	

        ,@Contact
        ,@FaxNumber
        ,@Forwading
        ,@Email
        ,@CreateBy
        ,@CreateDate
        ,@UpdateBy
        ,@UpdateDate
        ,@IsDelete
        ,@Type
        ,@ExportShipmentType)



  EXEC dbo.GenerateCiplNumber @LASTID, @CreateBy;

  DECLARE @CIPLNO nvarchar(20), @GETCATEGORY nvarchar(2)
  
  SELECT @GETCATEGORY = 
    CASE
      WHEN C.Category = 'CATERPILLAR NEW EQUIPMENT' THEN 'PP'
      WHEN C.Category = 'CATERPILLAR SPAREPARTS' THEN 'SP'
      WHEN C.Category = 'CATERPILLAR USED EQUIPMENT' THEN 'UE'
	  WHEN C.Category = 'MISCELLANEOUS' THEN 'MC'
    ELSE Null
    END 
    FROM Cipl C WHERE C.id = @LASTID
    
  EXEC dbo.sp_insert_request_data @LASTID, 'CIPL', @GETCATEGORY, @Status, 'CREATE';

END
Go

create procedure [dbo].[SP_GetSiExportShipmentType] (
    @IdCL bigint
)
AS
BEGIN
    select * from  CargoCipl  cc 
    join CiplForwader cf on cf.IdCipl = cc.IdCipl
    where cc.IdCargo = @IdCL
END 
GO

-- =============================================    
-- Author:                            Ali Mutasal    
-- ALTER date: 09 Des 2019    
-- Description:    Function untuk melakukan proses email    
-- =============================================    
ALTER FUNCTION [dbo].[fn_proccess_email_template]    
(    
                -- Add the parameters for the function here    
                @requestType nvarchar(100) = 'CIPL',    
                @requestId nvarchar(100) = '',    
                @template nvarchar(max) = '',    
    @typeDoc nvarchar(max) = '',    
    @lastPIC nvarchar(max) = ''    
)    
RETURNS nvarchar(max)    
AS    
BEGIN    
     
     
                ------------------------------------------------------------------    
                -- 1. Melakukan Declare semua variable yang dibutuhkan    
                ------------------------------------------------------------------    
                BEGIN    
            
                                -- ini hanya sample silahkan comment jika akan digunakan    
                                --SET @template = 'Ini adalah email dari [requestor_name], dan ini adalah email untuk [last_pic_name]. selanjutnya akan dikirim ke [next_pic_name]';    
                                DECLARE @variable_table TABLE (    
                                    key_data VARCHAR(MAX) NULL,    
                                    val_data VARCHAR(MAX) NULL    
                                );    
    
                                DECLARE     
                                                @key NVARCHAR(MAX),     
                                                @flow NVARCHAR(MAX),     
                                                @val NVARCHAR(MAX),    
                                                @requestor_name NVARCHAR(MAX),    
                                                @requestor_id NVARCHAR(MAX),    
                                                @requestor_username NVARCHAR(MAX),    
                                                @last_pic_name NVARCHAR(MAX),    
                                                @last_pic_id NVARCHAR(MAX),    
                                                @last_pic_username NVARCHAR(MAX),    
                                                @next_pic_name NVARCHAR(MAX),    
                                                @next_pic_id NVARCHAR(MAX),    
                                                @next_pic_username NVARCHAR(MAX),    
                                                @si_number NVARCHAR(MAX) = '',    
                                                @ss_number NVARCHAR(MAX) = '',    
                                                @req_number NVARCHAR(MAX) = '',    
    
            @CiplNo NVARCHAR(MAX) = '',    
            @DO NVARCHAR(MAX) = '',    
            @DA NVARCHAR(MAX) = '',    
            @NoReference NVARCHAR(MAX) = '',    
            @CIPLBranchName NVARCHAR(MAX) = '',    
    
            @PICPickupPoints NVARCHAR(MAX) = '',    
            @PickupPointsArea NVARCHAR(MAX) = '',    
                                                @npe_number NVARCHAR(MAX) = '',    
                                                @peb_number NVARCHAR(MAX) = '',    
                                                @bl_awb_number NVARCHAR(MAX) = '',    
                                                @req_date NVARCHAR(MAX) = '',    
                                                @superior_req_name nvarchar(max) = '',    
                                                @superior_req_id nvarchar(max) = '',    
            @employee_name nvarchar(max) = ''    
                
        IF (@lastPIC <> '')    
        BEGIN    
         SELECT @employee_name = employee_name     
         FROM dbo.fn_get_employee_internal_ckb()     
         WHERE AD_User = @lastPIC;    
        END    
                END    
                    
                ------------------------------------------------------------------    
                -- 2. Query untuk mengisi data ke variable variable yang dibutuhkan    
                ------------------------------------------------------------------    
                BEGIN    
                 -- Mengambil data dari fn request per flow    
                                BEGIN    
                                                IF (@requestType = 'CIPL')    
                                                BEGIN    
                                                                SET @flow = 'CIPL';    
                   SELECT     
                                                                                @requestor_id = t1.Employee_ID,    
                                                                                @requestor_name = t1.Employee_Name,    
                    @superior_req_name = t1.Superior_Name,    
                                                                                @superior_req_id = t1.Superior_ID,    
                                                                                @requestor_username = t1.AD_User,    
                                                                                @last_pic_id = t2.Employee_ID,    
                                                                                @last_pic_name = t2.Employee_Name,    
                                                                                @last_pic_username = t2.AD_User,    
                                                                                @next_pic_id = t3.Employee_ID,    
                        
                    @CiplNo = t4.CiplNo,    
                    @DA = t4.Da ,    
                    @NoReference = t4.ReferenceNo,    
                    @CIPLBranchName = (SELECT C.Branch+' - '+MA.BAreaName FROM MasterArea MA inner join Cipl C ON C.Branch = MA.BAreaCode WHERE C.id=t0.IdCipl ),    
                    @PICPickupPoints = t4.PickUpPic,    
                    @PickupPointsArea = t4.PickUpArea,    
                                                                                @next_pic_name =     
                                                                                                CASE    
                                                                                                                WHEN t0.Status = 'Revise' OR t0.Status = 'Reject' OR (t0.Status = 'Approve' AND t0.NextAssignType IS NULL) THEN t5.Employee_Name    
                                                                                                                WHEN t0.NextAssignType = 'Group' THEN t0.NextAssignTo    
                                                                                                                ELSE t3.Employee_Name    
                                                                                                END,    
                                                                                @next_pic_username = t3.AD_User,    
                                                                                @req_number = IIF(@typeDoc = 'CKB', ISNULL(t4.EdoNo,''), t4.CiplNo),    
                                                                                @req_date = RIGHT('0' + DATENAME(DAY, t0.CreateDate), 2) + ' ' + DATENAME(MONTH, t0.CreateDate)+ ' ' + DATENAME(YEAR, t0.CreateDate)    
                                                                FROM     
                                                                                dbo.fn_get_cipl_request_list_all() t0     
                                                                                INNER JOIN dbo.Cipl t4 on t4.id = t0.IdCipl    
                                                                                LEFT JOIN dbo.fn_get_employee_internal_ckb() t1 on t1.AD_User = t0.CreateBy    
                                                                                LEFT JOIN dbo.fn_get_employee_internal_ckb() t2 on t2.AD_User = t0.Pic    
                                                                                LEFT JOIN dbo.fn_get_employee_internal_ckb() t3 on t3.AD_User = t0.NextAssignTo    
                                    LEFT JOIN dbo.fn_get_employee_internal_ckb() t5 on t5.AD_User = t0.UpdateBy    
                                                                WHERE     
                                                    t0.IdCipl = @requestId;    
                                                END    
    
                                                --IF (@requestType IN ('CL', 'BLAWB', 'PEB_NPE'))    
            IF (@requestType = 'CL') OR (@requestType = 'BLAWB') OR (@requestType = 'PEB_NPE')     
                                                BEGIN    
                                                                SET @flow = @requestType;    
                                                                SELECT     
                                                                                @requestor_id = t5.Employee_ID,    
                                                                                @requestor_name = t5.Employee_Name,    
                                                                                @superior_req_name = t5.Superior_Name,    
                                                                       @superior_req_id = t5.Superior_ID,    
                                                                                @requestor_username = t5.AD_User,    
                                                                                @last_pic_id = t6.Employee_ID,    
                                                                                @last_pic_name = t6.Employee_Name,    
                                                                                @last_pic_username = t6.AD_User,    
                                                                                @next_pic_id = t7.Employee_ID,    
                                                                                @next_pic_name = t7.Employee_Name,    
                                                                                @next_pic_username = t7.AD_User,    
                                                                                @req_number = t1.ClNo,    
                                                                                @ss_number = t1.SsNo,    
                                                                                @si_number = t2.SlNo,    
                                                                                @npe_number = t3.NpeNumber,    
                                                                                @peb_number = t3.PebNumber,    
                    @DO = (SELECT STRING_AGG(EdoNumber, ', ')     
                    FROM CargoCipl WHERE IdCargo = t0.IdCl),    
                    @CIPLBranchName = 
					(SELECT C.Branch+' - '+MA.BAreaName FROM MasterArea MA inner join Cipl C ON C.Branch = MA.BAreaCode WHERE C.id in (SELECT IdCipl FROM CargoCipl     
                    where IdCargo = t0.IdCl)),    
                    @DA = (SELECT STRING_AGG(Da, ', ')     
                    FROM Cipl WHERE id     
                    in (SELECT IdCipl FROM CargoCipl     
                    where IdCargo = t0.IdCl)),    
                    @CiplNo = (SELECT STRING_AGG(CiplNo, ', ')     
                    FROM Cipl WHERE id     
                    in (SELECT IdCipl FROM CargoCipl     
                    where IdCargo = t0.IdCl)),    
                                                                                @bl_awb_number = t4.Number,    
                                                                                @req_date = RIGHT('0' + DATENAME(DAY, t0.CreateDate), 2) + ' ' + DATENAME(MONTH, t0.CreateDate)+ ' ' + DATENAME(YEAR, t0.CreateDate)    
                                                                FROM     
                                                                                dbo.fn_get_cl_request_list_all() t0     
                                                                                INNER JOIN dbo.Cargo t1 on t1.id = t0.IdCl    
                                                                           INNER JOIN dbo.ShippingInstruction t2 on t2.IdCL = t0.IdCl    
                                                                                LEFT JOIN dbo.NpePeb t3 on t3.IdCL = t0.IdCl    
                                                                  LEFT JOIN dbo.BlAwb t4 on t4.IdCL = t0.IdCl    
                                                                                LEFT JOIN dbo.fn_get_employee_internal_ckb() t5 on t5.AD_User = t0.CreateBy    
                                                                                LEFT JOIN dbo.fn_get_employee_internal_ckb() t6 on t6.AD_User = t0.Pic    
                                                                                LEFT JOIN dbo.fn_get_employee_internal_ckb() t7 on t7.AD_User = t0.NextAssignTo    
                                                                WHERE     
                                                                                t0.IdCl = @requestId;                                                                         
                                                END    
    
                                                IF (@requestType = 'RG')    
                                                BEGIN    
                                                                SET @flow = 'Receive Goods';    
                                                                SELECT     
                                                                                @requestor_id = t1.Employee_ID,    
                                                                                @requestor_name = t1.Employee_Name,    
                                                                                @superior_req_name = t1.Superior_Name,    
                                                                                @superior_req_id = t1.Superior_ID,    
																				@requestor_username = t1.AD_User,    
                                                                                @last_pic_id = t2.Employee_ID,    
                                                                                @last_pic_name = t2.Employee_Name,    
                                                                                @last_pic_username = t2.AD_User,    
                                                                                @next_pic_id = t3.Employee_ID,    
                                                                                @next_pic_name = t3.Employee_Name,    
                                                                                @next_pic_username = t3.AD_User,    
                                                                                @req_number = t4.GrNo,    
                                                                                @req_date = RIGHT('0' + DATENAME(DAY, t0.CreateDate), 2) + ' ' + DATENAME(MONTH, t0.CreateDate)+ ' ' + DATENAME(YEAR, t0.CreateDate)    
                                                                FROM     
                                                                                dbo.fn_get_gr_request_list_all() t0     
                                                                                INNER JOIN dbo.GoodsReceive t4 on t4.id = t0.IdGr    
                                                                                LEFT JOIN dbo.fn_get_employee_internal_ckb() t1 on t1.AD_User = t0.CreateBy    
                                                                                LEFT JOIN dbo.fn_get_employee_internal_ckb() t2 on t2.AD_User = t0.Pic    
                                                                                LEFT JOIN dbo.fn_get_employee_internal_ckb() t3 on t3.AD_User = t0.NextAssignTo    
                                                                WHERE     
                        t0.IdGr = @requestId;    
                                                END    
    
                                                IF (@requestType = 'DELEGATION')    
                                                BEGIN    
                                                                SET @flow = 'Delegation';                                                                  --SELECT * FROM dbo.fn_get_gr_request_list_all() t0 where t0.Id = @requestId;    
                                                END    
    
                                                INSERT     
                                                                INTO     
                                                                                @variable_table     
                                                                VALUES     
                                                                                 ('@RequestorName', ISNULL(@requestor_name, '-'))    
                                                                                ,('@RequestNo', ISNULL(@req_number, '-'))    
                                                                                ,('@CreatedDate', ISNULL(@req_date, '-'))    
                    ,('@CiplNo', ISNULL(@CiplNo, '-'))    
                    ,('@CIPLBranchName', ISNULL(@CIPLBranchName, '-'))    
                    ,('@PICPickupPoints', ISNULL(@PICPickupPoints, '-'))    
      ,('@DO', ISNULL(@DO, '-'))    
       ,('@DA', ISNULL(@DA, '-'))    
                    ,('@PickupPointsArea', ISNULL(@PickupPointsArea, '-'))    
                                                                                ,('@SuperiorEmpID', ISNULL(@superior_req_id, '-'))    
                                                                                ,('@SuperiorName', ISNULL(@superior_req_name, '-'))    
                                                                                ,('@MobileLink', 'http://pis.trakindo.co.id')    
                                                                                ,('@DesktopLink', 'http://pis.trakindo.co.id')    
                                                                                ,('@ApproverPosition', ISNULL(@flow, '-'))    
                                                                                ,('@ApproverName', ISNULL(@next_pic_name, ISNULL(@employee_name,'-')))    
                                                                                ,('@RequestorEmpID', ISNULL(@requestor_id, '-'))    
                                                                                ,('@flow', ISNULL(@flow, '-'))    
                                                                                ,('@requestor_name', ISNULL(@requestor_name, '-'))    
                                                                                ,('@requestor_id', ISNULL(@requestor_id, '-'))    
                                                                                ,('@last_pic_name', ISNULL(@last_pic_name, '-'))    
                                                                                ,('@last_pic_id', ISNULL(@last_pic_id, '-'))    
                                                                                ,('@next_pic_name', ISNULL(@next_pic_name, '-'))    
                                                                                ,('@next_pic_id', ISNULL(@next_pic_id, '-'))    
                                                                                ,('@si_number', ISNULL(@si_number, '-'))    
                                                                                ,('@ss_number', ISNULL(@ss_number, '-'))    
                                                                                ,('@req_number', ISNULL(@req_number, '-'))    
                                                                                ,('@npe_number', ISNULL(@npe_number, '-'))    
           ,('@peb_number', ISNULL(@peb_number, '-'))    
                                                                                ,('@bl_awb_number', ISNULL(@bl_awb_number, '-'))    
                                                                                ,('@req_date', ISNULL(@req_date, '-'))    
                                                                                ,('@superior_req_name', ISNULL(@superior_req_name, '-'))    
                                               ,('@superior_req_id', ISNULL(@superior_req_id, '-'))    
                                END    
                END    
                    
                ------------------------------------------------------------------    
                -- 3. Melakukan Replace terhadap data yang di petakan di template dgn menggunakan perulangan    
                ------------------------------------------------------------------    
                BEGIN    
                                DECLARE cursor_variable CURSOR    
                                FOR     
                                                SELECT     
                                                                key_data,     
                                                                val_data     
                                                FROM     
                                                                @variable_table;    
                                                                                                    
                                OPEN cursor_variable;     
                                FETCH NEXT FROM cursor_variable INTO @key, @val;     
                                WHILE @@FETCH_STATUS = 0    
                                    BEGIN    
                                                                -- Melakukan Replace terhadap variable di template dengan value dari hasil pencarian data diata.    
                                                                IF ISNULL(@key, '') <> ''    
                                                                BEGIN    
          SET @template = REPLACE(@template, @key, @val);    
                                                   END    
    
                                                                FETCH NEXT FROM cursor_variable INTO     
                                            @key,     
                                           @val;    
                                    END;    
                                    
                                CLOSE cursor_variable;     
                                DEALLOCATE cursor_variable;    
                END    
                    
                ------------------------------------------------------------------    
                -- 4. Menampilkan hasil dari proses replace    
                ------------------------------------------------------------------    
                BEGIN    
                                RETURN @template;    
                END    
END    
    
============== Master Menu & Role Access Menu ==========================================
GO
INSERT [dbo].[Master_Menu] ([ID], [ParentID], [Name], [URL], [OrderNo], [Icon], [isDefault], [isActive], [EntryDate], [ModifiedDate], [EntryBy], [ModifiedBy]) VALUES (242, 126, N'Shipping Instruction List', N'EMCS/ShippingInstructionList', 5, N'fa fa-check-square', 0, 1, CAST(N'2022-04-11T12:24:59.937' AS DateTime), NULL, N'ict.bpm', NULL)
GO
INSERT [dbo].[Master_Menu] ([ID], [ParentID], [Name], [URL], [OrderNo], [Icon], [isDefault], [isActive], [EntryDate], [ModifiedDate], [EntryBy], [ModifiedBy]) VALUES (243, 126, N'Shipping Summary List', N'EMCS/ShippingSummaryList', 6, N'fa fa-cubes', 0, 1, CAST(N'2022-04-11T12:25:27.827' AS DateTime), CAST(N'2022-04-11T12:25:27.827' AS DateTime), N'ict.bpm', N'ict.bpm')
GO
INSERT [dbo].[Master_Menu] ([ID], [ParentID], [Name], [URL], [OrderNo], [Icon], [isDefault], [isActive], [EntryDate], [ModifiedDate], [EntryBy], [ModifiedBy]) VALUES (244, 126, N'Peb & Npe List', N'EMCS/NpePebList', 7, N'fa fa-check-square', 0, 1, CAST(N'2022-04-11T12:27:49.660' AS DateTime), NULL, N'ict.bpm', NULL)
GO
INSERT [dbo].[Master_Menu] ([ID], [ParentID], [Name], [URL], [OrderNo], [Icon], [isDefault], [isActive], [EntryDate], [ModifiedDate], [EntryBy], [ModifiedBy]) VALUES (245, 126, N'BL & AWB List', N'EMCS/BLAWBList', 7, N'fa fa-check-square', 0, 1, CAST(N'2022-04-11T12:28:55.650' AS DateTime), NULL, N'ict.bpm', NULL)
GO


/* INSERT QUERY NO: 164 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
11, 24, 242, 1, 1, 1, 1
);


/* INSERT QUERY NO: 164 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12, 24, 243, 1, 1, 1, 1
);


/* INSERT QUERY NO: 164 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
13, 24, 244, 1, 1, 1, 1
);


/* INSERT QUERY NO: 164 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
14, 24, 245, 1, 1, 1, 1
);


/* INSERT QUERY NO: 1 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12455, 1, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 2 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12456, 2, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 3 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12457, 3, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 4 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12458, 4, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 5 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12459, 5, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 6 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12460, 6, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 7 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12461, 7, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 8 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12462, 8, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 9 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12463, 9, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 10 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12464, 10, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 11 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12465, 11, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 12 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12466, 12, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 13 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12467, 13, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 14 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12468, 14, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 15 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12469, 15, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 16 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12470, 16, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 17 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12471, 17, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 18 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12472, 18, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 19 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12473, 19, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 20 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12474, 20, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 21 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12475, 21, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 22 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12476, 22, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 23 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12477, 23, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 24 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12478, 25, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 25 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12479, 26, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 26 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12480, 27, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 27 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12481, 40, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 28 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12482, 41, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 29 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12483, 42, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 30 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12484, 43, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 31 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12485, 44, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 32 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12486, 45, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 33 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12487, 46, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 34 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12488, 47, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 35 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12489, 48, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 36 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12490, 49, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 37 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12491, 50, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 38 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12492, 51, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 39 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12493, 52, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 40 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12494, 53, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 41 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12495, 54, 244, 1, 1, 1, 1
);

/* INSERT QUERY NO: 42 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12496, 1, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 43 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12497, 2, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 44 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12498, 3, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 45 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12499, 4, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 46 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12500, 5, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 47 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12501, 6, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 48 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12502, 7, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 49 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12503, 8, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 50 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12504, 9, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 51 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12505, 10, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 52 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12506, 11, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 53 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12507, 12, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 54 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12508, 13, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 55 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12509, 14, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 56 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12510, 15, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 57 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12511, 16, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 58 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12512, 17, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 59 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12513, 18, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 60 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12514, 19, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 61 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12515, 20, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 62 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12516, 21, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 63 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12517, 22, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 64 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12518, 23, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 65 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12519, 25, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 66 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12520, 26, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 67 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12521, 27, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 68 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12522, 40, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 69 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12523, 41, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 70 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12524, 42, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 71 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12525, 43, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 72 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12526, 44, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 73 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12527, 45, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 74 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12528, 46, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 75 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12529, 47, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 76 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12530, 48, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 77 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12531, 49, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 78 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12532, 50, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 79 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12533, 51, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 80 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12534, 52, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 81 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12535, 53, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 82 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12536, 54, 245, 1, 1, 1, 1
);

/* INSERT QUERY NO: 83 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12537, 1, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 84 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12538, 2, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 85 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12539, 3, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 86 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12540, 4, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 87 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12541, 5, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 88 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12542, 6, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 89 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12543, 7, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 90 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12544, 8, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 91 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12545, 9, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 92 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12546, 10, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 93 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12547, 11, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 94 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12548, 12, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 95 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12549, 13, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 96 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12550, 14, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 97 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12551, 15, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 98 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12552, 16, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 99 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12553, 17, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 100 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12554, 18, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 101 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12555, 19, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 102 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12556, 20, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 103 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12557, 21, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 104 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12558, 22, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 105 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12559, 23, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 106 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12560, 25, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 107 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12561, 26, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 108 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12562, 27, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 109 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12563, 40, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 110 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12564, 41, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 111 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12565, 42, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 112 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12566, 43, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 113 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12567, 44, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 114 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12568, 45, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 115 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12569, 46, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 116 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12570, 47, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 117 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12571, 48, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 118 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12572, 49, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 119 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12573, 50, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 120 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12574, 51, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 121 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12575, 52, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 122 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12576, 53, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 123 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12577, 54, 242, 1, 1, 1, 1
);

/* INSERT QUERY NO: 124 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12578, 1, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 125 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12579, 2, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 126 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12580, 3, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 127 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12581, 4, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 128 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12582, 5, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 129 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12583, 6, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 130 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12584, 7, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 131 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12585, 8, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 132 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12586, 9, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 133 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12587, 10, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 134 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12588, 11, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 135 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12589, 12, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 136 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12590, 13, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 137 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12591, 14, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 138 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12592, 15, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 139 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12593, 16, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 140 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12594, 17, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 141 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12595, 18, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 142 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12596, 19, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 143 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12597, 20, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 144 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12598, 21, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 145 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12599, 22, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 146 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12600, 23, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 147 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12601, 25, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 148 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12602, 26, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 149 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12603, 27, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 150 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12604, 40, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 151 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12605, 41, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 152 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12606, 42, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 153 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12607, 43, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 154 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12608, 44, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 155 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12609, 45, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 156 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12610, 46, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 157 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12611, 47, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 158 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12612, 48, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 159 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12613, 49, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 160 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12614, 50, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 161 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12615, 51, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 162 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12616, 52, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 163 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12617, 53, 243, 1, 1, 1, 1
);

/* INSERT QUERY NO: 164 */
INSERT INTO [Role_Access_Menu](ID, RoleID, MenuID, isRead, isUpdated, isCreate, isDeleted)
VALUES
(
12618, 54, 243, 1, 1, 1, 1
);


GO

CREATE PROCEDURE [dbo].[SP_CiplChangeHistoryGetByFormType] -- exec [dbo].[SP_CiplChangeHistoryGetById] '33433','CIPL',0,'CreateDate','asc','0','10'              
(              
 @id NVARCHAR(10),             
 @formtype NVARCHAR(100),             
 @IsTotal bit = 0,              
 @sort nvarchar(100) = 'CreateDate',              
 @order nvarchar(100) = 'DESC',              
 @offset nvarchar(100) = '0',              
 @limit nvarchar(100) = '10'              
)               
AS              
BEGIN              
 DECLARE @sql nvarchar(max);                
            
              
 SET @sql = 'SELECT ';              
 SET @sort = 'RF.'+@sort;              
              
 IF (@IsTotal <> 0)              
 BEGIN              
  SET @sql += 'count(*) total'              
 END               
 ELSE              
 BEGIN              
 SET @sql += 'R.FieldName,            
R.BeforeValue,            
R.AfterValue,        
RF.ID,        
RF.FormNo,          
RF.CreateBy,            
RF.CreateDate,            
RF.Reason'              
 END              
 SET @sql +=' FROM RequestForChange RF            
 INNER JOIN RFCItem R ON R.RFCID = RF.ID              
     WHERE  RF.FormId = '''+@id+ ''' AND RF.FormType = '''+@formtype+ '''';              
 IF @isTotal = 0               
 BEGIN              
 SET @sql += ' ORDER BY '+@sort+' '+@order+' OFFSET '+@offset+' ROWS FETCH NEXT '+@limit+' ROWS ONLY';              
 END               
               
 EXECUTE(@sql);              
               
END

GO

CREATE PROC Sp_ChangeHistory_Insert          
@FormType nvarchar(300)          
,@FormNo nvarchar(300)         
,@FormId int         
,@Reason nvarchar(MAX)          
,@CreateBy nvarchar(300)          
AS          
BEGIN          
        
DECLARE @Approver NVARCHAR(150)    
    
       
DECLARE @ResultId INT          
INSERT INTO RequestForChange (FormType,          
FormNo,        
RFCNumber,        
FormId,        
Reason,          
CreateBy,Approver,[Status]) VALUES (@FormType,@FormNo,'',@FormId,@Reason,@CreateBy,'',1)          
          
SET @ResultId = SCOPE_IDENTITY()      
        
SELECT @ResultId          
END

GO


==============================================================================================================================================
From DATE 26/April/2022
==============================================================================================================================================

GO
  
CREATE PROCEDURE [dbo].[SP_CiplUpdate_ByApprover]  
(  
 @id bigint,  
 @Category NVARCHAR(100),  
 @CategoryItem NVARCHAR(50),  
 @ExportType NVARCHAR(100),  
 @ExportTypeItem NVARCHAR(50),  
 @SoldConsignee NVARCHAR(30),  
 @SoldToName NVARCHAR(200),  
 @SoldToAddress NVARCHAR(MAX),  
 @SoldToCountry NVARCHAR(100),  
 @SoldToTelephone NVARCHAR(100),  
 @SoldToFax NVARCHAR(100),  
 @SoldToPic NVARCHAR(200),  
 @SoldToEmail NVARCHAR(200),  
 @ShipDelivery NVARCHAR(30),  
 @ConsigneeName NVARCHAR(200),  
 @ConsigneeAddress NVARCHAR(MAX),  
 @ConsigneeCountry NVARCHAR(100),  
 @ConsigneeTelephone NVARCHAR(100),  
 @ConsigneeFax NVARCHAR(100),  
 @ConsigneePic NVARCHAR(200),  
 @ConsigneeEmail NVARCHAR(200),  
 @NotifyName NVARCHAR(200),  
 @NotifyAddress NVARCHAR(MAX),  
 @NotifyCountry NVARCHAR(100),  
 @NotifyTelephone NVARCHAR(100),  
 @NotifyFax NVARCHAR(100),  
 @NotifyPic NVARCHAR(200),  
 @NotifyEmail NVARCHAR(200),  
 @ConsigneeSameSoldTo BIGINT,  
 @NotifyPartySameConsignee BIGINT,  
 @Area NVARCHAR(100),  
 @Branch NVARCHAR(100),  
 @Currency NVARCHAR(20),  
 @Rate DECIMAL(18,2),  
 @PaymentTerms NVARCHAR(50),  
 @ShippingMethod NVARCHAR(30),  
 @CountryOfOrigin NVARCHAR(30),  
 @LcNoDate NVARCHAR(30),  
 @IncoTerm NVARCHAR(50),  
 @FreightPayment NVARCHAR(30),  
 @ShippingMarks NVARCHAR(MAX),  
 @Remarks NVARCHAR(200),  
 @SpecialInstruction NVARCHAR(MAX),  
 @CreateBy NVARCHAR(50),  
 @CreateDate datetime,  
 @UpdateBy NVARCHAR(50),  
 @UpdateDate datetime,  
 @Status NVARCHAR(10),  
 @IsDelete BIT,  
 @LoadingPort NVARCHAR(200),  
 @DestinationPort NVARCHAR(200),  
 @PickUpPic NVARCHAR(200),  
 @PickUpArea NVARCHAR(200),  
 @CategoryReference NVARCHAR(50),  
 @ReferenceNo NVARCHAR(50),  
 @Consolidate NVARCHAR(20),  
 @Forwader NVARCHAR(200),  
 @BranchForwarder NVARCHAR(200),  
 @Attention NVARCHAR(200),  
 @Company NVARCHAR(200),  
 @SubconCompany NVARCHAR(200),  
 @Address NVARCHAR(MAX),  
 @AreaForwarder NVARCHAR(100),  
 @City NVARCHAR(100),  
 @PostalCode NVARCHAR(100),  
 @Contact NVARCHAR(200),  
 @FaxNumber NVARCHAR(200),  
 @Forwading NVARCHAR(200),  
 @Email NVARCHAR(200),  
 @Type VARCHAR(10),  
 @ExportShipmentType NVARCHAR(Max)  
)  
AS  
BEGIN  
 UPDATE dbo.Cipl   
  SET Category = @Category   
           ,CategoriItem = @CategoryItem  
           ,ExportType = @ExportType  
           ,ExportTypeItem = @ExportTypeItem  
     ,SoldConsignee = @SoldConsignee  
           ,SoldToName = @SoldToName  
           ,SoldToAddress = @SoldToAddress  
           ,SoldToCountry = @SoldToCountry  
           ,SoldToTelephone = @SoldToTelephone  
           ,SoldToFax = @SoldToFax  
           ,SoldToPic = @SoldToPic  
           ,SoldToEmail = @SoldToEmail  
     ,ShipDelivery = @ShipDelivery  
           ,ConsigneeName = @ConsigneeName  
           ,ConsigneeAddress = @ConsigneeAddress  
           ,ConsigneeCountry = @ConsigneeCountry  
           ,ConsigneeTelephone = @ConsigneeTelephone  
           ,ConsigneeFax = @ConsigneeFax  
           ,ConsigneePic = @ConsigneePic  
           ,ConsigneeEmail = @ConsigneeEmail  
           ,NotifyName = @NotifyName  
           ,NotifyAddress = @NotifyAddress  
           ,NotifyCountry = @NotifyCountry  
           ,NotifyTelephone = @NotifyTelephone  
           ,NotifyFax = @NotifyFax  
           ,NotifyPic = @NotifyPic  
           ,NotifyEmail = @NotifyEmail  
           ,ConsigneeSameSoldTo = @ConsigneeSameSoldTo  
           ,NotifyPartySameConsignee = @NotifyPartySameConsignee  
     ,Area = @Area  
     ,Branch = @Branch  
     ,Currency = @Currency  
           ,PaymentTerms = @PaymentTerms  
           ,ShippingMethod = @ShippingMethod  
           ,CountryOfOrigin = @CountryOfOrigin  
           ,LcNoDate = @LcNoDate  
           ,IncoTerm = @IncoTerm  
           ,FreightPayment = @FreightPayment  
           ,ShippingMarks = @ShippingMarks  
           ,Remarks = @Remarks  
           ,SpecialInstruction = @SpecialInstruction  
           --,UpdateBy = @UpdateBy  
           ,UpdateDate = @UpdateDate  
           ,IsDelete = @IsDelete  
     ,LoadingPort = @LoadingPort  
     ,DestinationPort = @DestinationPort  
     ,PickUpPic = @PickUpPic  
     ,PickUpArea = @PickUpArea  
     ,CategoryReference = @CategoryReference  
     ,ReferenceNo = @ReferenceNo  
     ,Consolidate = @Consolidate  
 WHERE id = @id;  
  
 UPDATE dbo.CiplForwader  
 SET Forwader = @Forwader  
  ,Branch = @BranchForwarder  
  ,Attention = @Attention  
  ,Company = @Company  
  ,SubconCompany = @SubconCompany  
  ,Address = @Address  
  ,Area = @AreaForwarder  
  ,City = @City  
  ,PostalCode = @PostalCode  
  ,Contact = @Contact  
  ,FaxNumber = @FaxNumber  
  ,Forwading = @Forwading  
  ,Email = @Email  
  --,UpdateBy = @UpdateBy  
  ,UpdateDate = @UpdateDate  
  ,IsDelete = @IsDelete  
  ,[Type]=@Type  
  ,ExportShipmentType=@ExportShipmentType   
 WHERE IdCipl = @id;  
  

  
END  
  
GO

  
CREATE PROCEDURE [dbo].[sp_update_cargo_ByApprover]    
(    
 @CargoID BIGINT,    
 @Consignee NVARCHAR(200),    
 @NotifyParty NVARCHAR(200),    
 @ExportType NVARCHAR(200),    
 @Category NVARCHAR(200),    
 @Incoterms NVARCHAR(200),    
 @StuffingDateStarted datetime = NULL,--='02-02-2019',    
 @StuffingDateFinished datetime = NULL,--='12-12-2019',    
 @ETA datetime = NULL,--='02-02-2019',    
 @ETD datetime = NULL,--='12-12-2019',    
 @VesselFlight NVARCHAR(30),--='vessel',    
 @ConnectingVesselFlight NVARCHAR(30),--='con vessel',    
 @VoyageVesselFlight NVARCHAR(30),--='voy vessel',    
 @VoyageConnectingVessel NVARCHAR(30),--='voy con',    
 @PortOfLoading NVARCHAR(30),--='start',    
 @PortOfDestination NVARCHAR(30),--='end',    
 @SailingSchedule datetime = NULL,--='09-09-2019',    
 @ArrivalDestination datetime = NULL,--='10-10-2019',    
 @BookingNumber NVARCHAR(20) = '',--='1122',    
 @BookingDate datetime = NULL,--='11-11-2019',    
 @Liner NVARCHAR(20) = '',--='linear'    
 @Status NVARCHAR(20) = '',    
 @ActionBy NVARCHAR(20) = '',    
 @Referrence NVARCHAR(MAX) = '',    
 @CargoType NVARCHAR(50) = '',    
 @ShippingMethod NVARCHAR(50) = ''    
)    
AS    
BEGIN    
     
 declare @ID BIGINT;    
     
  UPDATE [dbo].[Cargo]    
  SET [Consignee] = @Consignee    
   ,[NotifyParty] = @NotifyParty    
   ,[ExportType] = @ExportType    
   ,[Category] = @Category    
   ,[Incoterms] = @Incoterms    
   ,[StuffingDateStarted] = @StuffingDateStarted    
   ,[StuffingDateFinished] = @StuffingDateFinished    
   ,[ETA] = @ETA    
   ,[ETD] = @ETD    
   ,[VesselFlight] = @VesselFlight    
   ,[ConnectingVesselFlight] = @ConnectingVesselFlight    
   ,[VoyageVesselFlight] = @VoyageVesselFlight    
   ,[VoyageConnectingVessel] = @VoyageConnectingVessel    
   ,[PortOfLoading] = @PortOfLoading    
   ,[PortOfDestination] = @PortOfDestination    
   ,[SailingSchedule] = @SailingSchedule    
   ,[ArrivalDestination] = @ArrivalDestination    
   ,[BookingNumber] = @BookingNumber    
   ,[BookingDate] = @BookingDate    
   ,[Liner] = @Liner    
   ,[UpdateDate] = GETDATE()    
   ,[UpdateBy] = @ActionBy    
   ,[Referrence] = @Referrence    
   ,[ShippingMethod] = @ShippingMethod    
   ,[CargoType] = @CargoType    
  WHERE Id = @CargoID    
    
  SET @ID = @CargoID    
    
 SELECT CAST(@ID as BIGINT) as ID    
    
END    

GO

CREATE PROCEDURE [dbo].SP_NpePeb_Update    
(    
 @Id BIGINT,    
 @IdCl BIGINT,    
 @AjuNumber NVARCHAR(200),    
 @AjuDate datetime,    
 @NpeNumber NVARCHAR(200),    
 @NpeDate datetime,    
 @Npwp NVARCHAR(50),    
 @ReceiverName NVARCHAR(100),    
 @PassPabeanOffice NVARCHAR(100),    
 @Dhe DECIMAL(20,2),    
 @PebFob DECIMAL(18,4),    
 @Valuta NVARCHAR(20),    
 @DescriptionPassword NVARCHAR(100),    
 @DocumentComplete BIT,    
 @Rate Decimal(20,2),    
 @WarehouseLocation NVARCHAR(50),    
 @FreightPayment Decimal(20,2),      
 @InsuranceAmount Decimal(20,2),    
 @DraftPeb BIT,    
 @CreateBy NVARCHAR(50),    
 @CreateDate datetime,    
 @UpdateBy NVARCHAR(50),    
 @UpdateDate datetime,    
 @IsDelete BIT,    
 @RegistrationNumber NVARCHAR(MAX),    
    @NpeDateSubmitToCustomOffice datetime    
)    
AS    
BEGIN    
 DECLARE @LASTID bigint    
   
 UPDATE [dbo].[NpePeb]    
  SET [AjuNumber] = @AjuNumber    
     ,[AjuDate] = @AjuDate    
     ,[PebNumber] = @AjuNumber    
     ,[PebDate] = @AjuDate    
     ,[NpeNumber] = @NpeNumber    
     ,[NpeDate] = @NpeDate    
     ,[Npwp] = @Npwp    
     ,[ReceiverName] = @ReceiverName    
     ,[PassPabeanOffice] = @PassPabeanOffice    
     ,[Dhe] = @Dhe    
     ,[PebFob] = @PebFob    
     ,[Valuta] = @Valuta    
     ,[DescriptionPassword] = @DescriptionPassword    
     ,[DocumentComplete] = @DocumentComplete    
     ,[Rate] = @Rate    
     ,[WarehouseLocation] = @WarehouseLocation    
     ,[FreightPayment] = @FreightPayment    
     ,[InsuranceAmount] = @InsuranceAmount    
     ,[DraftPeb] = @DraftPeb    
           ,[CreateBy] = @CreateBy    
           ,[CreateDate] = @CreateDate    
           ,[UpdateBy] = @CreateBy    
           ,[UpdateDate] = @CreateDate    
           ,[IsDelete] = @IsDelete    
     ,[RegistrationNumber] = @RegistrationNumber    
    ,[NpeDateSubmitToCustomOffice] = @NpeDateSubmitToCustomOffice    
     WHERE Id = @Id    
     SELECT C.Id as ID, CAST(C.IdCl AS nvarchar) as [NO], C.CreateDate as CREATEDATE FROM NpePeb C WHERE C.id = @Id    
END

GO

  
    
CREATE PROCEDURE [dbo].[SP_Update_BlAwb]    
(    
 @Id BIGINT,    
 @Number NVARCHAR(100),    
 @MasterBlDate datetime,    
 @HouseBlNumber NVARCHAR(200),    
 @HouseBlDate datetime,    
 @Description NVARCHAR(50),    
 @FileName NVARCHAR(max),    
 @Publisher NVARCHAR(50),    
 @UpdateBy NVARCHAR(50),    
 @UpdateDate datetime,    
 @IdCl BIGINT    
)    
AS    
BEGIN    
 DECLARE @LASTID bigint    
 UPDATE [dbo].[BlAwb]    
  SET [Number] = @Number     
     ,[MasterBlDate] = @MasterBlDate    
     ,[HouseBlNumber] = @HouseBlNumber    
     ,[HouseBlDate] = @HouseBlDate    
     ,[Description] = @Description    
     ,[FileName] = @FileName    
     ,[Publisher] = @Publisher    
  ,[UpdateBy] = @UpdateBy    
  ,[UpdateDate] = @UpdateDate    
     WHERE Id = @Id    
     SELECT C.Id as ID, CONVERT(nvarchar(5), C.IdCl) as [NO], C.CreateDate as CREATEDATE FROM BlAwb C WHERE C.id = @Id      
    
END 

GO
ALTER PROCEDURE [dbo].[sp_get_blawb_list]   
(  
 @Username nvarchar(100),  
 @Search nvarchar(100),  
 @isTotal bit = 0,  
 @sort nvarchar(100) = 'Id',  
 @order nvarchar(100) = 'ASC',  
 @offset nvarchar(100) = '0',  
 @limit nvarchar(100) = '10'  
)  
AS  
BEGIN  
    SET NOCOUNT ON;  
    DECLARE @sql nvarchar(max);    
 DECLARE @WhereSql nvarchar(max) = '';  
 DECLARE @GroupId nvarchar(100);  
 DECLARE @RoleID bigint;  
 DECLARE @area NVARCHAR(max);  
 DECLARE @role NVARCHAR(max) = '';   
 SET @sort = 't0.'+@sort;  
  
 select @GroupId = Organization_Name from employee where Employee_Status = 'Active' AND AD_User = @Username;  
  
  
 SELECT @area = U.Business_Area  
  ,@role = U.[Role]  
 FROM dbo.fn_get_employee_internal_ckb() U  
 WHERE U.AD_User = @Username;  
  
 if @role !=''  
 BEGIN  
  
  
 IF (@role !='EMCS IMEX' and @Username !='ict.bpm')  
 BEGIN  
  SET @WhereSql = ' AND t0.CreateBy='''+@Username+''' ';  
 END  
  
 SET @sql = 'SELECT ';  
 IF (@isTotal <> 0)  
 BEGIN  
  SET @sql += 'count(*) total '  
 END   
 ELSE  
 BEGIN  
   
  SET @sql += ' t0.Id  
      , t0.IdCl  
      , t0.Number  
      , t0.MasterBlDate  
      , t0.HouseBlNumber  
      , t0.HouseBlDate   
      , t0.Publisher  
      , CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Employee_Name ELSE t3.FullName END PreparedBy  
      , CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Email ELSE t3.Email END Email         
      , STUFF((SELECT '', ''+ISNULL(tx1.EdoNo, ''-'')  
       FROM dbo.CargoItem tx0  
       JOIN dbo.Cipl tx1 on tx1.id = tx0.IdCipl  
       WHERE tx0.IdCargo = tx0.Id  
       GROUP BY tx1.EdoNo  
       FOR XML PATH(''''),type).value(''.'',''nvarchar(max)''),1,1,'''') [RefEdo]  
      , t8.ClNo  
      , t8.CargoType 
	  ,ISNULL((select TOP 1(Id) from RequestForChange WHERE FormId = t0.IdCl AND FormType = ''BlAwb'' AND [Status] = 0),0) AS PendingRFC'
 END  
 SET @sql +='  FROM BlAwb t0  
     JOIN dbo.Cargo t8 on t8.Id = t0.IdCl  
    JOIN PartsInformationSystem.dbo.[UserAccess] t3 on t3.UserID = t0.CreateBy  
    LEFT JOIN employee t2 on t2.AD_User = t0.CreateBy  
    WHERE 1=1 AND t0.IsDelete = 0  AND t8.CargoType != ''''' + @WhereSql+ ' AND (t0.Number like ''%'+@Search+'%'' OR t0.HouseBlNumber like ''%'+@Search+'%'')';  
  
 IF @isTotal = 0   
 BEGIN  
  SET @sql += ' ORDER BY '+@sort+' '+@order+' OFFSET '+@offset+' ROWS FETCH NEXT '+@limit+' ROWS ONLY';  
 END   
  
 --select @sql;  
 EXECUTE(@sql);  
 END  
END  
  
GO
  
ALTER PROCEDURE [dbo].[sp_get_npepeb_list]     
(    
 @Username nvarchar(100),    
 @Search nvarchar(100),    
 @isTotal bit = 0,    
 @sort nvarchar(100) = 'Id',    
 @order nvarchar(100) = 'ASC',    
 @offset nvarchar(100) = '0',    
 @limit nvarchar(100) = '10'    
)    
AS    
BEGIN    
    SET NOCOUNT ON;    
    DECLARE @sql nvarchar(max);      
 DECLARE @WhereSql nvarchar(max) = '';    
 DECLARE @GroupId nvarchar(100);    
 DECLARE @RoleID bigint;    
 DECLARE @area NVARCHAR(max);    
 DECLARE @role NVARCHAR(max) = '';     
 SET @sort = 't0.'+@sort;    
    
 select @GroupId = Organization_Name from employee where Employee_Status = 'Active' AND AD_User = @Username;    
    
    
 SELECT @area = U.Business_Area    
  ,@role = U.[Role]    
 FROM dbo.fn_get_employee_internal_ckb() U    
 WHERE U.AD_User = @Username;    
    
 if @role !=''    
 BEGIN    
    
    
 IF (@role !='EMCS IMEX' and @Username !='ict.bpm')    
 BEGIN    
  SET @WhereSql = ' AND t0.CreateBy='''+@Username+''' ';    
 END    
    
 SET @sql = 'SELECT ';    
 IF (@isTotal <> 0)    
 BEGIN    
  SET @sql += 'count(*) total '    
 END     
 ELSE    
 BEGIN    
     
  SET @sql += ' t0.Id    
      , t0.IdCl    
      , t0.AjuNumber    
      , t0.AjuDate    
      , t0.PebNumber    
      , t0.NpeNumber     
      , t0.NpeDate    
      , t0.PassPabeanOffice    
      , t0.Valuta     
      , CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Employee_Name ELSE t3.FullName END PreparedBy    
      , CASE WHEN t2.Employee_Name IS NOT NULL THEN t2.Email ELSE t3.Email END Email           
      , STUFF((SELECT '', ''+ISNULL(tx1.EdoNo, ''-'')    
       FROM dbo.CargoItem tx0    
       JOIN dbo.Cipl tx1 on tx1.id = tx0.IdCipl    
       WHERE tx0.IdCargo = tx0.Id    
       GROUP BY tx1.EdoNo    
       FOR XML PATH(''''),type).value(''.'',''nvarchar(max)''),1,1,'''') [RefEdo]    
      , t8.ClNo    
      , t8.CargoType  
   ,ISNULL((select TOP 1(Id) from RequestForChange WHERE FormId = t0.IdCl AND FormType = ''NpePeb'' AND [Status] = 0),0) AS PendingRFC'    
 END    
 SET @sql +='  FROM NpePeb t0    
     JOIN dbo.Cargo t8 on t8.Id = t0.IdCl    
    JOIN PartsInformationSystem.dbo.[UserAccess] t3 on t3.UserID = t0.CreateBy    
    LEFT JOIN employee t2 on t2.AD_User = t0.CreateBy    
    WHERE 1=1 AND t0.IsDelete = 0  AND t8.CargoType != ''''' + @WhereSql+ ' AND (t0.IdCl like ''%'+@Search+'%'' OR t8.ClNo like ''%'+@Search+'%'')';    
    
 IF @isTotal = 0     
 BEGIN    
  SET @sql += ' ORDER BY '+@sort+' '+@order+' OFFSET '+@offset+' ROWS FETCH NEXT '+@limit+' ROWS ONLY';    
 END     
    
 Print(@sql);    
 EXECUTE(@sql);    
 END    
END 

Go
  
ALTER PROCEDURE [dbo].[SP_SIInsert]  
(  
 @ID BIGINT,  
 @IdCL BIGINT,  
 @Description NVARCHAR(MAX),  
 @SpecialInstruction NVARCHAR(MAX),  
 @DocumentRequired NVARCHAR(MAX),  
 @PicBlAwb NVARCHAR(10),  
 @CreateBy NVARCHAR(50),  
 @CreateDate datetime,  
 @UpdateBy NVARCHAR(50),  
 @UpdateDate datetime,  
 @IsDelete BIT,  
 @ExportType NVARCHAR(10)  
)  
AS  
BEGIN  
DECLARE @LASTID bigint  
 IF @Id <= 0  
 BEGIN  
 INSERT INTO [dbo].[ShippingInstruction]  
           ([Description]  
     ,[IdCL]  
           ,[SpecialInstruction]  
     ,[PicBlAwb]  
     ,[CreateBy]  
           ,[CreateDate]  
           ,[UpdateBy]  
           ,[UpdateDate]  
           ,[IsDelete]  
     ,[ExportType]  
           )  
     VALUES  
           (@Description  
     ,@IdCL  
           ,@SpecialInstruction  
     ,@PicBlAwb  
           ,@CreateBy  
           ,@CreateDate  
           ,@UpdateBy  
           ,@UpdateDate  
           ,@IsDelete  
     ,@ExportType)  
  
 SELECT @LASTID = CAST(SCOPE_IDENTITY() as bigint)  
 EXEC dbo.GenerateShippingInstructionNumber @LASTID, @CreateBy;  

 SELECT @LASTID = CAST(SCOPE_IDENTITY() as bigint)  
SELECT C.id as ID, C.SlNo as [NO], C.CreateDate as CREATEDATE FROM ShippingInstruction C WHERE C.id = @LASTID   
 END  
 ELSE   
 BEGIN  
 UPDATE [ShippingInstruction] SET
 [Description] = @Description,
 [SpecialInstruction] = @SpecialInstruction,
 PicBlAwb = @PicBlAwb,
 [UpdateBy] = @UpdateBy,
 [UpdateDate] = @UpdateDate
 WHERE Id = @ID
     SELECT C.id as ID, C.SlNo as [NO], C.CreateDate as CREATEDATE FROM ShippingInstruction C WHERE C.id = @ID    
 END  
END  

================================================================================================

================================================================================================
