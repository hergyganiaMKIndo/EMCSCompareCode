alter FUNCTION [dbo].[fn_GetReportDetailTracking_RDetails] ()      
RETURNS TABLE      
AS      
RETURN (      
  SELECT CONCAT (      
    LEFT(DATENAME(MONTH, t0.UpdateDate), 3)      
    ,'-'      
    ,DATEPART(YEAR, t0.UpdateDate)      
    ) PebMonth      
   ,CAST(ROW_NUMBER() OVER (      
     PARTITION BY CONCAT (      
      LEFT(DATENAME(MONTH, t0.UpdateDate), 3)      
      ,'-'      
      ,DATEPART(YEAR, t0.UpdateDate)      
      ) ORDER BY t0.UpdateDate      
     ) AS VARCHAR(5)) RowNumber      
   ,IIF(t0.ReferenceNo = '', '-', t0.ReferenceNo) ReferenceNo      
   ,t0.CiplNo      
   ,t0.EdoNo AS EDINo      
   ,IIF(t0.PermanentTemporary = 'Repair Return (Temporary)', 'Temporary', IIF(t0.PermanentTemporary = 'Return (Permanent)', 'Permanent', IIF(t0.PermanentTemporary = 'Personal Effect (Permanent)', 'Permanent', 'Permanent'))) AS PermanentTemporary      
   ,IIF(t0.SalesNonSales <> 'Non Sales', IIF(LTRIM(RTRIM(CAST('<M>' + REPLACE(t0.SalesNonSales, ' ', '</M><M>') + '</M>' AS XML).value('/M[1]', 'varchar(50)'))) IS NULL      
     OR LEN(LTRIM(RTRIM(CAST('<M>' + REPLACE(t0.SalesNonSales, ' ', '</M><M>') + '</M>' AS XML).value('/M[1]', 'varchar(50)')))) <= 0, ' ', LTRIM(RTRIM(CAST('<M>' + REPLACE(t0.SalesNonSales, ' ', '</M><M>') + '</M>' AS XML).value('/M[1]', 'varchar(50)')))
  
    
), t0.SalesNonSales) AS SalesNonSales      
   ,t0.Remarks      
   ,t0.ConsigneeName      
   ,t0.ConsigneeAddress      
   ,t0.ConsigneeCountry      
   ,t0.ConsigneeTelephone      
   ,t0.ConsigneeFax      
   ,t0.ConsigneePic      
   ,t0.ConsigneeEmail      
   ,CASE WHEN t0.ShipDelivery = 'Notify' THEN t0.NotifyName ELSE '' END AS NotifyName      
   ,CASE WHEN t0.ShipDelivery = 'Notify' THEN t0.NotifyAddress ELSE '' END AS NotifyAddress      
   ,CASE WHEN t0.ShipDelivery = 'Notify' THEN t0.NotifyCountry ELSE '' END AS NotifyCountry      
   ,CASE WHEN t0.ShipDelivery = 'Notify' THEN t0.NotifyTelephone ELSE '' END AS NotifyTelephone      
   ,CASE WHEN t0.ShipDelivery = 'Notify' THEN t0.NotifyFax ELSE '' END AS NotifyFax      
   ,CASE WHEN t0.ShipDelivery = 'Notify' THEN t0.NotifyPic ELSE '' END AS NotifyPic      
   ,CASE WHEN t0.ShipDelivery = 'Notify' THEN t0.NotifyEmail ELSE '' END AS NotifyEmail      
   ,CASE WHEN t0.ShipDelivery = 'Ship To / Delivery To' THEN t0.SoldToName ELSE '' END AS SoldToName      
   ,CASE WHEN t0.ShipDelivery = 'Ship To / Delivery To' THEN t0.SoldToAddress ELSE '' END AS SoldToAddress      
   ,CASE WHEN t0.ShipDelivery = 'Ship To / Delivery To' THEN t0.SoldToCountry ELSE '' END AS SoldToCountry      
   ,CASE WHEN t0.ShipDelivery = 'Ship To / Delivery To' THEN t0.SoldToTelephone ELSE '' END AS SoldToTelephone      
   ,CASE WHEN t0.ShipDelivery = 'Ship To / Delivery To' THEN t0.SoldToFax ELSE '' END AS SoldToFax      
   ,CASE WHEN t0.ShipDelivery = 'Ship To / Delivery To' THEN t0.SoldToPic ELSE '' END AS SoldToPic      
   ,CASE WHEN t0.ShipDelivery = 'Ship To / Delivery To' THEN t0.SoldToEmail ELSE '' END AS SoldToEmail      
   ,t2.ShippingMethod      
   ,t2.Incoterms AS IncoTerms      
   ,IIF(t0.Category = 'MISCELLANEOUS', t0.CategoriItem, t0.Category) AS DescGoods      
   ,IIF(t0.Category = 'MISCELLANEOUS', t0.Category, IIF(t0.Category = 'CATERPILLAR SPAREPARTS', 'SPAREPARTS', t0.CategoriItem)) AS Category      
   ,IIF(t0.Category = 'MISCELLANEOUS'      
    OR t0.Category = 'CATERPILLAR USED EQUIPMENT'      
    OR t0.Category = 'CATERPILLAR UNIT', '-', t0.CategoriItem) AS SubCategory      
   ,IIF(t0.ExportType = 'Sales (Permanent)', '-', IIF(t0.ExportType = 'Non Sales - Repair Return (Temporary)', 'RR', IIF(t0.ExportType = 'Non Sales - Return (Permanent)', 'R', IIF(t0.ExportType = 'Non Sales - Personal Effect (Permanent)', 'PE', '-')))) AS
  
    
      
    [Type]      
   ,t0.UpdateDate AS CiplDate      
   ,CONCAT (      
    CONVERT(VARCHAR(9), t0.UpdateDate, 6)      
    ,' '      
    ,CONVERT(VARCHAR(9), t0.UpdateDate, 8)      
    ) CiplCreateDate      
   ,CONCAT (      
    CONVERT(VARCHAR(9), t0.CiplApprovalDate, 6)      
    ,' '      
    ,CONVERT(VARCHAR(9), t0.CiplApprovalDate, 8)      
    ) As CiplApprovalDate      
   ,t0.PICName      
   ,t0.Department      
   ,t0.Branch      
   ,t0.PICApproverName      
   ,t0.GrNo AS RGNo      
   ,CONCAT (      
    CONVERT(VARCHAR(10), t0.RGDate)      
    ,' '      
    ,CONVERT(VARCHAR(10), t0.RGDate)      
    )as RGDate       
   ,CONCAT (      
    CONVERT(VARCHAR(9), t0.RGApprovalDate, 6)      
    ,' '      
    ,CONVERT(VARCHAR(9), t0.RGApprovalDate, 8)      
    )as RGApprovalDate      
   ,t0.RGApproverName      
   ,t0.CategoriItem      
   ,CONCAT (      
    CONVERT(VARCHAR(18), t2.CreateDate, 6)      
    ,' '      
    ,CONVERT(VARCHAR(20), t2.CreateDate, 8)      
    ) ClDate      
   ,t2.ClNo      
   ,CONVERT(VARCHAR(11), t2.SailingSchedule, 106) AS ETD      
   ,CONVERT(VARCHAR(11), t2.ArrivalDestination, 106) AS ETA      
   ,t2.PortOfLoading      
   ,t2.PortOfDestination      
   ,t2.CargoType  
   ,ContainerNumber = COALESCE(STUFF((      
      SELECT DISTINCT ',' + CI.ContainerNumber      
      FROM CargoItem CI      
      WHERE CI.IdCargo = t2.Id      
      FOR XML PATH('')      
       ,TYPE      
      ).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), N'')      
   ,Seal = COALESCE(STUFF((      
      SELECT DISTINCT ',' + CI.ContainerSealNumber      
      FROM CargoItem CI      
      WHERE CI.IdCargo = t2.Id      
      FOR XML PATH('')      
       ,TYPE      
      ).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), N'')      
   ,'-' AS ContainerType      
   ,t7.TotalCaseNumber AS TotalColly      
   ,t2.Liner      
   ,IIF(t2.ShippingMethod = 'Sea', t2.VesselFlight, '') VesselName      
   ,IIF(t2.ShippingMethod = 'Air', t2.VesselFlight, '') FlightName      
   ,IIF(t2.ShippingMethod = 'Sea', t2.VoyageVesselFlight, '') VesselVoyNo      
   ,IIF(t2.ShippingMethod = 'Air', t2.VoyageVesselFlight, '') FlightVoyNo      
   ,t2.SsNo AS SSNo      
   ,CONCAT (      
    CONVERT(VARCHAR(9), t2.CLApprovalDate, 6)      
    ,' '      
    ,CONVERT(VARCHAR(9), t2.CLApprovalDate, 8)      
    )AS CLApprovalDate      
   ,t2.ClApproverName      
   ,t3.SlNo AS SINo      
   ,CONCAT (      
    CONVERT(VARCHAR(9), t3.CreateDate, 6)      
    ,' '      
    ,CONVERT(VARCHAR(9), t3.CreateDate, 8)      
    ) AS SIDate      
   ,CONCAT (      
    CONVERT(VARCHAR(9), t4.AjuDate, 6)      
    ,' '      
    ,CONVERT(VARCHAR(9), t4.AjuDate, 8)      
    ) AS AjuDate      
   ,t4.AjuNumber      
   ,CONCAT (      
    CONVERT(VARCHAR(9), t4.NpeDate, 6)      
    ,' '      
    ,CONVERT(VARCHAR(9), t4.NpeDate, 8)      
    ) AS NpeDate      
   ,t4.NpeNumber      
   ,t4.RegistrationNumber AS NOPEN      
   ,FORMAT(t4.PebFob, '#,0.00') PebFob      
   ,FORMAT(t4.FreightPayment, '#,0.00') FreightPyment      
   ,FORMAT(t4.InsuranceAmount, '#,0.00') InsuranceAmount      
   ,CONCAT (      
    CONVERT(VARCHAR(9), t4.PEBApprovalDate, 6)      
    ,' '      
    ,CONVERT(VARCHAR(9), t4.PEBApprovalDate, 8)      
    ) AS PEBApprovalDate      
   ,t4.PEBApproverName      
   ,t5.Number AS MasterBlAwbNumber      
   ,CONVERT(VARCHAR(10), t5.MasterBlDate, 120) AS MasterBlAwbDate      
   ,t5.HouseBlNumber HouseBlAwbNumber      
   ,CONVERT(VARCHAR(10), t5.HouseBlDate, 120) AS HouseBlAwbDate      
   ,FORMAT(t4.PebFob + t4.FreightPayment + t4.InsuranceAmount, '#,0.00') AS TotalPEB      
   ,'-' AS InvoiceNoServiceCharges      
   ,'-' AS CurrencyServiceCharges      
   ,'-' AS TotalServiceCharges      
   ,'-' AS InvoiceNoConsignee      
   ,'-' AS CurrencyValueConsignee      
   ,'-' AS TotalValueConsignee      
   ,'-' AS ValueBalanceConsignee      
   ,'-' AS [Status1]      
   ,Uom = COALESCE(STUFF((      
      SELECT DISTINCT ',' + CI.Uom      
      FROM CiplItem CI      
      WHERE CI.IdCipl = t0.Id      
       AND CI.Uom <> ''      
      FOR XML PATH('')      
       ,TYPE      
      ).value('.', 'NVARCHAR(MAX)'), 1, 1, ''), N'')      
   ,t7.Quantity TotalUom      
   ,t7.TotalExtendedValue TotalExtendedValue      
   ,FORMAT(sum(ISNULL(t4.Rate, 0)), '#,0.00') Rate      
   ,t4.Valuta      
   ,t8.Gross      
   ,t8.Net      
   ,t8.Volume  
   ,t0.CustomsFacilityArea  
   ,CASE       
    WHEN fnReqCl.StatusViewByUser IS NOT NULL      
     AND fnReqCl.StatusViewByUser != 'Draft'      
     THEN fnReqCl.StatusViewByUser      
    WHEN fnReqGr.NextStatusViewByUser IS NOT NULL      
     AND fnReqGr.NextStatusViewByUser != 'Draft'      
     THEN fnReqGr.NextStatusViewByUser      
    ELSE fnReq.NextStatusViewByUser      
    END AS [Status]   
   
  FROM (      
   SELECT DISTINCT t0.CiplNo      
    ,t0.ReferenceNo      
 ,t0.Category      
    ,t0.CategoriItem      
    ,IIF(t0.UpdateBy IS NOT NULL, t0.UpdateDate, t0.CreateDate) UpdateDate      
    ,t8.Employee_name PICName      
    ,t8.Dept_Name Department      
    ,t8.Division_Name Branch      
    ,t0.id      
    ,t0.EdoNo  
   
    ,IIF(LTRIM(RTRIM(CAST('<M>' + REPLACE(t0.ExportType, '-', '</M><M>') + '</M>' AS XML).value('/M[2]', 'varchar(50)'))) IS NULL      
     OR LEN(LTRIM(RTRIM(CAST('<M>' + REPLACE(t0.ExportType, '-', '</M><M>') + '</M>' AS XML).value('/M[2]', 'varchar(50)')))) <= 0, IIF(CHARINDEX('Permanent', t0.ExportType) > 0, 'Permanent', '-'), --'-',      
     LTRIM(RTRIM(CAST('<M>' + REPLACE(t0.ExportType, '-', '</M><M>') + '</M>' AS XML).value('/M[2]', 'varchar(50)')))) AS PermanentTemporary      
    ,IIF(LTRIM(RTRIM(CAST('<M>' + REPLACE(t0.ExportType, '-', '</M><M>') + '</M>' AS XML).value('/M[1]', 'varchar(50)'))) IS NULL      
     OR LEN(LTRIM(RTRIM(CAST('<M>' + REPLACE(t0.ExportType, '-', '</M><M>') + '</M>' AS XML).value('/M[1]', 'varchar(50)')))) <= 0, '-', LTRIM(RTRIM(CAST('<M>' + REPLACE(t0.ExportType, '-', '</M><M>') + '</M>' AS XML).value('/M[1]', 'varchar(50)')))) AS SalesNonSales      
    ,t0.ExportType      
    ,t0.Remarks      
    ,t0.ConsigneeName      
    ,t0.ConsigneeAddress      
    ,t0.ConsigneeCountry      
    ,t0.ConsigneeTelephone      
    ,t0.ConsigneeFax      
    ,t0.ConsigneePic      
    ,t0.ConsigneeEmail      
    ,t0.NotifyName      
    ,t0.NotifyAddress      
    ,t0.NotifyCountry      
    ,t0.NotifyTelephone      
    ,t0.NotifyFax      
    ,t0.NotifyPic      
    ,t0.NotifyEmail      
    ,t0.SoldToName      
    ,t0.SoldToAddress      
    ,t0.SoldToCountry      
    ,t0.SoldToTelephone      
    ,t0.SoldToFax      
    ,t0.SoldToPic      
    ,t0.SoldToEmail      
    ,t0.ShippingMethod      
    ,      
    --t0.IncoTerm,      
    CONCAT (      
     CONVERT(VARCHAR(9), t4.UpdateDate, 6)      
     ,' '      
     ,CONVERT(VARCHAR(9), t4.UpdateDate, 8)      
     ) AS CiplApprovalDate      
    ,t6.Employee_Name AS PICApproverName      
    ,t3.GrNo      
    ,CONCAT (      
     --CONVERT(VARCHAR(9), , 6) 
	 CONVERT(VARCHAR(23), t3.CreateDate, 110)
     ,' '      
	  ,CONVERT(VARCHAR(23), t3.CreateDate, 110)
     --,CONVERT(VARCHAR(9), t3.CreateDate, 8)      
     ) AS RGDate        
    ,CONCAT (      
     CONVERT(VARCHAR(9), t5.UpdateDate, 6)      
     ,' '      
     ,CONVERT(VARCHAR(9), t5.UpdateDate, 8)      
     ) AS RGApprovalDate      
    ,t7.Employee_Name AS RGApproverName      
    ,t3.Id IdGr      
    ,t0.ShipDelivery    
 ,cf.[Type] as CustomsFacilityArea   
   FROM Cipl t0      
   JOIN CiplItem t1 ON t0.id = t1.idCipl AND t1.isdelete = 0   
   left join CiplForwader cf on cf.IdCipl = t0.id and cf.IsDelete = 0  
   LEFT JOIN RequestCipl t4 ON t4.IdCipl = t0.id      
    AND t4.STATUS = 'Approve' and t4.isdelete = 0      
   LEFT JOIN GoodsReceiveItem t2 ON t2.IdCipl = t0.id      
   LEFT JOIN GoodsReceive t3 ON t3.Id = t2.IdGr AND t3.isdelete = 0      
   LEFT JOIN RequestGr t5 ON t5.IdGr = t2.IdGr      
    AND t5.STATUS = 'Approve' AND t5.isdelete = 0      
   LEFT JOIN Employee t6 ON t6.AD_User = t4.UpdateBy      
   LEFT JOIN Employee t7 ON t7.AD_User = t5.UpdateBy       
   LEFT JOIN Employee t8 ON t8.AD_User = t0.UpdateBy      
   WHERE t0.isdelete = 0      
   ) t0      
  LEFT JOIN CargoCipl t1 ON t1.IdCipl = t0.id AND t1.isdelete = 0      
  LEFT JOIN (      
   SELECT t0.*      
    ,t2.Employee_Name ClApproverName      
    ,      
    --t1.UpdateBy ClApproverName,       
    CONCAT (      
     CONVERT(VARCHAR(9), t1.UpdateDate, 6)      
     ,' '      
     ,CONVERT(VARCHAR(9), t1.UpdateDate, 8)      
     ) ClApprovalDate      
   FROM Cargo t0      
   --left join RequestCl t1 on t0.Id = t1.IdCl and t1.Status = 'Approve' and t1.IdStep = 12      
   LEFT JOIN CargoHistory t1 ON t0.Id = t1.IdCargo      
    AND t1.Step NOT IN (      
     'Approve NPE & PEB'      
     ,'Approve BL or AWB'      
     ,'Create NPE & PEB'      
     )      
    AND t1.STATUS = 'Approve' AND t1.isdelete = 0      
   LEFT JOIN Employee t2 ON t1.CreateBy = t2.AD_User      
   WHERE t0.isdelete = 0      
   ) t2 ON t2.Id = t1.IdCargo      
  LEFT JOIN ShippingInstruction t3 ON t3.IdCL = t2.Id AND t3.isdelete = 0      
  LEFT JOIN (      
   SELECT t0.*      
    ,t2.Employee_Name AS PEBApproverName      
    ,t1.UpdateDate AS PEBApprovalDate      
   FROM NpePeb t0      
   LEFT JOIN CargoHistory t1 ON t0.IdCl = t1.IdCargo      
    AND t1.Step = 'Approve NPE & PEB'      
    AND t1.STATUS = 'Approve' AND t1.isdelete = 0      
   LEFT JOIN Employee t2 ON t1.CreateBy = t2.AD_User      
   WHERE t0.isdelete = 0      
   ) t4 ON t4.IdCl = t2.Id      
  LEFT JOIN BlAwb t5 ON t5.IdCl = t2.Id AND t5.isdelete = 0      
  LEFT JOIN (      
   SELECT c.id      
    ,MAX(ISNULL(ci.Currency, '-')) AS Currency      
    ,CASE       
     WHEN c.Category = 'CATERPILLAR SPAREPARTS'      
      AND c.CategoriItem = 'SIB'      
      THEN CAST(count(DISTINCT ISNULL(ci.Id, '-')) AS VARCHAR(5))      
     WHEN c.Category = 'CATERPILLAR SPAREPARTS'      
      AND c.CategoriItem = 'PRA'      
      THEN CAST(count(DISTINCT ISNULL(ci.ASNNumber, '-')) AS VARCHAR(5))      
     WHEN c.Category = 'CATERPILLAR SPAREPARTS'      
      AND c.CategoriItem = 'Old Core'      
      THEN CAST(count(DISTINCT ISNULL(ci.CaseNumber, '-')) AS VARCHAR(5))      
     ELSE CAST(count(DISTINCT ci.Sn) AS VARCHAR(5))      
     END AS TotalCaseNumber      
    ,FORMAT(sum(ISNULL(ci.ExtendedValue, 0)), '#,0.00') AS TotalExtendedValue      
    ,FORMAT(sum(ISNULL(ci.Quantity, 0)), '#,0.00') AS Quantity      
   FROM Cipl c      
   INNER JOIN CiplItem ci ON c.id = ci.IdCipl      
   INNER JOIN CargoItem cai ON cai.IdCiplItem = ci.Id      
   GROUP BY c.id      
    ,c.Category      
    ,c.CategoriItem      
   ) t7 ON t7.id = t0.id      
  LEFT JOIN (      
   SELECT FORMAT(sum(ISNULL(c.Gross, 0)), '#,0.00') Gross      
    ,FORMAT(sum(ISNULL(c.Net, 0)), '#,0.00') Net      
    --,FORMAT(sum(ISNULL(c.Width * c.Height * c.Length, 0))/100, '#,0.00') AS Volume      
    ,FORMAT((SUM(ISNULL(c.Height,0))/100) * (SUM(ISNULL(c.Width,0))/100) * (SUM(ISNULL(c.Length,0))/100), '#,0.00') AS Volume      
    ,c.IdCargo      
   FROM CargoItem c      
   GROUP BY c.IdCargo      
   ) t8 ON t8.IdCargo = t1.IdCargo       
  LEFT JOIN dbo.[fn_get_cipl_request_list_all]() AS fnReq ON fnReq.IdCipl = t0.id      
  LEFT JOIN dbo.[fn_get_gr_request_list_all]() AS fnReqGr ON fnReqGr.IdGr = t0.IdGr      
  LEFT JOIN dbo.[fn_get_cl_request_list_all]() AS fnReqCl ON fnReqCl.IdCl = t2.Id      
  GROUP BY t0.id      
   ,t0.UpdateDate      
   ,t0.CiplNo      
   ,t0.EdoNo      
   ,t0.ReferenceNo      
   ,t0.PICName      
   ,t0.Department      
   ,t0.Branch      
   ,t0.PermanentTemporary      
   ,t0.SalesNonSales      
   ,t0.Remarks   
   ,t0.ConsigneeName      
   ,t0.ConsigneeAddress      
   ,t0.ConsigneeCountry      
   ,t0.ConsigneeTelephone      
   ,t0.ConsigneeFax      
   ,t0.ConsigneePic      
   ,t0.ConsigneeEmail      
   ,t0.NotifyName      
   ,t0.NotifyAddress      
   ,t0.NotifyCountry      
   ,t0.NotifyTelephone      
   ,t0.NotifyFax      
   ,t0.NotifyPic      
   ,t0.NotifyEmail      
   ,t0.SoldToName      
   ,t0.SoldToAddress      
   ,t0.SoldToCountry      
   ,t0.SoldToTelephone      
   ,t0.SoldToFax      
   ,t0.SoldToPic      
   ,t0.SoldToEmail      
   ,t0.PICApproverName      
   ,t0.GrNo      
   ,t2.ClNo      
   ,t2.SsNo      
   ,t3.SlNo      
   ,t4.AjuDate      
   ,t4.AjuNumber      
   ,t4.NpeDate      
   ,t4.NpeNumber      
   ,t5.Number      
   ,t5.MasterBlDate      
   ,t5.HouseBlNumber      
   ,t5.HouseBlDate      
   ,t2.SailingSchedule      
   ,t2.ArrivalDestination      
   ,t2.PortOfLoading      
   ,t2.PortOfDestination      
   ,t2.ShippingMethod      
   ,t2.CargoType      
   ,t2.Incoterms      
   ,t4.PebFob      
   ,t4.FreightPayment      
   ,t4.InsuranceAmount      
   ,t0.Category      
   ,t0.CategoriItem      
   ,t0.CiplApprovalDate      
   ,t0.RGApprovalDate      
   ,t0.RGDate      
   ,t2.CreateDate      
   ,t0.ExportType      
   ,t2.ClApprovalDate      
   ,t2.ClApproverName      
   ,t0.RGApproverName      
   ,t3.CreateDate      
   ,t4.RegistrationNumber      
   ,t4.PEBApproverName      
   ,t4.PEBApprovalDate      
   ,t2.VesselFlight      
   ,t2.VoyageVesselFlight      
   ,t2.Liner      
   ,t2.Id      
   ,t7.Quantity      
   ,t7.TotalCaseNumber      
   ,TotalExtendedValue      
   ,t4.Rate      
   ,t4.Valuta      
   ,t8.Gross      
   ,t8.Net      
   ,t8.Volume      
   ,fnReq.NextStatusViewByUser      
   ,fnReqGr.NextStatusViewByUser      
   ,fnReqCl.StatusViewByUser      
   ,t0.ShipDelivery  
   ,t0.CustomsFacilityArea  
      
  )      
  
  GO


    
-- =============================================                      
-- Author:                            Ali Mutasal                      
-- ALTER date: 09 Des 2019                      
-- Description:    Function untuk melakukan proses email                      
-- =============================================                      
Alter FUNCTION [dbo].[fn_proccess_email_template]                      
(                      
    -- Add the parameters for the function here                      
    @requestType nvarchar(100) = '',                      
    @requestId nvarchar(100) = '',                      
    @template nvarchar(max) = '',                      
    @typeDoc nvarchar(max) = '',                      
    @lastPIC nvarchar(max) = ''                      
)                      
RETURNS nvarchar(max)                      
AS                      
BEGIN                      
    ------------------------------------------------------------------                      
    -- 1. Melakukan Declare semua variable yang dibutuhkan                      
    ------------------------------------------------------------------                      
    BEGIN                     
    -- ini hanya sample silahkan comment jika akan digunakan                      
    --SET @template = 'Ini adalah email dari [requestor_name], dan ini adalah email untuk [last_pic_name]. selanjutnya akan dikirim ke [next_pic_name]';                      
    DECLARE @variable_table TABLE (                      
        key_data VARCHAR(MAX) NULL,                      
        val_data VARCHAR(MAX) NULL                      
    );                      
                      
    DECLARE                       
  @key NVARCHAR(MAX),                       
  @flow NVARCHAR(MAX),                       
  @val NVARCHAR(MAX),                      
  @requestor_name NVARCHAR(MAX),                      
  @requestor_id NVARCHAR(MAX),                      
  @requestor_username NVARCHAR(MAX),                      
  @last_pic_name NVARCHAR(MAX),                      
  @last_pic_id NVARCHAR(MAX),                      
  @last_pic_username NVARCHAR(MAX),                      
  @next_pic_name NVARCHAR(MAX),                      
  @next_pic_id NVARCHAR(MAX),                      
  @next_pic_username NVARCHAR(MAX),                      
  @si_number NVARCHAR(MAX) = '',                      
  @ss_number NVARCHAR(MAX) = '',                      
  @req_number NVARCHAR(MAX) = '',                      
  @CiplNo NVARCHAR(MAX) = '',                      
  @DO NVARCHAR(MAX) = '',                      
  @DA NVARCHAR(MAX) = '',                      
  @NoReference NVARCHAR(MAX) = '',                      
  @CIPLBranchName NVARCHAR(MAX) = '',                      
  @PICPickupPoints NVARCHAR(MAX) = '',                      
  @PickupPointsArea NVARCHAR(MAX) = '',                      
  @npe_number NVARCHAR(MAX) = '',                      
  @peb_number NVARCHAR(MAX) = '',                      
  @bl_awb_number NVARCHAR(MAX) = '',                      
  @req_date NVARCHAR(MAX) = '',                      
  @superior_req_name nvarchar(max) = '',             
  @superior_req_id nvarchar(max) = '',                
  @Note nvarchar(max) = '',                
  @employee_name nvarchar(max) = '' ,    
  @Dono nvarchar(max)    
                   
                                  
    IF (@lastPIC <> '')                   
    BEGIN                      
        SELECT @employee_name = employee_name                       
        FROM dbo.fn_get_employee_internal_ckb()                       
        WHERE AD_User = @lastPIC;                      
    END                      
END                      
                                      
------------------------------------------------------------------                      
-- 2. Query untuk mengisi data ke variable variable yang dibutuhkan                      
------------------------------------------------------------------                      
BEGIN   
    -- Mengambil data dari fn request per flow                      
    BEGIN                      
  IF (@requestType = 'CIPL')                      
   BEGIN                      
   SET @flow = 'CIPL';                      
   SELECT                       
    @requestor_id = t1.Employee_ID,                      
    @requestor_name = t1.Employee_Name,                      
    @superior_req_name = t1.Superior_Name,                      
    @superior_req_id = t1.Superior_ID,                      
    @requestor_username = t1.AD_User,                      
    @last_pic_id = t2.Employee_ID,                      
    @last_pic_name = t2.Employee_Name,                      
    @last_pic_username = t2.AD_User,                      
    @next_pic_id = t3.Employee_ID,                      
    @DO = t4.EdoNo,              
    @CiplNo = t4.CiplNo,                      
    @DA = t4.Da ,                
    @Note = ISNULL((select TOP 1 notes from CiplHistory where IdCipl = t0.IdCipl order by id desc),''),            
    @NoReference = t4.ReferenceNo,                      
    @CIPLBranchName = (SELECT C.Branch+' - '+MA.BAreaName FROM MasterArea MA inner join Cipl C ON C.Branch = MA.BAreaCode WHERE C.id=t0.IdCipl ),                      
    @PICPickupPoints = t6.Employee_Name,                      
    @PickupPointsArea = t4.PickUpArea+'-'+(SELECT MA.BAreaName FROM MasterArea MA inner join Cipl C ON C.Branch = MA.BAreaCode WHERE C.id=t0.IdCipl ),                      
    @next_pic_name = CASE WHEN t0.Status = 'Revise' OR t0.Status = 'Reject' OR (t0.Status = 'Approve' AND t0.NextAssignType IS NULL) THEN t5.Employee_Name     
    WHEN t0.NextAssignType = 'Group' THEN t0.NextAssignTo  ELSE t3.Employee_Name END,                      
                @next_pic_username = t3.AD_User,                      
    @req_number = IIF(@typeDoc = 'CKB', ISNULL(t4.EdoNo,''), t4.CiplNo),                      
                @req_date = RIGHT('0' + DATENAME(DAY, t0.CreateDate), 2) + ' ' + DATENAME(MONTH, t0.CreateDate)+ ' ' + DATENAME(YEAR, t0.CreateDate)                      
            FROM                       
    dbo.fn_get_cipl_request_list_all() t0                       
    INNER JOIN dbo.Cipl t4 on t4.id = t0.IdCipl                      
    LEFT JOIN dbo.fn_get_employee_internal_ckb() t1 on t1.AD_User = t0.CreateBy                      
                LEFT JOIN dbo.fn_get_employee_internal_ckb() t2 on t2.AD_User = t0.Pic                      
                LEFT JOIN dbo.fn_get_employee_internal_ckb() t3 on t3.AD_User = t0.NextAssignTo                      
                LEFT JOIN dbo.fn_get_employee_internal_ckb() t5 on t5.AD_User = t0.UpdateBy                
                LEFT JOIN dbo.fn_get_employee_internal_ckb() t6 on t6.AD_User = t4.PickUpPic                
            WHERE                       
                t0.IdCipl = @requestId;                      
   END                      
                      
        --IF (@requestType IN ('CL', 'BLAWB', 'PEB_NPE'))                      
  IF (@requestType = 'CL') OR (@requestType = 'BLAWB') OR (@requestType = 'PEB_NPE')                       
   BEGIN                      
   SET @flow = @requestType;                      
   SELECT                       
                @requestor_id = t5.Employee_ID,                      
                @requestor_name = t5.Employee_Name,                      
                @superior_req_name = t5.Superior_Name,                      
                @superior_req_id = t5.Superior_ID,                      
                @requestor_username = t5.AD_User,                      
                @last_pic_id = t6.Employee_ID,                      
                @last_pic_name = t6.Employee_Name,                      
    @last_pic_username = t6.AD_User,                      
    @next_pic_id = t7.Employee_ID,                      
    @next_pic_name = t7.Employee_Name,                      
    @next_pic_username = t7.AD_User,                      
    @req_number = t1.ClNo,                
                @ss_number = t1.SsNo,                      
                @si_number = t2.SlNo,                      
                @npe_number = t3.NpeNumber,                      
                @peb_number = t3.PebNumber,       
                @NoReference = (SELECT        
        STUFF((        
        SELECT ', ' + ReferenceNo        
        FROM Cipl WHERE id                       
         in (SELECT IdCipl FROM CargoCipl                       
         where IdCargo = t0.IdCl)        
        FOR XML PATH('')), 1, 1, '')),      
      --          @DO = (SELECT        
      --STUFF((        
      --SELECT ', ' + EdoNumber        
      --FROM CargoCipl WHERE IdCargo = t0.IdCl        
      --FOR XML PATH('')), 1, 1, '')),        
    @DO = (SELECT        
      STUFF((        
      SELECT ', ' + DoNo     
      FROM ShippingFleetRefrence WHERE IdCipl                         
       in (SELECT IdCipl FROM CargoCipl                       
       where IdCargo = t0.IdCl)        
      FOR XML PATH('')), 1, 1, '')),                     
    @CIPLBranchName = (SELECT STUFF((        
         SELECT ', ' + C.Branch+' - '+MA.BAreaName FROM MasterArea MA       
         inner join Cipl C ON C.Branch = MA.BAreaCode       
         WHERE C.id in (SELECT IdCipl FROM CargoCipl                       
         where IdCargo = t0.IdCl)        
         FOR XML PATH('')), 1, 1, '')),                      
      --          @DA = (SELECT        
      --STUFF((        
      --SELECT ', ' + Da        
      --FROM Cipl WHERE id                       
      -- in (SELECT IdCipl FROM CargoCipl                       
      -- where IdCargo = t0.IdCl)        
      --FOR XML PATH('')), 1, 1, '')),       
    @DA = (SELECT        
      STUFF((SELECT ', ' + sf.DaNo from shippingfleet sf
	   Inner join ShippingFleetRefrence sfr on sfr.IdShippingFleet = sf.Id
	   inner join CargoCipl cc on cc.IdCipl = sfr.IdCipl
	   where cc.IdCargo = t0.IdCl
	    FOR XML PATH('')), 1, 1, '')),                  
    @CiplNo = (SELECT        
       STUFF((        
       SELECT ', ' + CiplNo        
       FROM Cipl WHERE id                       
        in (SELECT IdCipl FROM CargoCipl                       
        where IdCargo = t0.IdCl)        
       FOR XML PATH('')), 1, 1, '')),                      
    @bl_awb_number = t4.Number,                      
                @req_date = RIGHT('0' + DATENAME(DAY, t0.CreateDate), 2) + ' ' + DATENAME(MONTH, t0.CreateDate)+ ' ' + DATENAME(YEAR, t0.CreateDate)                      
            FROM                       
                dbo.fn_get_cl_request_list_all() t0                       
                INNER JOIN dbo.Cargo t1 on t1.id = t0.IdCl                
                LEFT JOIN dbo.ShippingInstruction t2 on t2.IdCL = t0.IdCl                      
                LEFT JOIN dbo.NpePeb t3 on t3.IdCL = t0.IdCl                      
                LEFT JOIN dbo.BlAwb t4 on t4.IdCL = t0.IdCl                
    LEFT JOIN dbo.fn_get_employee_internal_ckb() t5 on t5.AD_User = t0.CreateBy                      
    LEFT JOIN dbo.fn_get_employee_internal_ckb() t6 on t6.AD_User = t0.Pic                      
    LEFT JOIN dbo.fn_get_employee_internal_ckb() t7 on t7.AD_User = t0.NextAssignTo                      
   WHERE                       
                t0.IdCl = @requestId;                                                                                           
            END                      
                      
        IF (@requestType = 'RG')                      
   BEGIN                      
            SET @flow = 'Receive Goods';                      
   --set  @Dono = (select top 1 DoNo from ShippingFleet where IdGr = @requestId)    
    
            SELECT                    
    --@DO = (SELECT        
    --  STUFF((        
    --  SELECT ', ' + EdoNo        
    --  FROM Cipl WHERE id= gt.IdCipl        
    --  FOR XML PATH('')), 1, 1, '')),       
    @DO = (SELECT        
      STUFF((        
SELECT Top 1 DoNo     
      FROM ShippingFleet WHERE IdGr = t4.Id         
      FOR XML PATH('')), 1, 1, '')),                    
    --@CIPLBranchName = (SELECT C.Branch+' - '+MA.BAreaName FROM MasterArea MA     
    --inner join Cipl C ON C.Branch = MA.BAreaCode    
    --WHERE C.id =(select top 1 IdCipl from ShippingFleet where IdGr = t4.Id)),    
    @CIPLBranchName = (SELECT    
      stuff(( select ', ' + cast(C.Branch+' - '+MA.BAreaName as varchar) FROM MasterArea MA     
    inner join Cipl C ON C.Branch = MA.BAreaCode    
    WHERE C.id  IN (select c.id from Cipl c join ShippingFleetRefrence s on s.Idcipl = c.id where s.IdGr = @requestId) for xml path('')), 1 ,1, '')),    
    @DA = (SELECT        
      STUFF((        
      SELECT Top 1 DaNo     
      FROM ShippingFleet WHERE IdGr = t4.Id        
      FOR XML PATH('')), 1, 1, '')),     
    --@DA = (SELECT        
    --  STUFF((        
    --  SELECT ', ' + Da        
    --  FROM Cipl     
    --  WHERE id = gt.IdCipl        
    --  FOR XML PATH('')), 1, 1, '')),                      
    @CiplNo = (SELECT        
      STUFF((        
      SELECT ', ' + CiplNo        
      FROM Cipl cipl
	  join ShippingFleetRefrence sf on sf.IdCipl = cipl.id
	  where sf.IdGr = @requestId
	  --WHERE id in (select id from Cipl where EdoNo In (SELECT part FROM   [SDF_SplitString](@Dono,',')))    
      FOR XML PATH('')), 1, 1, '')),          
    @requestor_id = t1.Employee_ID,                      
    @requestor_name = t1.Employee_Name,                      
    @superior_req_name = t1.Superior_Name,                      
    @superior_req_id = t1.Superior_ID,                      
    @requestor_username = t1.AD_User,                      
    @last_pic_id = t2.Employee_ID,                      
    @last_pic_name = t2.Employee_Name,                      
    @last_pic_username = t2.AD_User,                      
    @next_pic_id = t3.Employee_ID,                      
    @next_pic_name = t3.Employee_Name,                      
    @next_pic_username = t3.AD_User,                      
    @req_number = t4.GrNo,                      
    @req_date = RIGHT('0' + DATENAME(DAY, t0.CreateDate), 2) + ' ' + DATENAME(MONTH, t0.CreateDate)+ ' ' + DATENAME(YEAR, t0.CreateDate)                      
   FROM                       
                dbo.fn_get_gr_request_list_all() t0                       
                INNER JOIN dbo.GoodsReceive t4 on t4.id = t0.IdGr           
    --INNER JOIN GoodsReceiveItem GT on GT.IdGr = t0.IdGr          
    LEFT JOIN dbo.fn_get_employee_internal_ckb() t1 on t1.AD_User = t0.CreateBy                      
    LEFT JOIN dbo.fn_get_employee_internal_ckb() t2 on t2.AD_User = t0.Pic                      
                LEFT JOIN dbo.fn_get_employee_internal_ckb() t3 on t3.AD_User = t0.NextAssignTo                      
                                    
   WHERE                       
    t0.IdGr = @requestId;                      
            END                      
                      
        IF (@requestType = 'DELEGATION')                      
   BEGIN                      
            SET @flow = 'Delegation';                                                                  --SELECT * FROM dbo.fn_get_gr_request_list_all() t0 where t0.Id = @requestId;                      
   END                      
                      
            INSERT INTO  @variable_table                       
            VALUES                       
            ('@RequestorName', ISNULL(@requestor_name, '-'))                      
            ,('@RequestNo', ISNULL(@req_number, '-'))                      
            ,('@CreatedDate', ISNULL(@req_date, '-'))                      
            ,('@CiplNo', ISNULL(@CiplNo, '-'))                      
            ,('@CIPLBranchName', ISNULL(@CIPLBranchName, '-'))                      
            ,('@PICPickupPoints', ISNULL(@PICPickupPoints, '-'))                      
            ,('@DO', ISNULL(@DO, '-'))                      
            ,('@DA', ISNULL(@DA, '-'))                      
            ,('@PickupPointsArea', ISNULL(@PickupPointsArea, '-'))              
   ,('@SuperiorEmpID', ISNULL(@superior_req_id, '-'))                      
   ,('@SuperiorName', ISNULL(@superior_req_name, '-'))                      
   ,('@MobileLink', 'http://pis.trakindo.co.id')                      
   ,('@DesktopLink', 'http://pis.trakindo.co.id')                      
   ,('@ApproverPosition', ISNULL(@flow, '-'))                      
   ,('@ApproverName', ISNULL(@next_pic_name, ISNULL(@employee_name,'-')))                      
   ,('@RequestorEmpID', ISNULL(@requestor_id, '-'))                      
   ,('@flow', ISNULL(@flow, '-'))             
            ,('@NoReference', ISNULL(@NoReference, '-'))                      
   ,('@requestor_name', ISNULL(@requestor_name, '-'))                      
            ,('@requestor_id', ISNULL(@requestor_id, '-'))                      
            ,('@last_pic_name', ISNULL(@last_pic_name, '-'))                      
            ,('@last_pic_id', ISNULL(@last_pic_id, '-'))                      
            ,('@next_pic_name', ISNULL(@next_pic_name, '-'))                      
            ,('@next_pic_id', ISNULL(@next_pic_id, '-'))                      
            ,('@si_number', ISNULL(@si_number, '-'))                      
   ,('@ss_number', ISNULL(@ss_number, '-'))                      
            ,('@req_number', ISNULL(@req_number, '-'))                      
            ,('@npe_number', ISNULL(@npe_number, '-'))                      
            ,('@peb_number', ISNULL(@peb_number, '-'))                      
            ,('@bl_awb_number', ISNULL(@bl_awb_number, '-'))                      
            ,('@req_date', ISNULL(@req_date, '-'))                      
            ,('@superior_req_name', ISNULL(@superior_req_name, '-'))                      
            ,('@superior_req_id', ISNULL(@superior_req_id, '-'))            
            ,('@Note', ISNULL(@Note, '-'))          
 END                      
END                      
                                      
------------------------------------------------------------------                      
-- 3. Melakukan Replace terhadap data yang di petakan di template dgn menggunakan perulangan                      
------------------------------------------------------------------                      
BEGIN                      
    DECLARE cursor_variable CURSOR                      
    FOR                       
    SELECT                       
        key_data,              
        val_data                       
    FROM                       
        @variable_table;                      
                                                                                                                      
    OPEN cursor_variable;                       
    FETCH NEXT FROM cursor_variable INTO @key, @val;                       
    WHILE @@FETCH_STATUS = 0                      
        BEGIN                      
        -- Melakukan Replace terhadap variable di template dengan value dari hasil pencarian data diata.                      
        IF ISNULL(@key, '') <> ''                      
        BEGIN                      
  SET @template = REPLACE(@template, @key, @val);                      
        END                      
                      
    FETCH NEXT FROM cursor_variable INTO                       
                @key,                       
                @val;                      
        END;                      
                                                      
    CLOSE cursor_variable;                       
    DEALLOCATE cursor_variable;                      
END                      
                                      
------------------------------------------------------------------                      
-- 4. Menampilkan hasil dari proses replace                      
------------------------------------------------------------------                      
BEGIN                      
    RETURN @template;                      
END                      
END 






